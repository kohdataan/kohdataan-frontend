{"version":3,"sources":["assets/bot.svg","assets/camera-add-solid.svg","serviceWorker.js","components/Container/index.js","components/BottomNavigation/index.js","components/BottomNavigationLink/index.js","components/ModalContainer/index.js","components/ButtonContainer/index.js","components/ValidatedTextArea/index.js","components/ValidatedInputField/index.js","components/RegistrationProblem/index.js","api/errors.js","api/user/user.js","containers/RegistrationProblemContainer.js","components/BottomNavigationBot/PageInformation/index.js","components/BottomNavigationBot/index.js","utils/userLogout.js","containers/BottomNavigationContainer.js","api/channels/channels.js","assets/groupColors.js","components/Groups/Group/Member/index.js","components/Groups/Group/index.js","components/Tutorial/index.js","components/Groups/index.js","utils/userIsAdmin.js","components/GroupSuggestions/SuggestionBox/index.js","components/BouncingLoader/index.js","components/GroupSuggestions/index.js","store/user/userAction.js","contants/actionTypes.js","api/interests/interest.js","store/interest/interestAction.js","store/root/index.js","store/channels/channelAction.js","containers/GroupsContainer.js","utils/PrivateRoute.js","components/Chat/MessageList/Message/index.js","utils/getUsernameById.js","utils/isUserLeavingOrJoiningChannel.js","components/Chat/MessageList/index.js","components/Chat/ChatHeader/index.js","components/Chat/FilePreview/index.js","components/Chat/AudioInput/index.js","components/Chat/UserInput/index.js","components/Chat/MembersSider/Member/index.js","components/Chat/MembersSider/LeaveChannelModal/index.js","hooks/useOutsideClick.js","components/Chat/MembersSider/index.js","components/Chat/index.js","containers/ChatContainer.js","components/LogIn/index.js","containers/LogInContainer.js","components/PrivacyPolicy/index.js","components/ServiceRules/index.js","containers/ServiceRulesContainer.js","components/DateSelectField/index.js","containers/ToolTipModalContainer.js","utils/getAge.js","components/AccessibilityStatement/index.js","components/CreateAccount/index.js","containers/CreateAccountContainer.js","components/RegistrationFlow/RegistrationTitle/index.js","contants/registrationPages.js","components/RegistrationFlow/StepButton/index.js","components/RegistrationFlow/InfoPage/index.js","components/ShadowBox/index.js","components/InputField/index.js","components/RegistrationFlow/Nickname/index.js","components/RadioButton/index.js","components/RegistrationFlow/ShowAge/index.js","components/TextArea/index.js","components/RegistrationFlow/Description/index.js","components/ImageUploader/index.js","components/RegistrationFlow/Picture/index.js","api/location/location.js","components/RegistrationFlow/Location/index.js","contants/interestIcons.js","utils/getIcon.js","components/EditInterestsContainer/index.js","components/RegistrationFlow/Interests/index.js","utils/dataUriToBlob.js","components/RegistrationFlow/ErrorNotification/index.js","utils/updateUsername.js","containers/RegistrationContainer.js","components/RegistrationSuccessMessage/index.js","containers/RegistrationSuccessContainer.js","components/ThankYouMessage/index.js","containers/ThankYouMessageContainer.js","components/Profile/ProfileImage/index.js","components/Profile/Description/index.js","components/Profile/InterestsGrid/index.js","components/Profile/ProfileHeader/index.js","components/Profile/EditButton/index.js","components/Profile/index.js","containers/ProfileContainer.js","containers/OtherUserProfileContainer.js","components/EmailSmsForm/index.js","containers/EmailVerificationContainer.js","containers/PasswordResetRequestContainer.js","components/EmailSmsInfo/index.js","containers/PasswordResetInfoContainer.js","components/PasswordResetPage/index.js","containers/PasswordResetPageContainer.js","components/ContentLoader/index.js","api/blocking/blocked_user.js","components/Friends/Friend/index.js","components/Friends/FriendSearch/index.js","components/SearchBar/index.js","components/Friends/index.js","store/friends/friendsAction.js","containers/FriendsContainer.js","components/Chat/ViewImage/index.js","containers/ViewImageContainer.js","components/EditProfile/EditTitle/index.js","components/EditProfile/index.js","containers/EditProfileContainer.js","components/EditInterests/index.js","containers/InterestsContainer.js","components/FullScreenLoading/index.js","components/Account/EditAccountModal/index.js","components/Account/DeleteAccountModal/index.js","components/Account/index.js","containers/ChangeAccountInfoContainer.js","components/RestoreAccount/index.js","containers/RestoreAccountContainer.js","components/AccountLocked/index.js","components/CookieConsentBanner/index.js","components/IEWarningBanner/index.js","App.js","contants/storageTypes.js","store/storage/storageAction.js","store/user/userReducer.js","store/interest/interestReducer.js","store/channels/channelReducer.js","store/friends/friendsReducer.js","store/root/rootReducer.js","store/rootReducer.js","store/utils.js","utils/network.js","store/configureMattermostStore.js","index.js","store/general/generalSelectors.js"],"names":["module","exports","Boolean","window","location","hostname","match","memo","props","className","children","BottomNavigation","other","defaultProps","title","route","icon","exact","to","tabIndex","activeClassName","aria-current","aria-hidden","Modal","setAppElement","customStyles","content","top","left","right","bottom","marginRight","transform","position","border","borderRadius","textAlign","maxHeight","minWidth","maxWidth","overlay","zIndex","backgroundColor","customStylesEditModal","padding","minHeight","width","customStylesTutorial","customStylesLong","paddingTop","customStylesCookie","paddingBottom","height","customStylesSendMessage","ModalContainer","modalIsOpen","closeModal","label","isLong","tutorial","editModal","cookie","isSendMessage","isOpen","onRequestClose","contentLabel","style","styles","getStyles","role","aria","modal","ButtonContainer","secondary","onClick","type","onKeyPress","aria-label","ValidatedTextArea","React","forwardRef","ref","name","showLabel","inputClassName","labelClassName","onChange","maxLength","rows","htmlFor","id","ValidatedInputField","showPlaceholder","ariaInvalid","disabled","aria-invalid","placeholder","RegistrationProblem","handleEmailSending","handleClick","text","user","useForm","register","handleSubmit","errors","clearError","onSubmit","data","a","trim","email","message","includes","required","minLength","pattern","handleFetchErrors","resp","ok","Error","statusText","json","userLogin","process","fetch","method","body","JSON","stringify","headers","userLogout","token","Authorization","userSignUp","resetPassword","respJSON","setNewPassword","checkIfResetLinkHasBeenUsed","updatePassword","getUser","getUserByUsername","username","updateUser","addUserInterests","userInterests","length","getUserInterest","getInterestsByUsername","sendEmail","deleteUser","deleteUserNow","restoreUser","sendVerifyEmailLink","verifyEmail","RegistrationProblemContainer","history","useState","setText","msg","API","success","push","prevProps","prest","rest","PageInformation","path","direct","inChat","test","BottomNavigationBot","handleLogout","showBot","setShowBot","showPageInformation","setShowPageInformation","showSendMessage","setShowSendMessage","showInfoModal","setShowInfoModal","logOutConfirmation","setLogOutConfirmation","openModal","setter","src","botIcon","alt","href","logoutAction","matterMostLogoutAction","localStorage","removeItem","getItem","console","error","connect","state","currentUserId","entities","users","profiles","dispatch","bindActionCreators","logout","withRouter","pathname","matterMostLogout","split","logoutHandler","getChannelInvitations","getChannelInvitationMembers","addUserInterestsToChannelPurpose","channelId","removeUserInterestsFromChannelPurpose","handleUserChangingInterestToChannelsPurposes","Siniset","Vaaleansiniset","Tummansiniset","Haaleansiniset","Kirkkaansiniset","Merensiniset","Sähkönsiniset","Taivaansiniset","Laivastonsiniset","Syvänsiniset","Yönsiniset","Teräksensiniset","Lemmikinsiniset","Indigonsiniset","Jäänsiniset","Punaiset","Vaaleanpunaiset","Tummanpunaiset","Haaleanpunaiset","Kirkkaanpunaiset","Viininpunaiset","Ruosteenpunaiset","Syvänpunaiset","Joulunpunaiset","Tulenpunaiset","Kirsikanpunaiset","Unikonpunaiset","Tiilenpunaiset","Omenanpunaiset","Keltaiset","Vaaleankeltaiset","Tummankeltaiset","Haaleankeltaiset","Kirkkaankeltaiset","Kullankeltaiset","Auringonkeltaiset","Sinapinkeltaiset","Syvänkeltaiset","Oljenkeltaiset","Okrankeltaiset","Leinikinkeltaiset","Vihreät","Vaaleanvihreät","Tummanvihreät","Haaleanvihreät","Kirkkaanvihreät","Metsänvihreät","Ruohonvihreät","Mintunvihreät","Limenvihreät","Syvänvihreät","Merenvihreät","Oliivinvihreät","Sinivihreät","Ruskeat","Vaaleanruskeat","Tummanruskeat","Haaleanruskeat","Kullanruskeat","Suklaanruskeat","Kuparinruskeat","Kastanjanruskeat","Pronssinruskeat","Pähkinänruskeat","Punaruskeat","Toffeenruskeat","Hiekanruskeat","Siirapinruskeat","Oranssit","Vaaleanoranssit","Tummanoranssit","Haaleanoranssit","Kirkkaanoranssit","Violetit","Vaaleanvioletit","Tummanvioletit","Haaleanvioletit","Kirkkaanvioletit","Harmaat","Vaaleanharmaat","Tummanharmaat","Haaleanharmaat","Kirkkaanharmaat","Hopeanharmaat","Syvänharmaat","Mustat","Sysimustat","Yönmustat","Lakritsinmustat","Valkoiset","Luonnonvalkoiset","Lumenvalkoiset","Liidunvalkoiset","Kermanvalkoiset","Turkoosit","Vaaleanturkoosit","Tummanturkoosit","Haaleanturkoosit","Kirkkaanturkoosit","Syvänturkoosit","Keskiyönsiniset","Mustikansiniset","Farkunsiniset","Musteensiniset","Safiirinsiniset","Harmaansiniset","Kissankellonsiniset","Ruiskukansiniset","Sinivioletit","Terrakotanpunaiset","Punamullanpunaiset","Rubiininpunaiset","Ruusunpunaiset","Ketsupinpunaiset","Paloautonpunaiset","Vadelmanpunaiset","Mansikanpunaiset","Puolukanpunaiset","Verenpunaiset","Ferrarinpunaiset","Aniliininpunaiset","Marjapuuronpunaiset","Mesimarjanpunaiset","Chilinpunaiset","Laventelinpunaiset","Luumunpunaiset","Karmiininpunaiset","Korallinpunaiset","Tomaatinpunaiset","Herukanpunaiset","Persikanpunaiset","Oranssinpunaiset","Greipinoranssit","Appelsiininoranssit","Mandariininoranssit","Voikukankeltaiset","Rikinkeltaiset","Currynkeltaiset","Banaaninkeltaiset","Rentukankeltaiset","Sitruunankeltaiset","Voinkeltaiset","Vehnänkeltaiset","Ruskeankeltaiset","Vihreänkeltaiset","Keväänvihreät","Keltaisenvihreät","Smaragdinvihreät","Myrkynvihreät","Havunvihreät","Sammaleenvihreät","Armeijanvihreät","Harmaanvihreät","Omenanvihreät","Päärynänvihreät","Tillinvihreät","Apilanvihreät","Kuusenvihreät","Männynvihreät","Koivunvihreät","Vedenvihreät","Kaakaonruskeat","Seepianruskeat","Maitokahvinruskeat","Mahonginruskeat","Pahvinruskeat","Kaarnanruskeat","Kävynruskeat","Piparkakunruskeat","Ruosteenruskeat","Harmaanruskeat","Kanelinruskeat","Hiilenharmaat","Hiirenharmaat","Elefantinharmaat","Grafiitinharmaat","Betoninharmaat","Siniharmaat","Helmenharmaat","Savunharmaat","Hylkeenharmaat","Teräksenharmaat","Armeijanharmaat","Lyijynharmaat","Myrskynharmaat","Loskanharmaat","Jäänharmaat","Punaharmaat","Tuhkanharmaat","Vihreänharmaat","Maantienharmaat","Tinanharmaat","Jäkälänharmaat","Pulunharmaat","Pajunkissanharmaat","Ruskeanharmaat","Noenmustat","Korpinmustat","Salmiakinmustat","Member","nickname","iconColor","userId","key","userFirstLetter","image","setImage","useEffect","url","Date","now","getMemberImage","backgroundImage","channel","getMembers","unreadCount","getPosts","showTownSquare","members","setMembers","parsedPurpose","setParsedPurpose","unreadPosts","setUnreadPosts","posts","setPosts","membersToShow","setMembersToShow","currentUser","setCurrentUser","purpose","parsed","parse","sorted","Object","keys","sort","b","e","log","getParsedPurpose","memberData","getMemberData","memberIds","map","member","user_id","channelMembers","filter","p","indexOf","setMemberProfilesToShow","channelPosts","fetchPosts","beginIndex","getUnreadMessages","values","p1","p2","create_at","slice","getUnreadPosts","find","groupNameColors","display_name","toLowerCase","join","Tutorial","steps","updateTutorialWatched","navigateBack","locale","back","close","last","next","skip","callback","action","lifecycle","step","target","continuous","disableScrolling","buttonNext","color","fontFamily","fontSize","outline","buttonBack","marginLeft","buttonClose","display","spotlight","buttonSkip","disableOverlayClose","disableCloseOnEsc","Groups","channels","teams","getUnreadCount","tutorialWatched","disableBeacon","isSystemAdmin","roles","isTeamAdmin","currentTeamId","membersInTeam","scheme_admin","SuggestionBox","hidden","delete_at","Loader","zeroMargin","joinedChannels","handleJoinChannel","resetChannelInvitations","cards","setCards","channelsLoading","setChannelsLoading","remove","handleGetChannelsAgain","BouncingLoader","card","i","min","buttons","onAfterSwipe","res","setItem","password","matterMostLogin","payload","addUserToState","updateUserPassword","restoreUserAccount","restored","getUserInterests","result","interests","channelAPI","getInterests","getInterestsAction","rootLoading","rootLoadingReady","initMattermostReduxClient","Client4","setUrl","init","setServerVersion","initUser","loadMe","initTeam","getState","teamId","team","selectTeam","getTeamMembers","rootStartUp","startGroupPageFetching","groupPageFetchingReady","getMembersByChannelIdAction","userDetails","updateChannelInvitationsTimestamp","channelInvitationsAt","getChannelInvitationsAction","channelInvitations","promises","found","forEach","Promise","all","timedGetChannelInvitationsAction","lastInvitationsTimestamp","moment","diff","fetchChannelsAndInvitations","fetchMyChannelsAndMembers","getProfiles","GroupsContainer","channelSuggestionMembers","myChannels","joinChannel","channelSuggestions","getChannelMembers","getInvitationsAgain","profileReady","isInitialized","setIsInitialized","filteredSuggestions","setFilteredSuggestions","setShowTownSquare","activeMemberMmProfiles","setActiveMemberMmProfiles","initialize","dateObject","weekday","isoWeekday","beforeTime","afterTime","isBetween","getGroupChannels","allChannels","getChannelInfoForMyChannels","activeProfilesArr","getActiveMattermostProfiles","item","total_msg_count","msg_count","mmUser","membersInChannel","myMembers","joinChannelAction","getChannelMembersAction","fetchChannelsAndInvitationsAction","getChannelInvitationsAgain","resetChannelInvitationsAction","updateUserAction","getPostsAction","PrivateRoute","Component","component","render","from","Message","sender","isUserLeavingOrJoiningChannel","senderId","timeSent","dateSent","showDate","directChannel","files","senderMmUsername","iconMemberStatus","isAdmin","pinPost","filesData","lastPost","dividerId","messageText","setMessageText","deleted","setDeleted","dateText","toLocaleDateString","messageWrapperClassList","messageContentClassList","componentDecorator","aria-haspopup","data-focusable","aria-live","status","getMemberStatus","mime_type","controls","config","file","attributes","controlsList","disablePictureInPicture","preload","getUserNamebyId","profile","post","MessageList","getNickNamebyId","getStatusById","lastViewedAt","filteredPosts","setFilteredPosts","useRef","previousTime","previousDate","previousSender","current","scrollTop","scrollHeight","filtered","getLastPost","timestampValues","showTime","year","month","day","toLocaleTimeString","hour","minute","hour12","sendTime","sendDate","show","setTimeStampValues","isUserLeavingOrJoining","file_ids","getUsernameById","Header","toggleSider","otherUser","otherUserName","header","FilePreview","handleChange","fileId","orientation","setMsg","addCaption","imageContentClassList","getOrientationClassName","value","maxRows","isRecording","stream","setStream","recorder","setRecorder","recordingFinished","setRecorderFinished","timer","createRef","stop","stopRecording","startRecording","isIE","navigator","mediaDevices","getUserMedia","audio","openStream","RecordRTC","mimeType","recorderType","StereoAudioRecorder","lastUnit","checkpoints","time","Seconds","blob","getBlob","File","createPost","uploadFile","setMessage","setFileId","setModalIsOpen","errorModalIsOpen","setErrorModalIsOpen","setOrientation","getExifData","isBrowser","EXIF","getData","pretty","orientationTag","getTag","setIsRecording","isUploading","setIsUploading","fileInput","preventDefault","messageToUse","undefined","channel_id","str","replace","addFile","FormData","append","size","file_infos","handleAudioSubmit","audioFile","accept","click","overlayClassName","nickName","getUsername","showConfirmation","handleLeaveChannel","useOutsideClick","contains","document","addEventListener","removeEventListener","toggleSiderClosedIfOpen","setShowConfirmation","Chat","getFilesForPost","profilesInChannel","statuses","showSider","setShowSider","pinPostModalIsOpen","setPinPostModalIsOpen","afterPinModal","setAfterPinModal","pinPostId","setPinPostId","pinPostSenderData","setPinPostSenderData","pinPostText","setPinPostText","activeUserIds","getMembersToShow","getNicknameById","visibleName","getUserDataById","getDeleted","friend","mmid","mmProfile","closePinPostModal","closeAfterPinModal","ChatHeader","getOtherUserName","getOtherUser","currentUserData","completePinPost","ownProps","currentChannelId","params","createPostAction","getFilesForPostAction","uploadFileAction","fetchChannelsAndMembersAction","getProfilesAction","getProfilesInChannel","getProfilesInChannelAction","removeChannelMember","removeChannelMemberAction","viewChannel","viewChannelAction","pinPostAction","getPostsAfter","getPostsAfterAction","currentPosts","setCurrentPosts","currentMembers","setCurrentMembers","currentChannel","filteredOrder","setFilteredOrder","setLastViewedAt","then","getCurrentMemberData","currentMember","last_viewed_at","lastViewedPost","filteredIds","newOrder","order","getPostsAfterLastViewed","allPosts","postsArr","sortPosts","LogIn","handleLogin","uuid","textToAdd","setError","errorMessage","LogInContainer","uuidValid","setUuidValid","response","userData","userLoginAction","addUserToStateAction","setRulesAccepted","setOpenErrorModal","privacyPolicyModalIsOpen","setPrivacyPolicyModalIsOpen","labelledby","DateSelectField","noOptionsMessage","ariaLabel","setAriaLabel","years","getFullYear","days","options","getBorderStyle","isFocused","container","provided","menu","clearIndicator","dropdownIndicator","indicatorSeparator","option","background","control","flexGrow","flexBasis","boxShadow","margin","input","singleValue","arialabel","getAriaLabel","isSearchable","isClearable","isRequired","closeModalBtnStyle","getAge","birthdate","CreateAccount","handleAccountCreation","apiErrors","watch","setValue","rulesAccepted","passwordModalIsOpen","setPasswordModalIsOpen","birthday","setBirthday","birthmonth","setBirthmonth","birthyear","setBirthyear","currentApiErrors","setCurrentApiErrors","openErrorModal","accessibilityStatementModalIsOpen","setAccessibilityStatementModalIsOpen","fields","closeAcceptModal","usersBirthdate","utc","format","ageAccepted","firstname","lastname","phoneNumber","autoComplete","autocomplete","String","selected","aria-labelledby","validate","passwordConfirm","setErrors","number","startsWith","uniqid","first_name","last_name","emailAddress","pages","info","previous","nextButtonActive","setOpenModal","handleProfileReady","InputField","ariaRequired","aria-required","Nickname","hideStep","RadioButton","checked","ShowAge","showAge","age","TextArea","Description","setShowFileLoader","customIconStyle","borderStyle","CameraIconPath","backgroundRepeat","backgroundPosition","backgroundSize","onBeforeFileLoad","Picture","showFileLoader","rotation","setRotation","scale","setScale","x","y","setPosition","imageFile","setImageFile","imageUploaded","setImageUploaded","editorRef","handleScaleByDirection","direction","parseFloat","canvas","getImageScaledToCanvas","toDataURL","saveAfterChange","rotate","onPositionChange","pos","onImageReady","defaultValue","ariaLabelForHandle","handleStyle","borderColor","railStyle","trackStyle","max","onKeyDown","getLocations","Location","locations","setLocations","setShowLocation","showLocation","fetchedLocations","fetchLocations","isSelected","marginTop","classNamePrefix","interestIconList","getIcon","icons","setInterests","sortedOptions","setSortedOptions","interestsOnMount","itemIsSelected","interestsArr","indx","splice","removeFromSelected","addToSelected","interest","aria-checked","Interests","dataURItoBlob","dataURI","lowerCased","binary","atob","array","charCodeAt","Blob","Uint8Array","updateUsername","mmuser","letter","concat","substr","RegistrationContainer","mattermostId","interestOptions","registrationError","userBirthdate","setDefaultProfileImage","setNickname","setShowAge","setLocation","description","setDescription","img","setImg","setNextButtonActive","setNextButtonStatus","checkInputValidity","page","profileCreationAction","updatedUsername","uploadProfileImage","dataUriToBlob","stepButtonActions","toString","subpage","results","setDefaultProfileImageAction","imageUri","PureComponent","this","sortedInterestsList","interestList","EditButton","isHighlighted","classNameList","Profile","myUserInfo","ownProfile","startDirectChannel","returnToTutorial","setReturnToTutorial","placement","reversedSteps","searchTerm","goBack","ProfileHeader","blockedUsers","ProfileContainer","OtherUserProfileContainer","getProfilesByUsernames","createDirectChannel","setmmUser","otherUserInfo","setOtherUserInfo","newChannel","fetchOtherUser","userInfo","catch","getProfilesByUsernamesAction","createDirectChannelAction","EmailSmsForm","pagePurpose","handleRequest","apiError","setApiError","setPhoneNumber","showModal","setShowModal","handleVerifyRequest","resetInfo","formattedInfo","handleResetRequest","infoToSend","EmailSmsInfo","guide","passwordResetInfo","handleNewPassword","checkIfLinkIsUsed","TextLine","speed","primaryColor","secondaryColor","rx","ry","addUserToBlocked","removeUserFromBlocked","getLatestMessage","setUser","blockedFriends","setBlockedFriends","blocked","setBlocked","userObj","getUserInfo","checkUserBlockedStatus","toggleBlockedStatus","foundId","unblockedUser","blockedUser","deleteAt","profileData","SearchBar","handleClear","handleKeyPress","searchProfiles","friendSearch","setFriendSearch","friendSearchResult","setFriendSearchResult","friendSearchTextInput","handleFriendSearchReset","filterSearchResults","handleFriendSearchChange","searchText","foundProfiles","last_post_at","startFriendsPageFetching","friendsPageFetchingReady","fetchDirectChannelMembers","fetchFriendsPageData","searchProfilesAction","fetchFriendsPageDataAction","directChannels","setDirectChannels","initialFetch","channelInfo","friendId","postMap","postsArray","reverse","messageObj","senderInfo","handleEditReady","newDescription","setNewDescription","newNickname","setNewNickname","newShowAge","setNewShowAge","newShowLocation","setNewShowLocation","newLocation","setNewLocation","marginBottom","mmuserId","uploadProfileImageAction","getUserAction","updateImages","newUserInfo","currentInterestIds","handleInterestEditReady","newInterests","setNewInterests","EditInterestsContainer","ids","addUserInterestsAction","labels","patterns","messages","field","DeleteAccountModal","deleteError","nodeUser","showDeleteModal","setShowDeleteModal","setDeleteError","setField","fieldName","closeEditPage","handleDeleteUser","current_password","passwordCurrent","new_password","updateUserPasswordAction","handleRestore","handleDeleteNow","restoreUserAction","handleDeleteUserNow","useHistory","go","CookieConsentBanner","buttonText","onAccept","flexDirection","flexWrap","alignItems","justifyContent","buttonStyle","contentStyle","flex","IEWarningBanner","ieModalIsOpen","setIeModalIsOpen","cookieName","App","componentDidMount","shouldComponentUpdate","nextProps","pUser","loading","root","EmailVerificationContainer","PasswordResetRequestContainer","PasswordResetInfoContainer","PasswordResetPageContainer","RegistrationSuccessContainer","ThankYouMessageContainer","CreateAccountContainer","FriendsContainer","EditProfileContainer","ChatContainer","ViewImageContainer","InterestsContainer","ChangeAccountInfoContainer","store","rootStartUpAction","StorageTypes","storageRehydrate","incoming","persistor","pause","storage","timestamp","err","resume","defaultState","friends","appReducer","transformFromSet","hasOwnProperty","Set","Array","transformToSet","transformSet","setTransforms","toStorage","transformer","retryTimeoutId","retryCount","handle","online","requestAnimationFrame","setTimeout","isOnline","onLine","ping","checkNetworkStatus","clearTimeout","retryTime","detect","whitelist","prefixes","Observable","initialState","setTransformer","createTransform","inboundState","prop","outboundState","offlineOptions","persist","localforage","extendPrototype","localForage","ready","persistStore","keyPrefix","General","STORE_REHYDRATION_COMPLETE","complete","configObservables","crossTabNotification","observable","newObservable","changeDetection","restoredState","iterate","keyspace","subscribe","args","oldValue","statePartial","newValue","purging","basePath","getConfig","SiteURL","URL","basename","origin","getBasePath","requests","RequestStatus","SUCCESS","purge","search","OFFLINE_STORE_RESET","assign","reduxInitialState","persistOptions","autoRehydrate","debounce","transforms","_stateIterator","collection","storageKey","_stateGetter","_stateSetter","detectNetwork","configureServiceStore","combineReducers","enableBuffer","configureMattermostStore","ReactDOM","getElementById","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.6f2dbaa9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bot.c8cca1a5.svg\";","module.exports = __webpack_public_path__ + \"static/media/camera-add-solid.0fa4b1f5.svg\";","/* eslint-disable no-console, no-param-reassign, no-use-before-define */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport './styles.scss'\n\nconst Container = props => {\n  const { className, children } = props\n  return <div className={className}>{children}</div>\n}\n\nContainer.propTypes = {\n  className: PropTypes.string.isRequired,\n  children: PropTypes.instanceOf(Array).isRequired,\n}\n\nexport default memo(Container)\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport './styles.scss'\n\nconst BottomNavigation = props => {\n  const { children, className, ...other } = props\n  return (\n    <div className=\"bottom-navigation-container\">\n      <nav className={className} {...other}>\n        {children}\n      </nav>\n    </div>\n  )\n}\n\nBottomNavigation.propTypes = {\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string,\n}\n\nBottomNavigation.defaultProps = {\n  className: 'bottom-navigation',\n}\n\nexport default memo(BottomNavigation)\n","import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { NavLink } from 'react-router-dom'\nimport './styles.scss'\n\nconst BottomNavigationLink = props => {\n  const { title, route, icon } = props\n\n  return (\n    <NavLink\n      exact\n      to={route}\n      tabIndex={0}\n      className=\"nav-link\"\n      activeClassName={`nav-link-active nav-link-${title}`}\n      aria-current=\"page\"\n    >\n      <div>\n        <i aria-hidden=\"true\" className={icon} title={title} />\n      </div>\n      <p className=\"label\">{title}</p>\n    </NavLink>\n  )\n}\n\nBottomNavigationLink.propTypes = {\n  title: PropTypes.string.isRequired,\n  route: PropTypes.string.isRequired,\n  icon: PropTypes.string.isRequired,\n}\n\nexport default memo(BottomNavigationLink)\n","import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport Modal from 'react-modal'\n\nModal.setAppElement('#root')\n\nconst customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-20%',\n    transform: 'translate(-50%, -50%)',\n    position: 'fixed',\n    border: 'none',\n    borderRadius: '5px',\n    textAlign: 'center',\n    maxHeight: '80vh',\n    minWidth: '290px',\n    maxWidth: '400px',\n  },\n  overlay: {\n    position: 'fixed',\n    zIndex: '4000',\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n}\n\nconst customStylesEditModal = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-20%',\n    transform: 'translate(-50%, -50%)',\n    position: 'fixed',\n    border: 'none',\n    borderRadius: '5px',\n    textAlign: 'center',\n    padding: '7vh 5vh',\n    minHeight: '30vh',\n    maxHeight: '80vh',\n    width: '80vw',\n    maxWidth: '400px',\n  },\n  overlay: {\n    position: 'fixed',\n    zIndex: '4000',\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n}\n\nconst customStylesTutorial = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-20%',\n    transform: 'translate(-50%, -50%)',\n    position: 'fixed',\n    border: 'none',\n    borderRadius: '5px',\n    textAlign: 'center',\n    padding: '8vh',\n    minHeight: '30vh',\n    maxHeight: '80vh',\n    width: '80vw',\n    maxWidth: '960px',\n  },\n  overlay: {\n    position: 'fixed',\n    zIndex: '4000',\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n}\n\nconst customStylesLong = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-20%',\n    paddingTop: '30px',\n    transform: 'translate(-50%, -50%)',\n    position: 'fixed',\n    border: 'none',\n    borderRadius: '5px',\n    maxHeight: '95vh',\n    maxWidth: '80vh',\n    minWidth: '50vh',\n    minHeight: '60vh',\n  },\n  overlay: {\n    position: 'fixed',\n    zIndex: '4000',\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n}\n\nconst customStylesCookie = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-20%',\n    paddingTop: '10px',\n    paddingBottom: '10px',\n    transform: 'translate(-50%, -50%)',\n    position: 'fixed',\n    border: 'none',\n    borderRadius: '5px',\n    width: '80%',\n    height: '180px',\n    minHeight: '156px',\n    minWidth: '330px',\n    maxHeight: '306px',\n    backgroundColor: '#2B373B',\n  },\n  overlay: {\n    position: 'fixed',\n    zIndex: '4000',\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n}\n\nconst customStylesSendMessage = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-20%',\n    transform: 'translate(-50%, -50%)',\n    position: 'fixed',\n    border: 'none',\n    borderRadius: '5px',\n    maxHeight: '95vh',\n    maxWidth: '80vh',\n    minWidth: '50vh',\n    minHeight: '60vh',\n    padding: '0px',\n  },\n  overlay: {\n    position: 'fixed',\n    zIndex: '4000',\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n}\n\nconst ModalContainer = props => {\n  const {\n    children,\n    modalIsOpen,\n    closeModal,\n    label,\n    isLong,\n    tutorial,\n    editModal,\n    cookie,\n    isSendMessage,\n  } = props\n\n  const getStyles = () => {\n    let styles = customStyles\n    if (isLong) {\n      styles = customStylesLong\n    } else if (tutorial) {\n      styles = customStylesTutorial\n    } else if (editModal) {\n      styles = customStylesEditModal\n    } else if (cookie) {\n      styles = customStylesCookie\n    } else if (isSendMessage) {\n      styles = customStylesSendMessage\n    }\n    return styles\n  }\n\n  return (\n    <Modal\n      isOpen={modalIsOpen}\n      onRequestClose={closeModal}\n      contentLabel={label}\n      style={getStyles()}\n      role=\"dialog\"\n      aria={{\n        label,\n        modal: true,\n      }}\n    >\n      {children}\n    </Modal>\n  )\n}\n\nModalContainer.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.instanceOf(Array),\n    PropTypes.node,\n  ]).isRequired,\n  modalIsOpen: PropTypes.bool,\n  closeModal: PropTypes.func.isRequired,\n  label: PropTypes.string.isRequired,\n  isLong: PropTypes.bool,\n  tutorial: PropTypes.bool,\n  editModal: PropTypes.bool,\n  cookie: PropTypes.bool,\n  isSendMessage: PropTypes.bool,\n}\n\nModalContainer.defaultProps = {\n  isLong: false,\n  modalIsOpen: false,\n  editModal: false,\n  tutorial: false,\n  cookie: false,\n  isSendMessage: false,\n}\n\nexport default memo(ModalContainer)\n","import React, { memo } from 'react'\nimport './styles.scss'\nimport propTypes from 'prop-types'\n\nconst ButtonContainer = props => {\n  const { className, children, secondary, onClick, label, role } = props\n  return (\n    <button\n      type=\"button\"\n      className={`button-container ${\n        secondary ? `button-secondary` : ``\n      } ${className}`}\n      onClick={onClick}\n      onKeyPress={onClick}\n      tabIndex=\"0\"\n      aria-label={label}\n      role={role}\n    >\n      {children}\n    </button>\n  )\n}\n\nButtonContainer.propTypes = {\n  className: propTypes.string.isRequired,\n  children: propTypes.oneOfType([\n    propTypes.string,\n    propTypes.instanceOf(Array),\n    propTypes.node,\n  ]).isRequired,\n  onClick: propTypes.func.isRequired,\n  secondary: propTypes.bool,\n  label: propTypes.string,\n  role: propTypes.string,\n}\n\nButtonContainer.defaultProps = {\n  secondary: false,\n  label: '',\n  role: 'button',\n}\n\nexport default memo(ButtonContainer)\n","import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\n\nconst ValidatedTextArea = React.forwardRef((props, ref) => {\n  const {\n    label,\n    name,\n    showLabel,\n    inputClassName,\n    labelClassName,\n    onChange,\n    maxLength,\n    rows,\n  } = props\n  return (\n    <label htmlFor={label} className={inputClassName}>\n      {showLabel && label}\n      <textarea\n        type=\"text\"\n        name={name}\n        id={label}\n        ref={ref}\n        className={labelClassName}\n        onChange={onChange}\n        maxLength={maxLength}\n        rows={rows}\n      />\n    </label>\n  )\n})\n\nValidatedTextArea.propTypes = {\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  showLabel: PropTypes.bool,\n  inputClassName: PropTypes.string,\n  labelClassName: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  maxLength: PropTypes.number,\n  rows: PropTypes.number,\n}\n\nValidatedTextArea.defaultProps = {\n  showLabel: true,\n  inputClassName: '',\n  labelClassName: '',\n  maxLength: 1000,\n  rows: 4,\n}\n\nexport default memo(ValidatedTextArea)","import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\n\nconst ValidatedInputField = React.forwardRef((props, ref) => {\n  const {\n    label,\n    name,\n    showLabel,\n    showPlaceholder,\n    onChange,\n    ariaInvalid,\n    inputClassName,\n    labelClassName,\n    type,\n    disabled,\n  } = props\n  return (\n    <label htmlFor={label} className={inputClassName}>\n      {showLabel && label}\n      <input\n        type={type}\n        name={name}\n        ref={ref}\n        id={label}\n        onChange={onChange}\n        aria-label={label}\n        aria-invalid={ariaInvalid}\n        placeholder={showPlaceholder ? label : ''}\n        className={labelClassName}\n        disabled={disabled}\n      />\n    </label>\n  )\n})\n\nValidatedInputField.propTypes = {\n  type: PropTypes.string,\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  showLabel: PropTypes.bool,\n  showPlaceholder: PropTypes.bool,\n  ariaInvalid: PropTypes.bool,\n  inputClassName: PropTypes.string,\n  labelClassName: PropTypes.string,\n  disabled: PropTypes.bool,\n}\n\nValidatedInputField.defaultProps = {\n  type: 'text',\n  showLabel: true,\n  showPlaceholder: false,\n  ariaInvalid: false,\n  inputClassName: '',\n  labelClassName: '',\n  onChange: null,\n  disabled: false,\n}\n\nexport default memo(ValidatedInputField)\n","import React, { memo } from 'react'\nimport { Link } from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport useForm from 'react-hook-form'\nimport ValidatedTextArea from '../ValidatedTextArea'\nimport ValidatedInputField from '../ValidatedInputField'\nimport ButtonContainer from '../ButtonContainer'\nimport './styles.scss'\n\nconst RegistrationProblem = ({\n  handleEmailSending,\n  handleClick,\n  text,\n  user,\n}) => {\n  const { register, handleSubmit, errors, clearError } = useForm()\n\n  const onSubmit = async data => {\n    await handleEmailSending(\n      data.name.trim(),\n      user ? user.email : data.email.trim(),\n      data.message.trim(),\n      handleClick ? 'Yhteydenotto' : 'Ongelma rekisteröitymisessä'\n    )\n  }\n\n  return (\n    <main className=\"registration-problem-container\">\n      <h1 className=\"main-title\">Kohdataan</h1>\n      <div className=\"registration-problem-content-container\">\n        {text && text.includes('Kiitos') ? (\n          <div className=\"registration-problem-text\">\n            <h2 className=\"registration-success-text\">{text}</h2>\n            <p>Vastaamme sinulle sähköpostilla mahdollisimman pian.</p>\n          </div>\n        ) : (\n          <>\n            {text && !text.includes('Kiitos') && (\n              <div className=\"registration-problem-text\">\n                <p className=\"registration-success-text\">{text}</p>\n                <hr className=\"registration-problem-divider\" />\n              </div>\n            )}\n            <div className=\"registration-problem-text\">\n              <p>Kerro mitä apua tarvitset.</p>\n              <p>Vastaamme sinulle sähköpostilla mahdollisimman pian.</p>\n              <hr className=\"registration-problem-divider\" />\n            </div>\n            <div className=\"registration-problem-input-fields-container\">\n              <form\n                className=\"registration-problem-form\"\n                onSubmit={handleSubmit(onSubmit)}\n              >\n                <div className=\"formfield-container\">\n                  <ValidatedInputField\n                    label=\"Oma nimi\"\n                    name=\"name\"\n                    onChange={() => clearError('name')}\n                    ref={register({\n                      required: true,\n                      minLength: 2,\n                      maxLength: 50,\n                      pattern: /^[a-z A-ZäöüßÄÖÜ'-]+$/i,\n                    })}\n                    ariaInvalid={!!errors.name}\n                    inputClassName=\"registration-problem-input-text\"\n                    labelClassName={\n                      errors.name\n                        ? 'registration-problem-errors-field'\n                        : 'registration-problem-input-field'\n                    }\n                  />\n                  <div className=\"error-text\">\n                    {errors.name &&\n                      errors.name.type === 'required' &&\n                      'Kirjoita nimi.'}\n                    {errors.name &&\n                      (errors.name.type === 'minLength' ||\n                        errors.name.type === 'maxLength' ||\n                        errors.name.type === 'pattern') &&\n                      'Tarkista, että kirjoitit nimen oikein.'}\n                  </div>\n                </div>\n                {!handleClick && (\n                  <div className=\"formfield-container\">\n                    <ValidatedInputField\n                      label=\"Oma sähköposti\"\n                      name=\"email\"\n                      onChange={() => clearError('email')}\n                      ref={register({\n                        required: true,\n                        pattern: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                      })}\n                      ariaInvalid={!!errors.email}\n                      inputClassName=\"registration-problem-input-text\"\n                      labelClassName={\n                        errors.email\n                          ? 'registration-problem-errors-field'\n                          : 'registration-problem-input-field'\n                      }\n                    />\n                    <div className=\"error-text\">\n                      {errors.email &&\n                        errors.email.type === 'required' &&\n                        'Kirjoita sähköposti.'}\n                      {errors.email &&\n                        errors.email.type === 'pattern' &&\n                        'Tarkista, että kirjoitit sähköpostin oikein.'}\n                    </div>\n                  </div>\n                )}\n                <div className=\"formfield-container\">\n                  <ValidatedTextArea\n                    label=\"Viesti\"\n                    name=\"message\"\n                    onChange={() => clearError('messsage')}\n                    ref={register({\n                      required: true,\n                    })}\n                    ariaInvalid={!!errors.message}\n                    inputClassName=\"registration-problem-input-text\"\n                    labelClassName={\n                      errors.message\n                        ? 'registration-problem-errors-field'\n                        : 'registration-problem-input-field'\n                    }\n                    rows={3}\n                  />\n                  <div className=\"error-text\">\n                    {errors.message &&\n                      errors.message.type === 'required' &&\n                      'Kirjoita viesti.'}\n                  </div>\n                </div>\n                <button\n                  type=\"submit\"\n                  className=\"button registration-problem-button\"\n                  onKeyPress={handleSubmit(onSubmit)}\n                  tabIndex=\"0\"\n                >\n                  lähetä viesti\n                </button>\n              </form>\n            </div>\n          </>\n        )}\n      </div>\n      {handleClick && (\n        <ButtonContainer\n          className=\"registration-problem-button\"\n          onClick={handleClick}\n          tabIndex=\"0\"\n        >\n          Sulje\n        </ButtonContainer>\n      )}\n      {!handleClick && (\n        <div className=\"registration-problem-links-container\">\n          <Link className=\"registration-problem-link\" to=\"/login\">\n            Olen vanha käyttäjä ja haluan kirjautua sisään.\n          </Link>\n          <Link className=\"registration-problem-link\" to=\"/createaccount\">\n            Olen uusi käyttäjä ja haluan rekisteröityä.\n          </Link>\n          <Link className=\"registration-problem-link\" to=\"/reset-password\">\n            Olen unohtanut salasanani.\n          </Link>\n          <Link className=\"registration-problem-link\" to=\"/email-verification\">\n            En ole saanut vahvistuslinkkiä.\n          </Link>\n        </div>\n      )}\n    </main>\n  )\n}\n\nRegistrationProblem.propTypes = {\n  handleEmailSending: PropTypes.func.isRequired,\n  handleClick: PropTypes.func,\n  text: PropTypes.string,\n  user: PropTypes.instanceOf(Object),\n}\n\nRegistrationProblem.defaultProps = {\n  handleClick: null,\n  text: '',\n  user: null,\n}\n\nexport default memo(RegistrationProblem)\n","const handleFetchErrors = resp => {\n  if (!resp.ok) {\n    throw Error(resp.statusText)\n  }\n  return resp.json()\n}\n\nexport default handleFetchErrors\n","import handleFetchErrors from '../errors'\n\nconst userLogin = async data => {\n  const uri = process.env.REACT_APP_NODE_BACKEND_URL\n  try {\n    const resp = await fetch(`${uri}/auth/login`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n    return await resp.json()\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n\nconst userLogout = async token => {\n  const uri = process.env.REACT_APP_NODE_BACKEND_URL\n  try {\n    const resp = await fetch(`${uri}/auth/logout`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n    })\n    return handleFetchErrors(resp)\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n\nconst userSignUp = async data => {\n  const uri = process.env.REACT_APP_NODE_BACKEND_URL\n  try {\n    const resp = await fetch(`${uri}/user`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n    // return handleFetchErrors(resp)\n    return await resp.json()\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n\nconst resetPassword = async data => {\n  const uri = process.env.REACT_APP_NODE_BACKEND_URL\n  try {\n    const resp = await fetch(`${uri}/auth/forgot`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n    const respJSON = await resp.json()\n    return respJSON\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n\nconst setNewPassword = async data => {\n  const uri = process.env.REACT_APP_NODE_BACKEND_URL\n  try {\n    const resp = await fetch(`${uri}/auth/reset`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n    const respJSON = await resp.json()\n    return respJSON\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n\nconst checkIfResetLinkHasBeenUsed = async data => {\n  const uri = process.env.REACT_APP_NODE_BACKEND_URL\n  try {\n    const resp = await fetch(`${uri}/auth/check-resetlink`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n    const respJSON = await resp.json()\n    return respJSON\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n\nconst updatePassword = async data => {\n  const uri = process.env.REACT_APP_NODE_BACKEND_URL\n  try {\n    const resp = await fetch(`${uri}/auth/update-password`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n    const respJSON = await resp.json()\n    return respJSON\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n\nconst getUser = async (id, token) => {\n  const uri = process.env.REACT_APP_NODE_BACKEND_URL\n  try {\n    const resp = await fetch(`${uri}/user/${id}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n    })\n    return handleFetchErrors(resp)\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n\nconst getUserByUsername = async (username, token) => {\n  // TODO\n  const uri = process.env.REACT_APP_NODE_BACKEND_URL\n  try {\n    const resp = await fetch(`${uri}/user/username/${username}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n    })\n    return handleFetchErrors(resp)\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n\nconst updateUser = async (data, id, token) => {\n  const uri = process.env.REACT_APP_NODE_BACKEND_URL\n  try {\n    const resp = await fetch(`${uri}/user/${id}`, {\n      method: 'PATCH',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n    })\n    return handleFetchErrors(resp)\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n\nconst addUserInterests = async (data, token) => {\n  const uri = process.env.REACT_APP_NODE_BACKEND_URL\n  if (data.userInterests.length >= 3) {\n    try {\n      const resp = await fetch(`${uri}/userInterest`, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      return handleFetchErrors(resp)\n    } catch (e) {\n      throw new Error(e)\n    }\n  }\n  return null\n}\n\nconst getUserInterest = async token => {\n  const uri = process.env.REACT_APP_NODE_BACKEND_URL\n  try {\n    const resp = await fetch(`${uri}/userInterest`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n    })\n    return handleFetchErrors(resp)\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n\nconst getInterestsByUsername = async (token, username) => {\n  const uri = process.env.REACT_APP_NODE_BACKEND_URL\n  try {\n    const resp = await fetch(`${uri}/userInterest/${username}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n    })\n    return handleFetchErrors(resp)\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n\nconst sendEmail = async data => {\n  const uri = process.env.REACT_APP_NODE_BACKEND_URL\n  try {\n    const resp = await fetch(`${uri}/sendMail/problem`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n    return await resp.json()\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n\nconst deleteUser = async (data, id, token) => {\n  const uri = process.env.REACT_APP_NODE_BACKEND_URL\n  try {\n    const resp = await fetch(`${uri}/user/${id}`, {\n      method: 'DELETE',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n    })\n    return await resp.json()\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n\nconst deleteUserNow = async (data, id, token) => {\n  const uri = process.env.REACT_APP_NODE_BACKEND_URL\n  try {\n    const resp = await fetch(`${uri}/user/deletenow/${id}`, {\n      method: 'DELETE',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n    })\n    return await resp.json()\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n\nconst restoreUser = async (data, id, token) => {\n  const uri = process.env.REACT_APP_NODE_BACKEND_URL\n  try {\n    const resp = await fetch(`${uri}/user/restore/${id}`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n    })\n    return await resp.json()\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n\nconst sendVerifyEmailLink = async data => {\n  const uri = process.env.REACT_APP_NODE_BACKEND_URL\n  try {\n    const resp = await fetch(`${uri}/emailverification/req`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n    return await resp.json()\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n\nconst verifyEmail = async data => {\n  const uri = process.env.REACT_APP_NODE_BACKEND_URL\n  try {\n    const resp = await fetch(`${uri}/emailverification/ver`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n    return await resp.json()\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n\nexport {\n  userLogin,\n  userLogout,\n  userSignUp,\n  resetPassword,\n  checkIfResetLinkHasBeenUsed,\n  setNewPassword,\n  getUser,\n  getUserByUsername,\n  updateUser,\n  getUserInterest,\n  addUserInterests,\n  getInterestsByUsername,\n  sendEmail,\n  updatePassword,\n  deleteUser,\n  restoreUser,\n  deleteUserNow,\n  sendVerifyEmailLink,\n  verifyEmail,\n}\n","import React, { memo, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport RegistrationProblem from '../components/RegistrationProblem'\nimport * as API from '../api/user/user'\n\nconst RegistrationProblemContainer = props => {\n  const { handleClick, history, user } = props\n  const [text, setText] = useState('')\n  const handleEmailSending = async (name, email, message, type) => {\n    const msg = {\n      name,\n      email,\n      message,\n      type,\n    }\n    const resp = await API.sendEmail(msg)\n    if (resp && resp.success && !handleClick) {\n      history.push('/messagesent')\n    } else if (handleClick) {\n      setText('Kiitos viestistä.')\n    } else {\n      setText('Viestin lähetys ei onnistunut')\n    }\n  }\n  return (\n    <RegistrationProblem\n      handleEmailSending={handleEmailSending}\n      handleClick={handleClick}\n      text={text}\n      user={user}\n    />\n  )\n}\n\n// TODO: refactor\nconst shouldComponentUpdate = (props, prevProps) => {\n  const { match: pMatch, ...prest } = prevProps\n  const { match, ...rest } = props\n  return JSON.stringify(rest) === JSON.stringify(prest)\n}\nRegistrationProblemContainer.propTypes = {\n  history: PropTypes.instanceOf(Object),\n  handleClick: PropTypes.func,\n  user: PropTypes.instanceOf(Object),\n}\n\nRegistrationProblemContainer.defaultProps = {\n  history: null,\n  handleClick: null,\n  user: null,\n}\n\nexport default memo(RegistrationProblemContainer, shouldComponentUpdate)\n","import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport './styles.scss'\nimport ButtonContainer from '../../ButtonContainer'\n\nconst PageInformation = props => {\n  const { handleClick, path, direct, inChat } = props\n  let text = ''\n  let page\n  const regexForProfileLink = /\\/profile\\/[a-z0-9.-]+/i\n  if (regexForProfileLink.test(path)) {\n    page = '/member-profile'\n  } else if (inChat && direct) {\n    page = '/private-chat'\n  } else if (inChat && !direct) {\n    page = '/group-chat'\n  } else {\n    page = path\n  }\n  switch (page) {\n    case '/me':\n      text = `Tämä on oma profiilisi. \n        \\nTäällä näet omat profiilitietosi. Nämä tiedot näkyvät myös muille käyttäjille.\n        \\nTäältä pääset muokkaamaan tietojasi ja kiinnostuksen kohteitasi. \n        \\nJos haluat muokata tietojasi tai kiinnostuksen kohteitasi, valitse \"Muokkaa\".`\n      break\n    case '/edit-me':\n      text = `Täällä voit muokata profiiliasi. \n        \\nVoit vaihtaa oman kuvan. Kuva voi olla BMP-, JPG- tai PNG-tiedosto. Tiedoston koko voi olla enintään 50 MB. \n        \\nVoit muuttaa nimesi ja asuinpaikkasi. Voit valita näkyykö ikäsi ja asuinpaikkasi muille käyttäjille. Voit myös muokata kuvausta, jossa kerrot itsestäsi.\n        \\nMuista tallentaa muutokset!`\n      break\n    case '/friends':\n      text = `Täällä näet kaikki kaverisi. \n      \\nTäällä näet, ovatko kaverisi lähettäneet sinulle uusia viestejä.\n        \\nKaikki käyttäjät, joiden kanssa olet viestitellyt kahdestaan, ovat kavereitasi.\n        \\nVoit lähettää toiselle käyttäjälle yksityisviestin hänen profiilistaan. Pääset toisen käyttäjän profiiliin ryhmän kautta, kun klikkaat ryhmässä hänen kuvakettaan.\n        \\nJos et halua enää viestitellä kaverin kanssa, voit estää hänet. Voit laittaa eston päälle ja myöhemmin poistaa sen, kun klikkaat kaverin nimen perässä olevia pisteitä.`\n      break\n    case '/edit-interests':\n      text = `Täällä voit muokata kiinnostuksen kohteitasi.\n        \\nVoit lisätä uusia tai poistaa vanhoja kiinnostuksen kohteita klikkaamalla niitä. \n        \\nVoit valita 3-5 kohdetta.\n        \\nMuista tallentaa muutokset!`\n      break\n    case '/':\n      text = `Täällä näet kaikki ryhmäsi.\n        \\nTäällä näet uudet ryhmät, joita ehdotamme sinulle. Ehdotamme sinulle joka päivä uusia ryhmiä. Voit itse valita mihin ryhmiin liityt.\n        \\nTäällä näet myös kaikki omat ryhmät, joihin olet jo liittynyt. Näet, onko ryhmiin tullut uusia viestejä. Pääset keskustelemaan muiden ryhmäläisten kanssa, kun klikkaat ryhmän kuvaketta.\n        \\nVoit kuulua korkeintaan viiteen ryhmään. Jos kuulut jo viiteen ryhmään, ja haluat liittyä uuteen ryhmään, sinun täytyy ensin poistua jostain vanhasta ryhmästä.`\n      break\n    case '/group-chat':\n      text = `Täällä voit keskustella muiden ryhmäläisten kanssa. \n        \\nVoit kirjoittaa ja lähettää kuvia, videoita ja ääniviestejä.       \n        \\nKun klikkaat ryhmän nimeä, näet ryhmän tiedot. Näet ryhmän jäsenet, ja milloin he ovat olleet paikalla. Näet myös, mitkä asiat ryhmän jäseniä kiinnostaa.       \n        \\nKun klikkaat ryhmän jäsenen nimeä, näet hänen profiilinsa. Profiilissa voit lähettää hänelle yksityisen viestin.         \n        \\nTäällä voit myös poistua ryhmästä. Muista, että jos poistut ryhmästä, et voi palata siihen takaisin.\n        \\nJos huomaat keskustelussa asiattoman viestin tai viestejä, voit ilmoittaa siitä valvojalle. Valvoja voi poistaa viestin. Valvoja voi tarvittaessa myös liittyä keskusteluun. Valvojalla on pääsy kaikkiin ryhmäkeskusteluihin.`\n      break\n    case '/member-profile':\n      text = `Tämä on toisen käyttäjän profiili.\n        \\nTäällä näet tiedot, jotka hän haluaa kertoa itsestään muille käyttäjille.\n        \\nJos haluat jutella käyttäjän kanssa kahdestaan, voit lähettää hänelle yksityisen viestin.\n        \\nKäyttäjät, joiden kanssa viestittelet kahdestaan, näkyvät Kavereissasi.`\n      break\n    case '/private-chat':\n      text = `Täällä voit keskustella kaverisi kanssa kahdestaan.\n        \\nVoit kirjoittaa ja lähettää kuvia, videoita ja ääniviestejä.\n        \\nNäitä yksityisiä viestejä ei näe kukaan muu.`\n      break\n    case '/account':\n      text = `Täällä näet omat rekisteröitymistietosi. Nämä tiedot eivät näy muille käyttäjille. \n        \\nTäällä voit muokata tietojasi, jos esimerkiksi sukunimesi, sähköpostisi tai puhelinnumerosi vaihtuu.\n        \\nTäällä voit myös poistaa käyttäjätilisi kokonaan. Kun poistat käyttäjätilisi, poistamme sen palvelusta viikon päästä. Jos haluat jatkaa palvelun käyttöä, kirjaudu palveluun ennen kuin viikko on kulunut. Kun poistat käyttäjätilisi, viestisi jäävät palveluun nimettömänä.`\n      break\n    default:\n  }\n\n  return (\n    <div className=\"page-information-container\">\n      <div className=\"page-info-text-content\">{text}</div>\n      <ButtonContainer className=\"button button-close\" onClick={handleClick}>\n        Sulje\n      </ButtonContainer>\n    </div>\n  )\n}\n\nPageInformation.propTypes = {\n  handleClick: PropTypes.func.isRequired,\n  path: PropTypes.string,\n  direct: PropTypes.bool,\n  inChat: PropTypes.bool,\n}\n\nPageInformation.defaultProps = {\n  direct: false,\n  inChat: false,\n  path: null,\n}\n\nexport default memo(PageInformation)\n","import React, { useState, memo, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\nimport ModalContainer from '../ModalContainer'\nimport './styles.scss'\nimport botIcon from '../../assets/bot.svg'\nimport ButtonContainer from '../ButtonContainer'\nimport RegistrationProblemContainer from '../../containers/RegistrationProblemContainer'\nimport PageInformation from './PageInformation'\n\nconst BottomNavigationBot = forwardRef((props, ref) => {\n  const { handleLogout, path, inChat, direct, user } = props\n\n  const [showBot, setShowBot] = useState(false)\n  const [showPageInformation, setShowPageInformation] = useState(false)\n  const [showSendMessage, setShowSendMessage] = useState(false)\n  const [showInfoModal, setShowInfoModal] = useState(false)\n  const [logOutConfirmation, setLogOutConfirmation] = useState(false)\n  const openModal = setter => setter(true)\n  const closeModal = setter => setter(false)\n\n  const openPageInformationModal = () => {\n    setShowPageInformation(true)\n    openModal(setShowPageInformation)\n  }\n\n  const closePageInformationModal = () => {\n    setShowPageInformation(false)\n    closeModal(setShowPageInformation)\n  }\n\n  const openSendMessageModal = () => {\n    setShowSendMessage(true)\n    openModal(setShowSendMessage)\n  }\n\n  const openInfoModal = () => {\n    setShowInfoModal(true)\n    openModal(setShowInfoModal)\n  }\n\n  const closeSendMessageModal = () => {\n    setShowSendMessage(false)\n    closeModal(setShowSendMessage)\n  }\n\n  const openLogOutModal = () => {\n    setLogOutConfirmation(true)\n    openModal(setLogOutConfirmation)\n  }\n\n  return (\n    <div className={inChat ? 'nav-bot-chat' : 'nav-bot'} ref={ref}>\n      <ButtonContainer\n        className=\"button-image\"\n        onClick={() => openModal(setShowBot)}\n        label=\"Avaa botti\"\n      >\n        <img src={botIcon} alt=\"Botti\" />\n      </ButtonContainer>\n      <ModalContainer\n        modalIsOpen={showBot}\n        closeModal={() => closeModal(setShowBot)}\n        label=\"Botti\"\n      >\n        <div className=\"modal-content\">\n          <div className=\"modal-item\">\n            <i\n              className=\"fas fa-question-circle modal-icon\"\n              aria-hidden=\"true\"\n            />\n            <ButtonContainer\n              className=\"bot-link\"\n              role=\"link\"\n              tabIndex={0}\n              onClick={openPageInformationModal}\n            >\n              Mitä tällä sivulla tehdään\n            </ButtonContainer>\n            <ModalContainer\n              modalIsOpen={showPageInformation}\n              closeModal={() => closeModal(setShowPageInformation)}\n              label=\"Tietoa tästä sivusta\"\n            >\n              <PageInformation\n                path={path}\n                handleClick={closePageInformationModal}\n                direct={direct}\n                inChat={inChat}\n              />\n            </ModalContainer>\n          </div>\n          <hr aria-hidden=\"true\" />\n          <div className=\"modal-content\">\n            <div className=\"modal-item\">\n              <i className=\"fas fa-life-ring modal-icon\" aria-hidden=\"true\" />\n              <ButtonContainer\n                className=\"bot-link\"\n                onClick={openSendMessageModal}\n              >\n                Lähetä valvojalle viesti\n              </ButtonContainer>\n              <ModalContainer\n                modalIsOpen={showSendMessage}\n                isSendMessage\n                closeModal={() => closeModal(setShowSendMessage)}\n                label=\"Viestin lähetys\"\n              >\n                <RegistrationProblemContainer\n                  handleClick={closeSendMessageModal}\n                  user={user}\n                />\n              </ModalContainer>\n            </div>\n          </div>\n          <hr aria-hidden=\"true\" />\n          <div className=\"modal-item\">\n            <i className=\"fas fa-info-circle modal-icon\" aria-hidden=\"true\" />\n            <ButtonContainer className=\"bot-link\" onClick={openInfoModal}>\n              Lisätietoa palvelusta\n            </ButtonContainer>\n            <ModalContainer\n              modalIsOpen={showInfoModal}\n              closeModal={() => closeModal(setShowInfoModal)}\n              label=\"Lisätietoja palvelusta\"\n            >\n              <div>\n                <ButtonContainer\n                  className=\"icon-btn go-back-button image-max-size-exceeded\"\n                  onClick={() => closeModal(setShowInfoModal)}\n                  label=\"Sulje\"\n                >\n                  {' '}\n                </ButtonContainer>\n                <div className=\"link-to-main-page-content\">\n                  <p className=\"link-info-text\">\n                    Kohdataan-sivuilta saat lisää tietoa ja ohjeita palvelun\n                    käyttöön.\n                  </p>\n                  <p>\n                    <a\n                      className=\"link-to-main-page\"\n                      href=\"https://kohdataan.fi\"\n                      tabIndex={0}\n                    >\n                      Siirry Kohdataan-sivuille.\n                    </a>\n                  </p>\n                </div>\n              </div>\n            </ModalContainer>\n          </div>\n          <hr aria-hidden=\"true\" />\n          <div className=\"modal-item\">\n            <div>\n              <i className=\"fas fa-cog modal-icon\" aria-hidden=\"true\" />\n            </div>\n            <Link to=\"/account\" onClick={() => closeModal(setShowBot)}>\n              Rekisteröitymis&shy;tiedot\n            </Link>\n          </div>\n          <hr />\n          <div>\n            <i className=\"fas fa-sign-out-alt modal-icon\" aria-hidden=\"true\" />\n          </div>\n          <ButtonContainer\n            className=\"bot-link\"\n            role=\"link\"\n            tabIndex={0}\n            onClick={openLogOutModal}\n          >\n            Kirjaudu ulos\n          </ButtonContainer>\n          <ModalContainer\n            modalIsOpen={logOutConfirmation}\n            closeModal={() => closeModal(setLogOutConfirmation)}\n            label=\"Vahvista uloskirjautuminen\"\n          >\n            <div>\n              <h3 className=\"interests-modal-text\">\n                Haluatko varmasti kirjautua ulos?\n              </h3>\n              <ButtonContainer\n                className=\"button button-secondary log-out-btn\"\n                onClick={() => closeModal(setLogOutConfirmation)}\n              >\n                En\n              </ButtonContainer>\n              <ButtonContainer\n                className=\"button log-out-btn\"\n                onClick={() => {\n                  handleLogout()\n                  closeModal(setShowBot)\n                }}\n              >\n                Kyllä\n              </ButtonContainer>\n            </div>\n          </ModalContainer>\n        </div>\n        <ButtonContainer\n          className=\"button button-close\"\n          onClick={() => closeModal(setShowBot)}\n          label=\"Sulje\"\n        >\n          Sulje\n        </ButtonContainer>\n      </ModalContainer>\n    </div>\n  )\n})\n\nBottomNavigationBot.propTypes = {\n  handleLogout: PropTypes.func.isRequired,\n  path: PropTypes.string.isRequired,\n  inChat: PropTypes.bool,\n  direct: PropTypes.bool,\n  user: PropTypes.instanceOf(Object).isRequired,\n}\n\nBottomNavigationBot.defaultProps = {\n  inChat: false,\n  direct: false,\n}\n\nexport default memo(BottomNavigationBot)\n","export default async (logoutAction, matterMostLogoutAction) => {\n  try {\n    localStorage.removeItem('userId')\n    localStorage.removeItem('authToken')\n    await logoutAction(localStorage.getItem('authToken'))\n    await matterMostLogoutAction()\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error(e)\n  }\n}\n","import React, { memo } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { logout } from 'mattermost-redux/actions/users'\nimport BottomNavigation from '../components/BottomNavigation'\nimport BottomNavigationLink from '../components/BottomNavigationLink'\nimport BottomNavigationBot from '../components/BottomNavigationBot'\nimport * as API from '../api/user/user'\nimport logoutHandler from '../utils/userLogout'\n\nconst BottomNavigationContainer = props => {\n  const {\n    location: { pathname },\n    logout: matterMostLogout,\n    user,\n  } = props\n\n  if (pathname.split('/')[1] === 'chat') {\n    return <div />\n  }\n\n  if (pathname.split('/')[1] === 'registration') {\n    return <div />\n  }\n\n  const handleLogout = () => logoutHandler(API.userLogout, matterMostLogout)\n\n  return (\n    <BottomNavigation>\n      <BottomNavigationLink\n        title=\"Profiili\"\n        route=\"/me\"\n        icon=\"fas fa-user-circle\"\n      />\n      <BottomNavigationLink\n        title=\"Kaverit\"\n        route=\"/friends\"\n        icon=\"fas fa-comment-dots\"\n      />\n      <BottomNavigationLink\n        title=\"Ryhmät\"\n        route=\"/\"\n        icon=\"fas fa-user-friends\"\n      />\n\n      <BottomNavigationBot\n        handleLogout={handleLogout}\n        path={pathname}\n        user={user}\n      />\n    </BottomNavigation>\n  )\n}\n\nBottomNavigationContainer.propTypes = {\n  location: PropTypes.instanceOf(Object).isRequired,\n  logout: PropTypes.func.isRequired,\n  user: PropTypes.instanceOf(Object).isRequired,\n}\n\nconst mapStateToProps = state => {\n  const { currentUserId } = state.entities.users\n  const user = state.entities.users.profiles[currentUserId]\n  return {\n    currentUserId,\n    user,\n  }\n}\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n      logout,\n    },\n    dispatch\n  )\n\nconst shouldComponentUpdate = (props, prevProps) => {\n  const { match: pMatch, ...prest } = prevProps\n  const { match, ...rest } = props\n  return JSON.stringify(rest) === JSON.stringify(prest)\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withRouter(memo(BottomNavigationContainer, shouldComponentUpdate)))\n","import handleFetchErrors from '../errors'\n\nconst getChannelInvitations = async token => {\n  const uri = process.env.REACT_APP_NODE_BACKEND_URL\n  try {\n    const resp = await fetch(`${uri}/channelInvitation`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n    })\n    return handleFetchErrors(resp)\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n\nconst getChannelInvitationMembers = async (token, id) => {\n  const uri = process.env.REACT_APP_NODE_BACKEND_URL\n  try {\n    const resp = await fetch(`${uri}/channel/members/${id}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n    })\n    return handleFetchErrors(resp)\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n\n// Channel purpose is used for suggesting which channel fits what user\nconst addUserInterestsToChannelPurpose = async (token, channelId) => {\n  const uri = process.env.REACT_APP_NODE_BACKEND_URL\n  try {\n    const resp = await fetch(`${uri}/channelPurpose/addUser/${channelId}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n    })\n    return handleFetchErrors(resp)\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n\nconst removeUserInterestsFromChannelPurpose = async (token, channelId) => {\n  const uri = process.env.REACT_APP_NODE_BACKEND_URL\n  try {\n    const resp = await fetch(`${uri}/channelPurpose/removeUser/${channelId}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n    })\n    return handleFetchErrors(resp)\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n\nconst handleUserChangingInterestToChannelsPurposes = async token => {\n  const uri = process.env.REACT_APP_NODE_BACKEND_URL\n  try {\n    const resp = await fetch(`${uri}/channelPurpose/resetUserChannels`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n    })\n    return handleFetchErrors(resp)\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n\nexport {\n  getChannelInvitations,\n  getChannelInvitationMembers,\n  addUserInterestsToChannelPurpose,\n  removeUserInterestsFromChannelPurpose,\n  handleUserChangingInterestToChannelsPurposes,\n}\n","export default {\n  Siniset: '#0000FF',\n  Vaaleansiniset: '#ADD8E6',\n  Tummansiniset: '#00008B',\n  Haaleansiniset: '#A9D5E8',\n  Kirkkaansiniset: '#0505FF',\n  Merensiniset: '#15BEF0',\n  Sähkönsiniset: '#0000CD',\n  Taivaansiniset: '#87CEED',\n  Laivastonsiniset: '#000080',\n  Syvänsiniset: '#0E0A70',\n  Yönsiniset: '#00009C',\n  Teräksensiniset: '#4682B4',\n  Lemmikinsiniset: '#7997B3',\n  Indigonsiniset: '#4B0082',\n  Jäänsiniset: '#E0FFFF',\n  Punaiset: '#FF0000',\n  Vaaleanpunaiset: '#FFC0CB',\n  Tummanpunaiset: '#8B0000',\n  Haaleanpunaiset: '#ED5353',\n  Kirkkaanpunaiset: '#FF1414',\n  Viininpunaiset: '#A31C1C',\n  Ruosteenpunaiset: '#B7410E',\n  Syvänpunaiset: '#8F0303',\n  Joulunpunaiset: '#FC0303',\n  Tulenpunaiset: '#FF2400',\n  Kirsikanpunaiset: '#DE3163',\n  Unikonpunaiset: '#EB0707',\n  Tiilenpunaiset: '#B22222',\n  Omenanpunaiset: '#A80A0A',\n  Keltaiset: '#FFFF00',\n  Vaaleankeltaiset: '#F7F74F',\n  Tummankeltaiset: '#FFE100',\n  Haaleankeltaiset: '#F5F578',\n  Kirkkaankeltaiset: '#FFF700',\n  Kullankeltaiset: '#FFD700',\n  Auringonkeltaiset: '#FFE600',\n  Sinapinkeltaiset: '#f5D11D',\n  Syvänkeltaiset: '#FFEA00',\n  Oljenkeltaiset: '#F5E56E',\n  Okrankeltaiset: '#D18B00',\n  Leinikinkeltaiset: '#FCF10F',\n  Vihreät: '#008000',\n  Vaaleanvihreät: '#90EE90',\n  Tummanvihreät: '#006400',\n  Haaleanvihreät: '#98FB98',\n  Kirkkaanvihreät: '#05FF05',\n  Metsänvihreät: '#228B22',\n  Ruohonvihreät: '#7CFC00',\n  Mintunvihreät: '#CFFFE5',\n  Limenvihreät: '#32CD32',\n  Syvänvihreät: '#053614',\n  Merenvihreät: '#2E8B57',\n  Oliivinvihreät: '#6B8E23',\n  Sinivihreät: '#008080',\n  Ruskeat: '#804201',\n  Vaaleanruskeat: '#C49058',\n  Tummanruskeat: '#4A2804',\n  Haaleanruskeat: '#BA9670',\n  Kullanruskeat: '#A65805',\n  Suklaanruskeat: '#4F291E',\n  Kuparinruskeat: '#B87333',\n  Kastanjanruskeat: '#800000',\n  Pronssinruskeat: '#8C7853',\n  Pähkinänruskeat: '#82270C',\n  Punaruskeat: '#702A16',\n  Toffeenruskeat: '#F2CB55',\n  Hiekanruskeat: '#524729',\n  Siirapinruskeat: '#472001',\n  Oranssit: '#FFA500',\n  Vaaleanoranssit: '#FFBF00',\n  Tummanoranssit: '#FF7700',\n  Haaleanoranssit: '#FADD73',\n  Kirkkaanoranssit: '#FFC803',\n  Violetit: '#C8A2C8',\n  Vaaleanvioletit: '#FAD9FA',\n  Tummanvioletit: '#AD07AD',\n  Haaleanvioletit: '#F5E9F5',\n  Kirkkaanvioletit: '#FF00FF',\n  Harmaat: '#808080',\n  Vaaleanharmaat: '#D3D3D3',\n  Tummanharmaat: '#6E6D6D',\n  Haaleanharmaat: '#F0F0F0',\n  Kirkkaanharmaat: '#D9D7D7',\n  Hopeanharmaat: '#C0C0C0',\n  Syvänharmaat: '#363535',\n  Mustat: '#000000',\n  Sysimustat: '#0D0D0D',\n  Yönmustat: '#1F1D1D',\n  Lakritsinmustat: '#2E2222',\n  Valkoiset: '#FFFFFF',\n  Luonnonvalkoiset: '#F2F2E9',\n  Lumenvalkoiset: '#FFFAFA',\n  Liidunvalkoiset: '#FFFEF9',\n  Kermanvalkoiset: '#FFFFED',\n  Turkoosit: '#40E0D0',\n  Vaaleanturkoosit: '#7FFFD4',\n  Tummanturkoosit: '#00B2B5',\n  Haaleanturkoosit: '#AFEEEE',\n  Kirkkaanturkoosit: '#05F1F5',\n  Syvänturkoosit: '#00A7D1',\n  Keskiyönsiniset: '#000D61',\n  Mustikansiniset: '#4B6E9C',\n  Farkunsiniset: '#2A469C',\n  Musteensiniset: '#000F2E',\n  Safiirinsiniset: '#0F52BA',\n  Harmaansiniset: '#465F75',\n  Kissankellonsiniset: '#7767C2',\n  Ruiskukansiniset: '#6495ED',\n  Sinivioletit: '#8A2BE2',\n  Terrakotanpunaiset: '#BA4D36',\n  Punamullanpunaiset: '#801818',\n  Rubiininpunaiset: '#910101',\n  Ruusunpunaiset: '#E04F82',\n  Ketsupinpunaiset: '#D10606',\n  Paloautonpunaiset: '#C91602',\n  Vadelmanpunaiset: '#C40441',\n  Mansikanpunaiset: '#DE0404',\n  Puolukanpunaiset: '#C90028',\n  Verenpunaiset: '#960202',\n  Ferrarinpunaiset: '#F50C0C',\n  Aniliininpunaiset: '#BD0488',\n  Marjapuuronpunaiset: '#E36291',\n  Mesimarjanpunaiset: '#94032E',\n  Chilinpunaiset: '#C20C0C',\n  Laventelinpunaiset: '#FFF0F5',\n  Luumunpunaiset: '#DDA0DD',\n  Karmiininpunaiset: '#DC143C',\n  Korallinpunaiset: '#FF7F50',\n  Tomaatinpunaiset: '#FF6347',\n  Herukanpunaiset: '#D40000',\n  Persikanpunaiset: '#FFDAB9',\n  Oranssinpunaiset: '#FF4500',\n  Greipinoranssit: '#EBD621',\n  Appelsiininoranssit: '#FF6C03',\n  Mandariininoranssit: '#FF5303',\n  Voikukankeltaiset: '#F0E130',\n  Rikinkeltaiset: '#F1DD38',\n  Currynkeltaiset: '#CCA01D',\n  Banaaninkeltaiset: '#FFE135',\n  Rentukankeltaiset: '#FFF200',\n  Sitruunankeltaiset: '#FFF44F',\n  Voinkeltaiset: '#FBFF80',\n  Vehnänkeltaiset: '#F5DEB3',\n  Ruskeankeltaiset: '#875F00',\n  Vihreänkeltaiset: '#ADFF2F',\n  Keväänvihreät: '#00FF44',\n  Keltaisenvihreät: '#9ACD32',\n  Smaragdinvihreät: '#064F40',\n  Myrkynvihreät: '#A3B81C',\n  Havunvihreät: '#1F3D0C',\n  Sammaleenvihreät: '#474F0D',\n  Armeijanvihreät: '#2F3616',\n  Harmaanvihreät: '#575E3A',\n  Omenanvihreät: '#69CB15',\n  Päärynänvihreät: '#A0C734',\n  Tillinvihreät: '#61960C',\n  Apilanvihreät: '#288521',\n  Kuusenvihreät: '#325C33',\n  Männynvihreät: '#53782A',\n  Koivunvihreät: '#659C13',\n  Vedenvihreät: '#03BB85',\n  Kaakaonruskeat: '#35281E',\n  Seepianruskeat: '#704214',\n  Maitokahvinruskeat: '#C8AD90',\n  Mahonginruskeat: '#420D09',\n  Pahvinruskeat: '#A18550',\n  Kaarnanruskeat: '#1A0F0B',\n  Kävynruskeat: '#573314',\n  Piparkakunruskeat: '#9F5529',\n  Ruosteenruskeat: '#B7410E',\n  Harmaanruskeat: '#756452',\n  Kanelinruskeat: '#7A5000',\n  Hiilenharmaat: '#393D3C',\n  Hiirenharmaat: '#6E6E6E',\n  Elefantinharmaat: '#786C6C',\n  Grafiitinharmaat: '#A2A5AA',\n  Betoninharmaat: '#D2D1CD',\n  Siniharmaat: '#7693A6',\n  Helmenharmaat: '#E3E3E3',\n  Savunharmaat: '#888C8F',\n  Hylkeenharmaat: '#8D9994',\n  Teräksenharmaat: '#656566',\n  Armeijanharmaat: '#838385',\n  Lyijynharmaat: '#687378',\n  Myrskynharmaat: '#78787F',\n  Loskanharmaat: '#E3DFDA',\n  Jäänharmaat: '#E0E0DE',\n  Punaharmaat: '#856D6D',\n  Tuhkanharmaat: '#BDBAAA',\n  Vihreänharmaat: '#788878',\n  Maantienharmaat: '#A1927A',\n  Tinanharmaat: '#7A7A78',\n  Jäkälänharmaat: '#C4CFC8',\n  Pulunharmaat: '#858585',\n  Pajunkissanharmaat: '#D9D9D9',\n  Ruskeanharmaat: '#554D42',\n  Noenmustat: '#151B21',\n  Korpinmustat: '#141A16',\n  Salmiakinmustat: '#19241D',\n}\n","import React, { memo, useEffect, useState } from 'react'\nimport propTypes from 'prop-types'\nimport './styles.scss'\n\nconst Member = props => {\n  const { nickname, iconColor, userId, currentUserId, key } = props\n  const userFirstLetter = nickname[0]\n  const [image, setImage] = useState(null)\n\n  useEffect(() => {\n    const getMemberImage = () => {\n      const url = `${\n        process.env.REACT_APP_MATTERMOST_URL\n      }/api/v4/users/${userId}/image?${Date.now()}`\n      setImage(url)\n    }\n    getMemberImage()\n  }, [userId])\n\n  return (\n    currentUserId !== userId && (\n      <div className=\"group-boxes-member\" key={key}>\n        <div className=\"group-boxes-member-icon-wrapper\">\n          <i aria-hidden=\"true\" title={userFirstLetter} />\n          <div\n            className=\"label chat-message-sender-icon\"\n            style={{\n              backgroundColor: iconColor,\n              backgroundImage: `url(${image})`,\n            }}\n          >\n            {' '}\n          </div>\n        </div>\n        <p className=\"suggestion-box-nickname\">{nickname}</p>\n      </div>\n    )\n  )\n}\n\nMember.propTypes = {\n  userId: propTypes.string.isRequired,\n  nickname: propTypes.string.isRequired,\n  currentUserId: propTypes.string,\n}\n\nMember.defaultProps = {\n  currentUserId: '',\n}\n\nexport default memo(Member)\n","import React, { useState, useEffect, memo } from 'react'\nimport './styles.scss'\nimport propTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\nimport groupNameColors from '../../../assets/groupColors'\nimport Member from './Member'\n\nconst Group = props => {\n  const {\n    channel,\n    getMembers,\n    unreadCount,\n    profiles,\n    currentUserId,\n    getPosts,\n    showTownSquare,\n  } = props\n\n  const [members, setMembers] = useState([])\n  const [parsedPurpose, setParsedPurpose] = useState([])\n  const [unreadPosts, setUnreadPosts] = useState([])\n  const [posts, setPosts] = useState({})\n  const [membersToShow, setMembersToShow] = useState([])\n  const [currentUser, setCurrentUser] = useState(null)\n\n  useEffect(() => {\n    const getParsedPurpose = () => {\n      if (channel && channel.purpose) {\n        try {\n          const parsed = JSON.parse(channel.purpose)\n          const sorted = Object.keys(parsed).sort(\n            (a, b) => parsed[b] - parsed[a]\n          )\n          setParsedPurpose(sorted)\n        } catch (e) {\n          // eslint-disable-next-line no-console\n          console.log(e)\n        }\n      }\n    }\n    getParsedPurpose()\n  }, [channel, setParsedPurpose])\n\n  useEffect(() => {\n    const getMemberData = async () => {\n      if (channel && channel.id) {\n        const memberData = await getMembers(channel.id)\n        setMembers(memberData.data)\n      }\n    }\n    getMemberData()\n  }, [channel, getMembers])\n\n  // Only show members with existing profiles\n  useEffect(() => {\n    const setMemberProfilesToShow = () => {\n      const memberIds = members.map(member => member.user_id)\n      const channelMembers = profiles.filter(\n        p => memberIds.indexOf(p.id) !== -1\n      )\n      setMembersToShow(channelMembers)\n    }\n    setMemberProfilesToShow()\n  }, [members, profiles])\n\n  useEffect(() => {\n    // Get channel posts\n    const fetchPosts = async () => {\n      if (channel && channel.id) {\n        const channelPosts = await getPosts(channel.id, 0, 100)\n        if (channelPosts.data && channelPosts.data.posts)\n          setPosts(channelPosts.data.posts)\n      }\n    }\n    fetchPosts()\n  }, [channel, getPosts])\n\n  // get unread posts for channel\n  useEffect(() => {\n    const getUnreadPosts = async () => {\n      if (unreadCount && unreadCount > 0 && posts) {\n        const beginIndex = Object.keys(posts).length - unreadCount\n        const getUnreadMessages = Object.values(posts)\n          .sort((p1, p2) => p1.create_at - p2.create_at)\n          .slice(beginIndex)\n        if (getUnreadMessages)\n          setUnreadPosts(getUnreadMessages.filter(p => p.type === '').length)\n      }\n    }\n    getUnreadPosts()\n  }, [unreadCount, posts])\n\n  useEffect(() => {\n    if (members) {\n      setCurrentUser(members.find(member => member.user_id === currentUserId))\n    }\n  }, [currentUser, currentUserId, members])\n\n  return (\n    <>\n      {channel.name === 'town-square' && !showTownSquare ? (\n        <>\n          <div className=\" group-box-content-inactive\">\n            <div className=\"group-header\">\n              <div\n                className=\"group-color-icon\"\n                style={{\n                  backgroundColor: 'grey',\n                }}\n              />\n              <h2>Kohdataan</h2>\n            </div>\n            <div className=\"monitor-group-text\">\n              <p>\n                Tässä ryhmässä voit jutella kaikkien muiden käyttäjien kanssa.\n              </p>\n              <p>Ryhmä on auki arkisin klo 9-21.</p>\n              <p>Valvojat ovat ryhmässä arkisin klo 9-17.</p>\n            </div>\n          </div>\n        </>\n      ) : (\n        <Link\n          className={`${unreadPosts > 0 ? 'group-box-unreads' : ''} group-box`}\n          to={{\n            pathname: `/chat/${channel.id}`,\n            state: {\n              unreadCount,\n              currentUser,\n            },\n          }}\n        >\n          <div className=\"group-box-content\">\n            <div className=\"group-header\">\n              <div\n                className=\"group-color-icon\"\n                style={{\n                  backgroundColor:\n                    channel.name === 'town-square'\n                      ? 'grey'\n                      : groupNameColors[channel.display_name],\n                  border: `${\n                    channel.display_name.toLowerCase().includes('valkoiset')\n                      ? '1px solid grey'\n                      : 'none'\n                  }`,\n                }}\n              />\n              <h2>\n                {channel.name === 'town-square'\n                  ? 'Kohdataan'\n                  : channel.display_name}\n              </h2>\n            </div>\n            {channel.name !== 'town-square' && (\n              <div className=\"group-interests\">\n                <p>\n                  {`Kiinnostukset: ${parsedPurpose.slice(0, 3).join(', ')}`}\n                </p>\n              </div>\n            )}\n            {channel.name !== 'town-square' ? (\n              <div className=\"group-current-members\">\n                <span className=\"sr-only\">Jäsenet</span>\n                {membersToShow &&\n                  membersToShow.map(member => (\n                    <Member\n                      key={`group-${member.id}`}\n                      nickname={member.nickname}\n                      currentUserId={currentUserId}\n                      userId={member.id}\n                    />\n                  ))}\n              </div>\n            ) : (\n              <div className=\"monitor-group-text\">\n                <p>\n                  Tässä ryhmässä voit jutella kaikkien muiden käyttäjien kanssa.\n                </p>\n                <p>Ryhmä on auki arkisin klo 9-21.</p>\n                <p>Valvojat ovat ryhmässä arkisin klo 9-17.</p>\n              </div>\n            )}\n          </div>\n          {unreadPosts === 1 && (\n            <div className=\"group-unreads-text\">\n              <span>{`${unreadPosts} uusi viesti`}</span>\n            </div>\n          )}\n          {unreadPosts > 1 && (\n            <div className=\"group-unreads-text\">\n              <span>{`${unreadPosts} uutta viestiä`}</span>\n            </div>\n          )}\n          {unreadPosts <= 0 && (\n            <div className=\"group-unreads-text no-unreads\">\n              <p>Ei uusia viestejä</p>\n            </div>\n          )}\n        </Link>\n      )}\n    </>\n  )\n}\n\nGroup.propTypes = {\n  channel: propTypes.instanceOf(Object).isRequired,\n  getMembers: propTypes.func.isRequired,\n  unreadCount: propTypes.number.isRequired,\n  profiles: propTypes.instanceOf(Object).isRequired,\n  currentUserId: propTypes.string.isRequired,\n  getPosts: propTypes.instanceOf(Object).isRequired,\n  showTownSquare: propTypes.bool.isRequired,\n}\n\nexport default memo(Group)\n","import React from 'react'\nimport propTypes from 'prop-types'\nimport Joyride from 'react-joyride'\n\nconst Tutorial = props => {\n  const { history, steps, updateTutorialWatched, navigateBack } = props\n\n  const locale = {\n    back: navigateBack ? 'Seuraava' : 'Edellinen',\n    close: 'Sulje',\n    last: history.location.pathname === '/' ? 'Valmis' : 'Seuraava',\n    next: navigateBack ? 'Edellinen' : 'Seuraava',\n    skip: 'Ohita',\n  }\n\n  const customStyles = {\n    buttonNext: {\n      backgroundColor: '#f59023',\n      color: 'black',\n      fontFamily: 'Poppins',\n      fontSize: '16px',\n      borderRadius: '30px',\n      padding: '5px 10px',\n      marginRight: '30px',\n      position: 'absolute',\n      right: 20,\n      bottom: 20,\n    },\n    buttonBack: {\n      marginLeft: 'auto',\n      fontFamily: 'Poppins',\n      fontSize: '16px',\n      borderRadius: '30px',\n      padding: '5px 10px',\n      color: 'black',\n      position: 'absolute',\n      left: 30,\n      bottom: 20,\n    },\n    buttonSkip: {\n      marginLeft: 'auto',\n      fontFamily: 'Poppins',\n      fontSize: '14px',\n      borderRadius: '30px',\n      padding: '5px 10px',\n      color: 'black',\n    },\n    buttonClose: {\n      display: 'none',\n    },\n    spotlight: {\n      backgroundColor: 'transparent',\n    },\n  }\n\n  const customReversedStyles = {\n    buttonNext: {\n      backgroundColor: 'transparent',\n      color: 'black',\n      fontFamily: 'Poppins',\n      fontSize: '16px',\n      borderRadius: '30px',\n      padding: '5px 10px',\n      marginRight: '30px',\n      outline: 'none',\n      position: 'absolute',\n      left: 30,\n      bottom: 20,\n    },\n    buttonBack: {\n      marginLeft: 'auto',\n      fontFamily: 'Poppins',\n      fontSize: '16px',\n      borderRadius: '30px',\n      padding: '5px 10px',\n      color: 'black',\n      backgroundColor: '#f59023',\n      outline: 'none',\n      position: 'absolute',\n      right: 20,\n      bottom: 20,\n    },\n    buttonClose: {\n      display: 'none',\n    },\n    spotlight: {\n      backgroundColor: 'transparent',\n    },\n  }\n\n  const handleJoyrideCallback = data => {\n    const { action, lifecycle, step } = data\n    if (!navigateBack) {\n      if (\n        action === 'next' &&\n        lifecycle === 'complete' &&\n        step.target === '.nav-bot'\n      ) {\n        history.push('/friends')\n      }\n    }\n    if (\n      action === 'next' &&\n      lifecycle === 'complete' &&\n      step.target === '.nav-link-Kaverit'\n    ) {\n      history.push('/')\n    }\n    if (\n      action === 'next' &&\n      lifecycle === 'complete' &&\n      step.target === '.nav-link-Ryhmät'\n    ) {\n      updateTutorialWatched()\n    }\n    if (action === 'skip') {\n      updateTutorialWatched()\n    }\n  }\n\n  return (\n    <Joyride\n      steps={steps}\n      callback={handleJoyrideCallback}\n      locale={locale}\n      continuous\n      disableScrolling\n      styles={navigateBack ? customReversedStyles : customStyles}\n      disableOverlayClose\n      disableCloseOnEsc\n    />\n  )\n}\n\nTutorial.propTypes = {\n  history: propTypes.instanceOf(Object),\n  steps: propTypes.arrayOf(propTypes.instanceOf(Object)).isRequired,\n  updateTutorialWatched: propTypes.func.isRequired,\n  navigateBack: propTypes.bool,\n}\n\nTutorial.defaultProps = {\n  history: null,\n  navigateBack: false,\n}\n\nexport default Tutorial\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport Group from './Group'\nimport Tutorial from '../Tutorial'\nimport ButtonContainer from '../ButtonContainer'\nimport './styles.scss'\n\nconst Groups = props => {\n  const {\n    history,\n    channels,\n    teams,\n    getMembers,\n    profiles,\n    getUnreadCount,\n    currentUserId,\n    tutorialWatched,\n    updateUser,\n    getPosts,\n    showTownSquare,\n  } = props\n\n  const updateTutorialWatched = () => updateUser({ tutorialWatched: true })\n\n  const goToPreviousTutorial = () => {\n    history.push('/friends')\n  }\n\n  const steps = [\n    {\n      target: '.nav-link-Ryhmät',\n      content: (\n        <div>\n          <p className=\"tutorial-step\">6/6</p>\n          <h1 className=\"tutorial-header\">\n            Voit jutella ja tutustua uusiin ihmisiin ryhmissä.{' '}\n          </h1>\n          <p className=\"tutorial-text\">\n            Löydät ryhmät täältä, kohdasta Ryhmät.\n          </p>\n          <ButtonContainer\n            className=\"button groups-tutorial-btn\"\n            onClick={goToPreviousTutorial}\n          >\n            Edellinen\n          </ButtonContainer>\n        </div>\n      ),\n      disableBeacon: true,\n    },\n  ]\n\n  return (\n    <section className=\"groups-wrapper\">\n      <header className=\"groups-header\">\n        <h1>Omat ryhmät</h1>\n      </header>\n      <div className=\"groups-boxes\">\n        {Object.values(channels).map(channel => (\n          <Group\n            key={channel.id}\n            channel={channel}\n            getMembers={getMembers}\n            profiles={profiles}\n            unreadCount={getUnreadCount(channel.id)}\n            currentUserId={currentUserId}\n            teams={teams}\n            getPosts={getPosts}\n            showTownSquare={showTownSquare}\n          />\n        ))}\n      </div>\n      {!tutorialWatched && (\n        <Tutorial\n          steps={steps}\n          updateTutorialWatched={updateTutorialWatched}\n          history={history}\n        />\n      )}\n    </section>\n  )\n}\n\nGroups.defaultProps = {\n  profiles: {},\n  history: null,\n}\n\nGroups.propTypes = {\n  channels: PropTypes.instanceOf(Object).isRequired,\n  teams: PropTypes.instanceOf(Object).isRequired,\n  currentUserId: PropTypes.string.isRequired,\n  getMembers: PropTypes.func.isRequired,\n  profiles: PropTypes.instanceOf(Object),\n  getUnreadCount: PropTypes.func.isRequired,\n  updateUser: PropTypes.func.isRequired,\n  tutorialWatched: PropTypes.bool.isRequired,\n  getPosts: PropTypes.func.isRequired,\n  history: PropTypes.instanceOf(Object),\n  showTownSquare: PropTypes.bool.isRequired,\n}\n\nexport default memo(Groups)\n","export const isSystemAdmin = (userId, profiles) =>\n  profiles &&\n  profiles[userId] &&\n  profiles[userId].roles.includes('system_admin')\n\nexport const isTeamAdmin = (userId, teams) => {\n  const { currentTeamId } = teams\n  const member =\n    teams &&\n    teams.membersInTeam &&\n    teams.membersInTeam[currentTeamId] &&\n    teams.membersInTeam[currentTeamId][userId]\n  return member && member.scheme_admin\n}\n","import React, { memo } from 'react'\nimport './styles.scss'\nimport propTypes from 'prop-types'\nimport groupNameColors from '../../../assets/groupColors'\nimport Member from '../../Groups/Group/Member'\nimport { isSystemAdmin, isTeamAdmin } from '../../../utils/userIsAdmin'\n\nconst SuggestionBox = props => {\n  const { channel, members, hidden, top, profiles, teams } = props\n  const sortPurpose = purpose => {\n    return Object.keys(purpose).sort((a, b) => purpose[b] - purpose[a])\n  }\n\n  return (\n    <div\n      className={`group-box group-suggestion-box ${hidden ? 'hidden-box' : ''}`}\n      aria-hidden={hidden}\n      style={{ top: `-${top + 2}px ` }}\n    >\n      <div className=\"group-suggestion-box-content\">\n        <div className=\"group-header\">\n          <div\n            className=\"group-color-icon\"\n            style={{\n              backgroundColor: groupNameColors[channel.display_name],\n              border: `${\n                channel.display_name.toLowerCase().includes('valkoiset')\n                  ? '1px solid grey'\n                  : 'none'\n              }`,\n            }}\n          />\n          <h2 className=\"channel-suggestion-header\">{channel.display_name}</h2>\n        </div>\n        <div className=\"group-in-common\">\n          {channel.purpose && Object.keys(channel.purpose).length > 0 ? (\n            <p className=\"group-in-common-text\">\n              {`Kiinnostukset: ${sortPurpose(channel.purpose)\n                .slice(0, 3)\n                .join(', ')}`}\n            </p>\n          ) : (\n            <div className=\"suggestion-box-info\">\n              <p>Tässä ryhmässä ei ole vielä muita jäseniä.</p>\n              <p>Liity ryhmään ensimmäisenä.</p>\n            </div>\n          )}\n        </div>\n        {channel && members && (\n          <div className=\"suggestion-members-wrapper\">\n            <div className=\"group-current-members\">\n              {members &&\n                members\n                  .filter(\n                    member =>\n                      member &&\n                      member.delete_at === 0 &&\n                      member.position !== 'deleted' &&\n                      !isSystemAdmin(member.id, profiles) &&\n                      !isTeamAdmin(member.id, teams)\n                  )\n                  .map(member => (\n                    <Member\n                      key={`suggestion-${member.id}`}\n                      userId={member.id}\n                      nickname={member.nickname}\n                    />\n                  ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nSuggestionBox.propTypes = {\n  channel: propTypes.instanceOf(Object).isRequired,\n  members: propTypes.instanceOf(Array).isRequired,\n  profiles: propTypes.instanceOf(Object).isRequired,\n  teams: propTypes.instanceOf(Object).isRequired,\n  hidden: propTypes.bool,\n  top: propTypes.number,\n}\n\nSuggestionBox.defaultProps = {\n  hidden: false,\n  top: -10,\n}\n\nexport default memo(SuggestionBox)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './styles.scss'\n\nconst Loader = props => {\n  const { zeroMargin } = props\n  return (\n    <div className=\"loader-container\">\n      <div\n        className={`${\n          zeroMargin ? 'no-margin-spinner' : 'margin-spinner'\n        } spinner`}\n      >\n        <div className=\"bounce1\" />\n        <div className=\"bounce2\" />\n        <div className=\"bounce3\" />\n      </div>\n    </div>\n  )\n}\n\nLoader.propTypes = {\n  zeroMargin: PropTypes.bool,\n}\n\nLoader.defaultProps = {\n  zeroMargin: false,\n}\n\nexport default Loader\n","import React, { memo, useState, useEffect } from 'react'\nimport './styles.scss'\nimport propTypes from 'prop-types'\nimport Swipeable from 'react-swipy'\nimport SuggestionBox from './SuggestionBox'\nimport ButtonContainer from '../ButtonContainer'\nimport BouncingLoader from '../BouncingLoader'\n\nconst GroupSuggestions = props => {\n  const {\n    channels,\n    joinedChannels,\n    profiles,\n    teams,\n    handleJoinChannel,\n    channelMembers,\n    getChannelInvitations,\n    resetChannelInvitations,\n  } = props\n\n  const [cards, setCards] = useState(channels)\n  const [channelsLoading, setChannelsLoading] = useState(false)\n\n  const remove = () => {\n    // When all cards are skipped,\n    // reset state invitations\n    setCards(cards.slice(0, -1))\n    if (cards.length === 1) {\n      resetChannelInvitations()\n    }\n  }\n\n  const handleGetChannelsAgain = async () => {\n    setChannelsLoading(true)\n    await getChannelInvitations()\n    setChannelsLoading(false)\n  }\n\n  useEffect(() => {\n    setCards([...channels])\n  }, [channels])\n\n  return (\n    <section className=\"group-suggestions\">\n      <h1>Uudet ryhmät</h1>\n      {joinedChannels &&\n      joinedChannels.length < 6 &&\n      cards &&\n      cards.length > 0 &&\n      !channelsLoading ? (\n        <div className=\"group-suggestion-info\">\n          Kiinnostaako sinua seuraava ryhmä?\n        </div>\n      ) : (\n        <div>\n          {joinedChannels && joinedChannels.length < 6 ? (\n            <div>\n              <p>\n                Sinulle ehdotetaan uusia ryhmiä päivittäin kiinnostusten mukaan.\n              </p>\n              <ButtonContainer\n                secondary\n                className=\"get-suggestions-again-button\"\n                onClick={handleGetChannelsAgain}\n              >\n                Näytä uudestaan\n              </ButtonContainer>\n            </div>\n          ) : (\n            <p>\n              Olet jo viidessä ryhmässä. Jos haluat liittyä uuteen ryhmään,\n              poistu ensi jostain vanhasta ryhmästä.\n            </p>\n          )}\n        </div>\n      )}\n      <div className=\"group-suggestion-boxes\">\n        {channelsLoading && <BouncingLoader />}\n        {joinedChannels &&\n          joinedChannels.length < 6 &&\n          cards &&\n          cards.length > 0 &&\n          !channelsLoading && (\n            <div>\n              {cards.map((card, i) =>\n                i === cards.length - 1 ? (\n                  <Swipeable\n                    key={card.id}\n                    min={80}\n                    buttons={({ left }) => (\n                      <div className=\"suggestion-buttons-wrapper\">\n                        <ButtonContainer\n                          className=\"suggestion-button button-skip\"\n                          onClick={() => {\n                            left()\n                          }}\n                        >\n                          Älä liity\n                        </ButtonContainer>\n                        <ButtonContainer\n                          onClick={handleJoinChannel(card.id)}\n                          className=\"suggestion-button button-join\"\n                          secondary\n                        >\n                          Liity\n                        </ButtonContainer>\n                      </div>\n                    )}\n                    onAfterSwipe={remove}\n                  >\n                    <SuggestionBox\n                      key={cards[i].id}\n                      channel={cards[i]}\n                      members={channelMembers[cards[i].id]}\n                      profiles={profiles}\n                      teams={teams}\n                    />\n                  </Swipeable>\n                ) : (\n                  <SuggestionBox\n                    hidden\n                    key={card.id}\n                    channel={cards[i]}\n                    members={channelMembers[cards[i].id]}\n                    teams={teams}\n                    profiles={profiles}\n                    top={cards.length - i}\n                  />\n                )\n              )}\n            </div>\n          )}\n      </div>\n    </section>\n  )\n}\n\nGroupSuggestions.propTypes = {\n  channels: propTypes.instanceOf(Array).isRequired,\n  joinedChannels: propTypes.instanceOf(Object).isRequired,\n  profiles: propTypes.instanceOf(Object).isRequired,\n  teams: propTypes.instanceOf(Object).isRequired,\n  handleJoinChannel: propTypes.func.isRequired,\n  channelMembers: propTypes.instanceOf(Object).isRequired,\n  getChannelInvitations: propTypes.func.isRequired,\n  resetChannelInvitations: propTypes.func.isRequired,\n}\n\nexport default memo(GroupSuggestions)\n","import { login as matterMostLogin } from 'mattermost-redux/actions/users'\nimport * as types from '../../contants/actionTypes'\nimport * as channelAPI from '../../api/channels/channels'\nimport * as API from '../../api/user/user'\n\nexport const userLogin = user => {\n  return async dispatch => {\n    try {\n      const res = await API.userLogin(user)\n      if (res && res.user && res.token) {\n        localStorage.setItem('userId', res.user.id)\n        localStorage.setItem('authToken', res.token)\n        const { email, password } = user\n        await dispatch(matterMostLogin(email, password))\n      } else {\n        // This is so that state is updated and effects related to user are ran even if the error message does not change.\n        await dispatch({\n          type: types.USER_LOGIN_FAILURE,\n          payload: '',\n        })\n        await dispatch({\n          type: types.USER_LOGIN_FAILURE,\n          payload: res,\n          error: true,\n        })\n      }\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e)\n      await dispatch({\n        type: types.USER_LOGIN_FAILURE,\n        payload: e,\n        error: true,\n      })\n    }\n  }\n}\n\nexport const addUserToState = () => {\n  return async dispatch => {\n    const id = localStorage.getItem('userId')\n    const token = localStorage.getItem('authToken')\n    try {\n      if (token) {\n        const user = await API.getUser(id, token)\n        await dispatch({\n          type: types.ADD_USER_TO_STATE,\n          user,\n        })\n      }\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error('e')\n      dispatch({ type: types.GET_USER_FAILURE, payload: e, error: true })\n    }\n  }\n}\n\nexport const updateUser = data => {\n  const id = localStorage.getItem('userId')\n  const token = localStorage.getItem('authToken')\n  return async dispatch => {\n    try {\n      await API.updateUser(data, id, token)\n      await dispatch({\n        type: types.UPDATE_USER,\n        user: data,\n      })\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e)\n      dispatch({ type: types.UPDATE_USER_FAILURE, payload: e, error: true })\n    }\n  }\n}\n\nexport const updateUserPassword = data => {\n  const id = localStorage.getItem('userId')\n  const token = localStorage.getItem('authToken')\n  return async dispatch => {\n    try {\n      const res = await API.updatePassword(data, id, token)\n      if (res && res.ok) {\n        await dispatch({\n          type: types.UPDATE_USER_PASSWORD,\n        })\n      } else if (res) {\n        await dispatch({\n          type: types.UPDATE_USER_PASSWORD_FAILURE,\n          payload: res.message,\n          error: true,\n        })\n      }\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e)\n    }\n  }\n}\n\nexport const restoreUserAccount = data => {\n  const id = localStorage.getItem('userId')\n  const token = localStorage.getItem('authToken')\n  return async dispatch => {\n    try {\n      const resp = await API.restoreUser(data, id, token)\n      if (resp && resp.success && resp.restored) {\n        await dispatch({\n          type: types.RESTORE_USER,\n        })\n      }\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e)\n      dispatch({ type: types.UPDATE_USER_FAILURE, payload: e, error: true })\n    }\n  }\n}\n\nexport const getUserInterests = () => {\n  const token = localStorage.getItem('authToken')\n  return async dispatch => {\n    try {\n      const data = await API.getUserInterest(token)\n      await dispatch({\n        type: types.GET_USER_INTERESTS,\n        userInterests: data.result[0],\n      })\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e)\n    }\n  }\n}\n\nexport const addUserInterests = interests => {\n  const id = localStorage.getItem('userId')\n  const token = localStorage.getItem('authToken')\n  return async dispatch => {\n    try {\n      const data = { userId: id, ...interests }\n      await API.addUserInterests(data, token)\n      await channelAPI.handleUserChangingInterestToChannelsPurposes(token)\n      await dispatch(getUserInterests())\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e)\n    }\n  }\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport function clearUserCookie() {\n  document.cookie = 'MMUSERID=;expires=Thu, 01 Jan 1970 00:00:01 GMT;path=/'\n  document.cookie = `MMUSERID=;expires=Thu, 01 Jan 1970 00:00:01 GMT;domain=${window.location.hostname};path=/`\n  document.cookie = 'MMCSRF=;expires=Thu, 01 Jan 1970 00:00:01 GMT;path=/'\n  document.cookie = `MMCSRF=;expires=Thu, 01 Jan 1970 00:00:01 GMT;domain=${window.location.hostname};path=/`\n}\n","/* eslint-disable import/prefer-default-export */\n// User\nexport const ADD_USER_TO_STATE = 'KOHDATAAN_ADD_USER_TO_STATE'\nexport const UPDATE_USER = 'KOHDATAAN_UPDATE_USER'\nexport const UPDATE_USER_PASSWORD = 'UPDATE_USER_PASSWORD'\nexport const UPDATE_USER_PASSWORD_FAILURE = 'UPDATE_USER_PASSWORD_FAILURE'\nexport const SIGNUP_SIGNIN_FAILURE = 'KOHDATAAN_SIGNUP_SIGNIN_FAILURE'\nexport const GET_USER_FAILURE = 'KOHDATAAN_GET_USER_FAILURE'\nexport const UPDATE_USER_FAILURE = 'KOHDATAAN_UPDATE_USER_FAILURE'\nexport const GET_USER_INTERESTS = 'KOHDATAAN_GET_USER_INTERESTS'\nexport const USER_LOGIN_FAILURE = 'KOHDATAAN_USER_LOGIN_FAILURE'\nexport const RESTORE_USER = 'KOHDATAAN_RESTORE_USER'\n\n// Interest\nexport const GET_INTERESTS = 'KOHDATAAN_GET_INTERESTS'\n\n// Channels\nexport const START_INVITATION_FETCHING = 'KOHDATAAN_START_INVITATION_FETCHING'\nexport const INVITATION_FETCHING_READY = 'KOHDATAAN_INVITATION_FETCHING_READY'\nexport const GET_CHANNEL_INVITATIONS = 'KOHDATAAN_GET_CHANNEL_INVITATIONS'\nexport const RESET_CHANNEL_INVITATIONS = 'KOHDATAAN_RESET_CHANNEL_INVITATIONS'\nexport const GET_CHANNEL_INVITATION_MEMBERS =\n  'KOHDATAAN_GET_CHANNEL_INVITATION_MEMBERS'\n\n// Friends\nexport const START_FRIENDS_FETCHING = 'KOHDATAAN_START_FRIENDS_FETCHING'\nexport const FRIENDS_FETCHING_READY = 'KOHDATAAN_FRIENDS_FETCHING_READY'\n\n// Mattermost\nexport const STORE_REHYDRATION_FAILED = 'KOHDATAAN_STORE_REHYDRATION_FAILED'\n\n// Root\nexport const START_ROOT_LOADING = 'KOHDATAAN_START_ROOT_LOADING'\nexport const ROOT_LOADING_READY = 'KOHDATAAN_ROOT_LOADING_READY'\nexport const SET_COORDINATES = 'KOHDATAAN_SET_COMPONENT_COORDINATES'\n","import handleFetchErrors from '../errors'\n\nconst getInterests = async token => {\n  const uri = process.env.REACT_APP_NODE_BACKEND_URL\n  try {\n    const resp = await fetch(`${uri}/interest`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n    })\n    return handleFetchErrors(resp)\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n\nexport default getInterests\n","import * as types from '../../contants/actionTypes'\nimport getInterests from '../../api/interests/interest'\n\nconst getInterestsAction = () => {\n  // const id = localStorage.getItem('userId')\n  const token = localStorage.getItem('authToken')\n  return async dispatch => {\n    try {\n      const interests = await getInterests(token)\n      await dispatch({\n        type: types.GET_INTERESTS,\n        interests,\n      })\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e)\n    }\n  }\n}\n\nexport default getInterestsAction\n","import { init } from 'mattermost-redux/actions/websocket'\nimport { Client4 } from 'mattermost-redux/client'\nimport { loadMe } from 'mattermost-redux/actions/users'\nimport { getTeamMembers, selectTeam } from 'mattermost-redux/actions/teams'\nimport { setServerVersion } from 'mattermost-redux/actions/general'\nimport * as types from '../../contants/actionTypes'\nimport getInterestsAction from '../interest/interestAction'\nimport { addUserToState, getUserInterests } from '../user/userAction'\n\nexport const rootLoading = () => {\n  return async dispatch => {\n    dispatch({ type: types.START_ROOT_LOADING })\n  }\n}\n\nexport const rootLoadingReady = () => {\n  return async dispatch => {\n    dispatch({\n      type: types.ROOT_LOADING_READY,\n    })\n  }\n}\n\nexport const initMattermostReduxClient = () => {\n  return async dispatch => {\n    await Client4.setUrl(`${process.env.REACT_APP_MATTERMOST_URL}`)\n    await dispatch(init('web', `${process.env.REACT_APP_WEBSOCKET_URL}`))\n    await dispatch(setServerVersion('5.20.1'))\n  }\n}\n\nexport const initUser = () => {\n  return async dispatch => {\n    const token = localStorage.getItem('authToken')\n    if (token) {\n      await dispatch(addUserToState())\n      await dispatch(getUserInterests())\n      await dispatch(loadMe())\n    }\n  }\n}\n\nexport const initTeam = () => {\n  return async (dispatch, getState) => {\n    const { teams } = getState().entities.teams\n    const teamId = Object.keys(teams)[0]\n    const team = Object.values(teams)[0]\n    if (teamId && team) {\n      await dispatch(selectTeam(team))\n      await dispatch(getTeamMembers(teamId))\n    }\n  }\n}\n\nexport const rootStartUp = () => {\n  return async dispatch => {\n    await dispatch(rootLoading())\n    await dispatch(initMattermostReduxClient())\n    await dispatch(getInterestsAction())\n    await dispatch(initUser())\n    await dispatch(initTeam())\n    await dispatch(rootLoadingReady())\n  }\n}\n","import { fetchMyChannelsAndMembers } from 'mattermost-redux/actions/channels'\nimport { getProfiles } from 'mattermost-redux/actions/users'\nimport moment from 'moment'\nimport * as types from '../../contants/actionTypes'\nimport * as API from '../../api/channels/channels'\nimport { updateUser } from '../user/userAction'\nimport { initUser, initTeam } from '../root/index'\n\nexport const startGroupPageFetching = () => {\n  return async dispatch => {\n    dispatch({ type: types.START_INVITATION_FETCHING })\n  }\n}\n\nexport const groupPageFetchingReady = () => {\n  return async dispatch => {\n    dispatch({ type: types.INVITATION_FETCHING_READY })\n  }\n}\n\nexport const getMembersByChannelIdAction = channelId => {\n  return async dispatch => {\n    try {\n      const res = await API.getChannelInvitationMembers(\n        localStorage.getItem('authToken'),\n        channelId\n      )\n      await dispatch({\n        type: types.GET_CHANNEL_INVITATION_MEMBERS,\n        members: res.userDetails,\n        channelId,\n      })\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e)\n    }\n  }\n}\n\nexport const updateChannelInvitationsTimestamp = () => {\n  return async dispatch => {\n    await dispatch(updateUser({ channelInvitationsAt: Date.now() }))\n  }\n}\n\nexport const getChannelInvitationsAction = () => {\n  // Fetch channel invitations and related channel members\n  const token = localStorage.getItem('authToken')\n  return async dispatch => {\n    try {\n      const data = await API.getChannelInvitations(token)\n      dispatch({\n        type: types.GET_CHANNEL_INVITATIONS,\n        channelInvitations: data,\n      })\n      const promises = []\n      if (data && data.found) {\n        data.found.forEach(channel => {\n          promises.push(dispatch(getMembersByChannelIdAction(channel.id)))\n        })\n      }\n      await Promise.all(promises)\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e)\n    }\n  }\n}\n\nexport const resetChannelInvitations = () => {\n  return async dispatch => {\n    dispatch({\n      type: types.RESET_CHANNEL_INVITATIONS,\n    })\n  }\n}\n\nexport const timedGetChannelInvitationsAction = () => {\n  return async (dispatch, getState) => {\n    try {\n      const { user } = getState()\n      const lastInvitationsTimestamp = user && user.channelInvitationsAt\n      const hoursSince = moment().diff(lastInvitationsTimestamp, 'hours')\n      if (hoursSince >= 24 || !lastInvitationsTimestamp) {\n        await dispatch(getChannelInvitationsAction())\n        await dispatch(updateChannelInvitationsTimestamp())\n      }\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e)\n    }\n  }\n}\n\nexport const fetchChannelsAndInvitations = () => {\n  // Fetch groups related channel data\n  return async (dispatch, getState) => {\n    await dispatch(startGroupPageFetching())\n    await dispatch(initUser())\n    await dispatch(initTeam())\n    const { teams } = getState().entities.teams\n    const teamId = Object.keys(teams)[0]\n    await dispatch(fetchMyChannelsAndMembers(teamId))\n    await dispatch(timedGetChannelInvitationsAction())\n    await dispatch(getProfiles())\n    await dispatch(groupPageFetchingReady())\n  }\n}\n","import React, { useEffect, useState, memo } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport {\n  joinChannel as joinChannelAction,\n  getChannelMembers as getChannelMembersAction,\n} from 'mattermost-redux/actions/channels'\nimport { getPosts as getPostsAction } from 'mattermost-redux/actions/posts'\nimport PropTypes from 'prop-types'\nimport moment from 'moment'\nimport { addUserInterestsToChannelPurpose } from '../api/channels/channels'\nimport Groups from '../components/Groups'\nimport GroupSuggestions from '../components/GroupSuggestions'\nimport BouncingLoader from '../components/BouncingLoader'\nimport {\n  fetchChannelsAndInvitations as fetchChannelsAndInvitationsAction,\n  getChannelInvitationsAction as getChannelInvitationsAgain,\n  resetChannelInvitations as resetChannelInvitationsAction,\n} from '../store/channels/channelAction'\nimport { updateUser as updateUserAction } from '../store/user/userAction'\nimport { isSystemAdmin, isTeamAdmin } from '../utils/userIsAdmin'\n\nconst GroupsContainer = props => {\n  const {\n    history,\n    channels,\n    teams,\n    channelSuggestionMembers,\n    currentUserId,\n    myChannels,\n    joinChannel,\n    channelSuggestions,\n    getChannelMembers,\n    fetchChannelsAndInvitations,\n    getInvitationsAgain,\n    resetChannelInvitations,\n    profiles,\n    user,\n    updateUser,\n    getPosts,\n    posts,\n  } = props\n\n  if (!user.profileReady) history.push('/registration/info')\n\n  const [isInitialized, setIsInitialized] = useState(false)\n  const [filteredSuggestions, setFilteredSuggestions] = useState([])\n  const [showTownSquare, setShowTownSquare] = useState(false)\n  const [activeMemberMmProfiles, setActiveMemberMmProfiles] = useState([])\n  // Get only those channels suggestions that user has not yet joined\n\n  // Get all group related data at once\n  useEffect(() => {\n    const initialize = async () => {\n      await fetchChannelsAndInvitations()\n      setIsInitialized(true)\n    }\n    initialize()\n  }, [fetchChannelsAndInvitations])\n\n  useEffect(() => {\n    const dateObject = moment()\n    const weekday = dateObject.isoWeekday()\n    const format = 'hh:mm:ss'\n    const beforeTime = moment('09:00:00', format)\n    const afterTime = moment('21:00:00', format)\n    if (dateObject.isBetween(beforeTime, afterTime)) setShowTownSquare(true)\n    // checks if weekday is Saturday (6) or Sunday (7)\n    if (weekday === 6 || weekday === 7) setShowTownSquare(false)\n  }, [])\n\n  useEffect(() => {\n    const getFilteredChannelSuggestions = () => {\n      const mySuggestions = channelSuggestions.filter(\n        channel =>\n          channel && channel.id && !Object.keys(myChannels).includes(channel.id)\n      )\n      return mySuggestions\n    }\n    if (myChannels) {\n      setFilteredSuggestions([...getFilteredChannelSuggestions()])\n    }\n  }, [myChannels, channelSuggestions])\n\n  // Get only group channels\n  // (filter direct messages and default channels out)\n  const getGroupChannels = allChannels => {\n    const filteredChannels = Object.values(allChannels).filter(\n      channel => channel.type !== 'D' && channel.name !== 'off-topic'\n    )\n    return filteredChannels\n  }\n\n  // Get channel objects based on myChannels\n  const getChannelInfoForMyChannels = () => {\n    const myCurrentChannels = Object.values(channels).filter(channel =>\n      Object.keys(myChannels).includes(channel.id)\n    )\n    return myCurrentChannels\n  }\n\n  // Get unread count by channel id\n  const getUnreadCountByChannelId = channelId => {\n    if (channels) {\n      const channel = Object.values(channels).find(\n        item => item.id === channelId\n      )\n      if (channel) {\n        const channelMsgCount = channel.total_msg_count\n        const myMessageCount = myChannels[channel.id].msg_count\n        return channelMsgCount - myMessageCount\n      }\n    }\n    return 0\n  }\n\n  const handleJoinChannel = channelId => async () => {\n    try {\n      await addUserInterestsToChannelPurpose(\n        localStorage.getItem('authToken'),\n        channelId\n      )\n      const currentTeamId = Object.keys(teams)[0]\n      await joinChannel(currentUserId, currentTeamId, channelId)\n      history.push(`/chat/${channelId}`)\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.log(e)\n    }\n  }\n\n  useEffect(() => {\n    const getActiveMattermostProfiles = () => {\n      const activeProfilesArr =\n        profiles &&\n        Object.values(profiles)\n          .map(member => profiles[member.id])\n          .filter(member => member && member.delete_at === 0)\n          .filter(member => member.position !== 'deleted')\n          .filter(member => member.username !== 'surveybot')\n          .filter(\n            member =>\n              !isSystemAdmin(member.id, profiles) &&\n              !isTeamAdmin(member.id, teams)\n          )\n      setActiveMemberMmProfiles(activeProfilesArr)\n    }\n    getActiveMattermostProfiles()\n  }, [profiles, setActiveMemberMmProfiles, teams])\n\n  if (!isInitialized) {\n    return <BouncingLoader />\n  }\n\n  // TODO: Refactor channel member fetching\n  return (\n    <main>\n      <GroupSuggestions\n        channels={filteredSuggestions}\n        joinedChannels={getGroupChannels(getChannelInfoForMyChannels())}\n        handleJoinChannel={handleJoinChannel}\n        channelMembers={channelSuggestionMembers}\n        getChannelInvitations={getInvitationsAgain}\n        resetChannelInvitations={resetChannelInvitations}\n        profiles={activeMemberMmProfiles}\n        teams={teams}\n      />\n      <Groups\n        history={history}\n        channels={getGroupChannels(getChannelInfoForMyChannels())}\n        getMembers={getChannelMembers}\n        profiles={activeMemberMmProfiles}\n        getUnreadCount={getUnreadCountByChannelId}\n        currentUserId={currentUserId}\n        updateUser={updateUser}\n        tutorialWatched={user.tutorialWatched}\n        teams={teams}\n        getPosts={getPosts}\n        posts={posts}\n        showTownSquare={showTownSquare}\n      />\n    </main>\n  )\n}\n\nGroupsContainer.propTypes = {\n  history: PropTypes.instanceOf(Object).isRequired,\n  channels: PropTypes.instanceOf(Object).isRequired,\n  myChannels: PropTypes.instanceOf(Object).isRequired,\n  teams: PropTypes.instanceOf(Object).isRequired,\n  joinChannel: PropTypes.func.isRequired,\n  channelSuggestions: PropTypes.instanceOf(Array),\n  currentUserId: PropTypes.string.isRequired,\n  getChannelMembers: PropTypes.func.isRequired,\n  channelSuggestionMembers: PropTypes.instanceOf(Object),\n  fetchChannelsAndInvitations: PropTypes.func.isRequired,\n  profiles: PropTypes.instanceOf(Object).isRequired,\n  getInvitationsAgain: PropTypes.func.isRequired,\n  resetChannelInvitations: PropTypes.func.isRequired,\n  user: PropTypes.instanceOf(Object).isRequired,\n  updateUser: PropTypes.func.isRequired,\n  posts: PropTypes.instanceOf(Object).isRequired,\n  getPosts: PropTypes.func.isRequired,\n}\n\nGroupsContainer.defaultProps = {\n  channelSuggestions: [],\n  channelSuggestionMembers: {},\n}\n\nconst mapStateToProps = state => {\n  const { currentUserId } = state.entities.users\n  const { teams } = state.entities\n  const { channels } = state.entities.channels\n  const { users } = state.entities\n  const mmUser = users.profiles[currentUserId]\n  const { profiles } = state.entities.users\n  const { posts } = state.entities.posts\n  const members = state.entities.channels.membersInChannel\n  const myChannels = state.entities.channels.myMembers\n  const { user } = state\n  const channelSuggestions = state.channels.found\n  const channelSuggestionMembers = state.channels.members\n\n  return {\n    currentUserId,\n    channelSuggestions,\n    channelSuggestionMembers,\n    user,\n    mmUser,\n    profiles,\n    teams,\n    posts,\n    channels,\n    members,\n    myChannels,\n  }\n}\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n      joinChannel: joinChannelAction,\n      getChannelMembers: getChannelMembersAction,\n      fetchChannelsAndInvitations: fetchChannelsAndInvitationsAction,\n      getInvitationsAgain: getChannelInvitationsAgain,\n      resetChannelInvitations: resetChannelInvitationsAction,\n      updateUser: updateUserAction,\n      getPosts: getPostsAction,\n    },\n    dispatch\n  )\n\nconst shouldComponentUpdate = (props, prevProps) => {\n  const { match: pMatch, ...prest } = prevProps\n  const { match, ...rest } = props\n  return JSON.stringify(rest) === JSON.stringify(prest)\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(memo(GroupsContainer, shouldComponentUpdate))\n","import React, { memo } from 'react'\nimport { Redirect, Route } from 'react-router-dom'\nimport PropTypes from 'prop-types'\n\nconst PrivateRoute = ({ component: Component, location, ...rest }) => {\n  return (\n    <Route\n      {...rest}\n      render={props =>\n        localStorage.getItem('authToken') ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: '/login',\n              state: { from: location },\n            }}\n          />\n        )\n      }\n    />\n  )\n}\n\nPrivateRoute.propTypes = {\n  component: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n  location: PropTypes.string,\n}\n\nPrivateRoute.defaultProps = {\n  location: '',\n}\n\nexport default memo(PrivateRoute)\n","import React, { memo, useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport ReactPlayer from 'react-player'\nimport ReactAudioPlayer from 'react-audio-player'\nimport './styles.scss'\nimport propTypes from 'prop-types'\nimport Linkify from 'react-linkify'\nimport ButtonContainer from '../../../ButtonContainer'\n\nconst Message = props => {\n  const {\n    id,\n    sender,\n    text,\n    isUserLeavingOrJoiningChannel,\n    currentUserId,\n    senderId,\n    type,\n    timeSent,\n    dateSent,\n    showDate,\n    directChannel,\n    files,\n    channelId,\n    senderMmUsername,\n    iconMemberStatus,\n    isAdmin,\n    pinPost,\n    filesData,\n    lastPost,\n    dividerId,\n  } = props\n\n  const [messageText, setMessageText] = useState(text)\n  const [image, setImage] = useState(null)\n  const [deleted, setDeleted] = useState(false)\n\n  // checks if messagetext contains certain predetermined string and sets text to deleted if yes\n  if (messageText.includes(process.env.REACT_APP_REMOVE_STRING)) {\n    setMessageText('Viesti poistettu.')\n    setDeleted(true)\n  }\n  // Adds the text to be used for the date divider\n  const today = new Date().toLocaleDateString()\n  const dateText = dateSent === today ? 'Tänään' : dateSent\n\n  // Get message wrapper classes\n  const messageWrapperClassList = [\n    'chat-message-wrapper',\n    currentUserId === senderId ? 'wrapper-sent' : 'wrapper-received',\n    isUserLeavingOrJoiningChannel && isAdmin\n      ? 'content-system-message-admin'\n      : '',\n  ]\n\n  // Get message content classes\n  const messageContentClassList = [\n    'chat-message-content',\n    currentUserId === senderId ? 'content-sent' : 'content-received',\n    isUserLeavingOrJoiningChannel && !isAdmin ? 'content-system-message' : '',\n    isAdmin ? 'content-received-admin' : '',\n  ]\n\n  useEffect(() => {\n    if (type === 'system_join_channel' || type === 'system_join_team') {\n      if (senderId === currentUserId) {\n        setMessageText('Sinä liityit kanavalle.')\n      } else {\n        setMessageText(`Käyttäjä liittyi kanavalle.`)\n      }\n    } else if (\n      type === 'system_leave_channel' ||\n      type === 'system_leave_team'\n    ) {\n      if (senderId === currentUserId) {\n        setMessageText('Sinä poistuit kanavalta.')\n      } else {\n        setMessageText(`Käyttäjä poistui kanavalta.`)\n      }\n    }\n  }, [currentUserId, senderId, type])\n\n  useEffect(() => {\n    const getMemberImage = () => {\n      const url = `${\n        process.env.REACT_APP_MATTERMOST_URL\n      }/api/v4/users/${senderId}/image?${Date.now()}`\n      setImage(url)\n    }\n    getMemberImage()\n  }, [senderId])\n\n  const getMemberStatus = () => {\n    let status = ''\n    if (iconMemberStatus.includes('online')) {\n      status = 'Käyttäjä paikalla'\n    } else if (iconMemberStatus.includes('offline')) {\n      status = 'Käyttäjä offline'\n    } else if (iconMemberStatus.includes('away')) {\n      status = 'Käyttäjä poissa'\n    }\n    return status\n  }\n\n  // adds class to linkify components\n  const componentDecorator = (href, content, key) => (\n    <a href={href} key={key} className=\"message-content-link\">\n      {content}\n    </a>\n  )\n\n  return (\n    <>\n      <div\n        aria-haspopup=\"false\"\n        role=\"article\"\n        data-focusable=\"true\"\n        tabIndex={0}\n        aria-live={lastPost ? 'polite' : 'off'}\n        className=\"message-container\"\n      >\n        {lastPost ? <span className=\"sr-only\">Viimeisin viesti.</span> : ''}\n        {showDate && (\n          <div className=\"show-date-content\">\n            <div className=\"date-divider\" />\n            <span className=\"date-divider-text\">{dateText}</span>\n            <div className=\"date-divider\" />\n          </div>\n        )}\n        {dividerId === id && (\n          <div className=\"show-date-content\">\n            <div className=\"new-message-divider\" />\n            <h2 className=\"new-message-divider-text\" id=\"newMessages\">\n              Uudet tapahtumat\n            </h2>\n            <div className=\"new-message-divider\" />\n          </div>\n        )}\n        <div className={messageWrapperClassList.join(' ')}>\n          <div className=\"message-outer\">\n            <span className=\"sr-only\">\n              Viesti lähettäjältä\n              {isAdmin ? 'Valvoja' : sender}\n            </span>\n            {timeSent !== '' ? (\n              <header\n                className={`chat-message-header-content ${\n                  senderId === currentUserId\n                    ? 'own-chat-message-header'\n                    : 'other-user-message-header'\n                }`}\n              >\n                {currentUserId !== senderId && !directChannel && (\n                  <p\n                    aria-hidden\n                    className={`chat-message-sender ${\n                      sender === 'Poistunut käyttäjä'\n                        ? 'chat-message-sender-unknown'\n                        : ''\n                    }`}\n                  >\n                    {isAdmin ? 'Valvoja' : sender}\n                  </p>\n                )}\n                <span className=\"chat-message-timestamp\">{timeSent}</span>\n              </header>\n            ) : (\n              <div className=\"message-without-header-content\" />\n            )}\n            <div\n              className={`${\n                currentUserId === senderId\n                  ? 'message-icon-and-content-sent'\n                  : 'message-icon-and-content'\n              }`}\n            >\n              {currentUserId !== senderId && sender !== 'Poistunut käyttäjä' && (\n                <header>\n                  {isAdmin ? (\n                    <div\n                      className=\"label chat-message-sender-icon\"\n                      style={{\n                        backgroundColor: 'black',\n                        color: 'white',\n                      }}\n                    >\n                      <span>K</span>\n                      <span className=\"sr-only\">Valvoja</span>\n                    </div>\n                  ) : (\n                    <Link\n                      to={`/profile/${senderMmUsername}`}\n                      className=\"channel-name-link\"\n                      aria-label=\"Linkki profiiliin\"\n                    >\n                      <i aria-hidden=\"true\" title={sender[0]} />\n                      <div\n                        className=\"label chat-message-sender-icon\"\n                        style={{\n                          backgroundImage: `url(${image})`,\n                        }}\n                      />\n                    </Link>\n                  )}\n\n                  <div className={iconMemberStatus} aria-hidden />\n                  <span className=\"sr-only\">{getMemberStatus()}</span>\n                </header>\n              )}\n              {currentUserId !== senderId && sender === 'Poistunut käyttäjä' && (\n                <div className=\"deleted-user-icon-container\">\n                  <div className=\"chat-message-sender-icon\">\n                    <i className=\"fas fa-circle deleted-user-chat-icon\" />\n                  </div>\n                </div>\n              )}\n              <div className=\"chat-message-content-field\">\n                <div className={messageContentClassList.join(' ')}>\n                  {files &&\n                    !deleted &&\n                    files[0] &&\n                    filesData[files[0]].mime_type.includes('image') && (\n                      <>\n                        <Link to={`${channelId}/${files[0]}`}>\n                          <img\n                            className=\"message-image\"\n                            src={`${process.env.REACT_APP_MATTERMOST_URL}/api/v4/files/${files[0]}/thumbnail`}\n                            alt=\"liite\"\n                          />\n                          <span className=\"sr-only\">Linkki kuvaan</span>\n                        </Link>\n                        <span className=\"sr-only\">Kuvateksti</span>\n                        {isAdmin ? (\n                          <Linkify\n                            className=\"image-message-content-text chat-message-content-text\"\n                            componentDecorator={componentDecorator}\n                          >\n                            {messageText}\n                          </Linkify>\n                        ) : (\n                          <p className=\"image-message-content-text chat-message-content-text\">\n                            {messageText}\n                          </p>\n                        )}\n                      </>\n                    )}\n                  {files &&\n                    !deleted &&\n                    files[0] &&\n                    filesData[files[0]].mime_type.includes('video') && (\n                      <>\n                        <div\n                          className=\"player-wrapper\"\n                          aria-label=\"Videoviesti\"\n                        >\n                          <ReactPlayer\n                            className=\"react-player\"\n                            url={`${process.env.REACT_APP_MATTERMOST_URL}/api/v4/files/${files[0]}`}\n                            controls\n                            config={{\n                              file: {\n                                attributes: {\n                                  controlsList: 'nodownload noremoteplayback',\n                                  disablePictureInPicture: true,\n                                },\n                              },\n                            }}\n                            width=\"100%\"\n                            height=\"200px\"\n                            style={{ outline: 'none' }}\n                          />\n                        </div>\n                        <span className=\"sr-only\">Viesti</span>\n                        {isAdmin ? (\n                          <Linkify\n                            className=\"image-message-content-text chat-message-content-text\"\n                            componentDecorator={componentDecorator}\n                          >\n                            {messageText}\n                          </Linkify>\n                        ) : (\n                          <p className=\"image-message-content-text chat-message-content-text\">\n                            {messageText}\n                          </p>\n                        )}\n                      </>\n                    )}\n                  {files &&\n                    !deleted &&\n                    files[0] &&\n                    filesData[files[0]].mime_type.includes('audio') && (\n                      <div className=\"player-wrapper\" aria-label=\"ääniviesti\">\n                        <ReactAudioPlayer\n                          src={`${process.env.REACT_APP_MATTERMOST_URL}/api/v4/files/${files[0]}`}\n                          controls\n                          preload=\"metadata\"\n                          controlsList=\"nodownload\"\n                          style={{ maxWidth: '53vw', outline: 'none' }}\n                        />\n                      </div>\n                    )}\n                  {files && deleted && (\n                    <>\n                      <span className=\"sr-only\">Viesti</span>\n                      <p className=\"chat-message-content-text\">{messageText}</p>\n                    </>\n                  )}\n                  {!files && (\n                    <>\n                      <span className=\"sr-only\">Viesti</span>\n                      {isAdmin ? (\n                        <Linkify\n                          className=\"chat-message-content-text\"\n                          componentDecorator={componentDecorator}\n                        >\n                          {messageText}\n                        </Linkify>\n                      ) : (\n                        <p className=\"chat-message-content-text\">\n                          {messageText}\n                        </p>\n                      )}\n                    </>\n                  )}\n                </div>\n                {currentUserId !== senderId &&\n                  !directChannel &&\n                  !isAdmin &&\n                  !isUserLeavingOrJoiningChannel && (\n                    <ButtonContainer\n                      className=\"chat-report-message-icon\"\n                      onClick={() => pinPost(id, senderId, text)}\n                      label=\"Ilmoita asiattomasta viestistä\"\n                    >\n                      <i className=\"fas fa-ellipsis-v\" aria-hidden=\"true\" />\n                    </ButtonContainer>\n                  )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nMessage.defaultProps = {\n  type: '',\n  senderId: '',\n  files: null,\n  senderMmUsername: '',\n  iconMemberStatus: '',\n  isAdmin: false,\n}\n\nMessage.propTypes = {\n  sender: propTypes.string.isRequired,\n  text: propTypes.string.isRequired,\n  isUserLeavingOrJoiningChannel: propTypes.bool.isRequired,\n  type: propTypes.string,\n  currentUserId: propTypes.string.isRequired,\n  senderId: propTypes.string,\n  directChannel: propTypes.bool.isRequired,\n  timeSent: propTypes.string.isRequired,\n  dateSent: propTypes.string.isRequired,\n  showDate: propTypes.bool.isRequired,\n  files: propTypes.instanceOf(Array),\n  channelId: propTypes.string.isRequired,\n  senderMmUsername: propTypes.string,\n  iconMemberStatus: propTypes.string,\n  isAdmin: propTypes.bool,\n  pinPost: propTypes.func.isRequired,\n  filesData: propTypes.instanceOf(Object).isRequired,\n  id: propTypes.string.isRequired,\n  lastPost: propTypes.bool.isRequired,\n  dividerId: propTypes.string,\n}\n\nMessage.defaultProps = {\n  dividerId: null,\n}\n\nexport default memo(Message)\n","const getUserNamebyId = (id, profiles) => {\n  const user = Object.values(profiles).find(profile => profile.id === id)\n  return user ? user.username : ''\n}\n\nexport default getUserNamebyId\n","// Checks if message type is users leaving or joining the channel\nconst isUserLeavingOrJoiningChannel = post => {\n  if (\n    post.type === 'system_join_channel' ||\n    post.type === 'system_leave_channel' ||\n    post.type === 'system_join_team' ||\n    post.type === 'system_leave_team'\n  ) {\n    return true\n  }\n  return false\n}\n\nexport default isUserLeavingOrJoiningChannel\n","import React, { memo, useEffect, useState, useRef } from 'react'\nimport './styles.scss'\nimport propTypes from 'prop-types'\nimport Message from './Message'\nimport getUsernameById from '../../../utils/getUsernameById'\nimport { isSystemAdmin, isTeamAdmin } from '../../../utils/userIsAdmin'\nimport isUserLeavingOrJoiningChannel from '../../../utils/isUserLeavingOrJoiningChannel'\n\nconst MessageList = props => {\n  const {\n    posts,\n    teams,\n    currentUserId,\n    getNickNamebyId,\n    directChannel,\n    channelId,\n    profiles,\n    getStatusById,\n    pinPost,\n    filesData,\n    dividerId,\n    lastViewedAt,\n  } = props\n\n  const [filteredPosts, setFilteredPosts] = useState([])\n\n  const getIconMemberStatus = userId =>\n    `chat-${getStatusById(userId)}-status-icon`\n\n  const ref = useRef()\n\n  let previousTime = null\n  let previousDate = null\n  let previousSender = null\n\n  const setTimeStampValues = post => {\n    let showDate = false\n    let showTime = true\n    const sender = getNickNamebyId(post.user_id)\n    const options = {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n    }\n    const dateSent = new Date(post.create_at).toLocaleDateString(\n      'fi-FI',\n      options\n    )\n    const timeSent = new Date(post.create_at).toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: false,\n    })\n    if (previousTime === null && previousTime !== '') {\n      previousTime = timeSent\n      previousSender = sender\n    }\n\n    if (dateSent === previousDate && previousTime === timeSent) {\n      showTime = false\n    }\n    if (previousSender !== sender) {\n      showTime = true\n      previousSender = sender\n    }\n\n    previousTime = timeSent\n    if (dateSent !== previousDate) {\n      previousDate = dateSent\n      showDate = true\n    }\n    return {\n      sendTime: showTime ? timeSent : '',\n      sendDate: dateSent,\n      show: showDate,\n    }\n  }\n\n  const isAdmin = id => {\n    return isSystemAdmin(id, profiles) || isTeamAdmin(id, teams)\n  }\n\n  useEffect(() => {\n    // TODO: implement some kind of button to scroll down when there are new messages\n    ref.current.scrollTop = ref.current.scrollHeight\n  })\n\n  useEffect(() => {\n    const filtered = posts.filter(\n      p =>\n        p.type !== 'system_purpose_change' &&\n        (p.type === '' ||\n          (isUserLeavingOrJoiningChannel(p) && !isAdmin(p.user_id)))\n    )\n    setFilteredPosts(filtered)\n  }, [posts])\n\n  const getLastPost = post => post.create_at === lastViewedAt\n\n  return (\n    <div className=\"chat-message-list-container chat--message-list\" ref={ref}>\n      <div className=\"chat--message-list--container\">\n        {posts.length > 0 &&\n          filteredPosts.map(post => {\n            const timestampValues = setTimeStampValues(post)\n            const isUserLeavingOrJoining = isUserLeavingOrJoiningChannel(post)\n            return (\n              post &&\n              post.user_id && (\n                <Message\n                  key={post.id}\n                  id={post.id}\n                  files={post.file_ids}\n                  type={post.type}\n                  url={post.url}\n                  sender={getNickNamebyId(post.user_id)}\n                  text={isUserLeavingOrJoining ? '' : post.message}\n                  isUserLeavingOrJoiningChannel={isUserLeavingOrJoining}\n                  senderId={post.user_id}\n                  currentUserId={currentUserId}\n                  directChannel={directChannel}\n                  timeSent={timestampValues.sendTime}\n                  dateSent={timestampValues.sendDate}\n                  showDate={timestampValues.show}\n                  channelId={channelId}\n                  senderMmUsername={getUsernameById(post.user_id, profiles)}\n                  iconMemberStatus={getIconMemberStatus(post.user_id)}\n                  isAdmin={isAdmin(post.user_id)}\n                  pinPost={pinPost}\n                  filesData={filesData}\n                  lastPost={getLastPost(post)}\n                  dividerId={dividerId}\n                />\n              )\n            )\n          })}\n      </div>\n    </div>\n  )\n}\n\nMessageList.propTypes = {\n  posts: propTypes.instanceOf(Array).isRequired,\n  teams: propTypes.instanceOf(Object).isRequired,\n  currentUserId: propTypes.string.isRequired,\n  getNickNamebyId: propTypes.func.isRequired,\n  directChannel: propTypes.bool.isRequired,\n  channelId: propTypes.string.isRequired,\n  profiles: propTypes.instanceOf(Object).isRequired,\n  getStatusById: propTypes.func.isRequired,\n  pinPost: propTypes.func.isRequired,\n  filesData: propTypes.instanceOf(Object).isRequired,\n  dividerId: propTypes.string,\n  lastViewedAt: propTypes.number.isRequired,\n}\n\nMessageList.defaultProps = {\n  dividerId: null,\n}\n\nexport default memo(MessageList)\n","import React, { memo } from 'react'\nimport './styles.scss'\nimport propTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\nimport ButtonContainer from '../../ButtonContainer'\nimport BottomNavigationBot from '../../BottomNavigationBot'\n\nconst Header = props => {\n  const {\n    channel,\n    toggleSider,\n    otherUser,\n    direct,\n    handleLogout,\n    otherUserName,\n    location,\n    deleted,\n    mmUser,\n  } = props\n\n  const header = otherUser || channel.display_name\n  const getHeader = () => {\n    if (otherUser) return otherUser\n    if (channel.name === 'town-square') return 'Kohdataan'\n    return channel.display_name\n  }\n\n  return (\n    <header className=\"chat-header\">\n      <Link\n        className=\"chat-header-item chat-header-nav-back-button\"\n        to={direct ? '/friends' : '/'}\n      >\n        {direct ? '< Kaverit' : '< Ryhmät'}\n      </Link>\n      {!direct && (\n        <ButtonContainer onClick={toggleSider} className=\"channel-name-button\">\n          <h1 className=\"chat-header-item chat-header-channel-name\">\n            {getHeader()}\n          </h1>\n        </ButtonContainer>\n      )}\n      {direct && !deleted && (\n        <Link to={`/profile/${otherUserName}`} className=\"channel-name-link\">\n          {' '}\n          <h1 className=\"chat-header-item chat-header-channel-name\">\n            {header}\n          </h1>\n        </Link>\n      )}\n      {direct && deleted && (\n        <div className=\"channel-header-deleted\">\n          {' '}\n          <h1 className=\"chat-header-item chat-header-channel-name\">\n            Poistunut käyttäjä\n          </h1>\n        </div>\n      )}\n      <div className=\"chat-header-item\">\n        <BottomNavigationBot\n          handleLogout={handleLogout}\n          inChat\n          direct={direct}\n          path={location.pathname}\n          user={mmUser}\n        />\n      </div>\n    </header>\n  )\n}\n\nHeader.defaultProps = {\n  channel: {},\n}\nHeader.propTypes = {\n  channel: propTypes.instanceOf(Object),\n  toggleSider: propTypes.func.isRequired,\n  otherUser: propTypes.instanceOf(Object),\n  handleLogout: propTypes.func.isRequired,\n  direct: propTypes.bool.isRequired,\n  otherUserName: propTypes.string,\n  location: propTypes.instanceOf(Object).isRequired,\n  deleted: propTypes.bool,\n  mmUser: propTypes.instanceOf(Object).isRequired,\n}\n\nHeader.defaultProps = {\n  otherUser: null,\n  otherUserName: null,\n  deleted: false,\n}\n\nexport default memo(Header)\n","import React, { memo, useState, useEffect } from 'react'\nimport TextareaAutosize from 'react-autosize-textarea'\nimport PropTypes from 'prop-types'\nimport ReactPlayer from 'react-player'\nimport ButtonContainer from '../../ButtonContainer'\nimport './styles.scss'\n\nconst FilePreview = props => {\n  const {\n    handleSubmit,\n    message,\n    handleChange,\n    fileId,\n    closeModal,\n    filesData,\n    orientation,\n  } = props\n\n  useEffect(() => {\n    handleChange('')\n  }, [handleChange])\n\n  const [msg, setMsg] = useState(message)\n\n  const addCaption = async e => {\n    handleSubmit(e, msg)\n  }\n\n  const getOrientationClassName = () => {\n    let className\n    switch (orientation) {\n      case 2:\n        className = 'flip'\n        break\n      case 3:\n        className = 'rotate-180'\n        break\n      case 4:\n        className = 'flip-and-rotate-180'\n        break\n      case 5:\n        className = 'flip-and-rotate-270'\n        break\n      case 6:\n        className = 'rotate-90'\n        break\n      case 7:\n        className = 'flip-and-rotate-90'\n        break\n      case 8:\n        className = 'rotate-270'\n        break\n      default:\n        className = ''\n        break\n    }\n    return className\n  }\n\n  const imageContentClassList = ['preview-image', getOrientationClassName()]\n\n  return (\n    <main className=\"image-preview-content\">\n      <div className=\"image\">\n        <ButtonContainer\n          className=\"image-preview-close-modal-button go-back-button\"\n          onClick={closeModal}\n          label=\"Sulje\"\n        >\n          {' '}\n        </ButtonContainer>\n        {fileId && filesData[fileId].mime_type.includes('image') && (\n          <img\n            className={imageContentClassList.join(' ')}\n            src={`${process.env.REACT_APP_MATTERMOST_URL}/api/v4/files/${fileId}`}\n            alt=\"attachment\"\n            width=\"100%\"\n            height=\"100%\"\n          />\n        )}\n        {fileId && filesData[fileId].mime_type.includes('video') && (\n          <div className=\"player-wrapper\">\n            <ReactPlayer\n              className=\"react-player\"\n              url={`${process.env.REACT_APP_MATTERMOST_URL}/api/v4/files/${fileId}`}\n              controls\n              width=\"100%\"\n              height=\"100%\"\n            />\n          </div>\n        )}\n      </div>\n      <div className=\"image-preview-form\">\n        <div className=\"image-preview-user-input-wrapper\">\n          <form\n            onSubmit={e => addCaption(e)}\n            className=\"image-preview-user-input-content\"\n          >\n            <TextareaAutosize\n              className=\"image-preview-user-input-text-field\"\n              id=\"image-message\"\n              type=\"text\"\n              value={msg}\n              onChange={e => setMsg(e.target.value)}\n              placeholder=\"Kirjoita viesti\"\n              maxRows={3}\n              rows={1}\n              aria-label=\"Lisää kuvateksti\"\n            />\n            <button\n              type=\"submit\"\n              className=\"send-message-button\"\n              tabIndex=\"0\"\n              aria-label=\"Lähetä\"\n            >\n              {}\n            </button>\n          </form>\n        </div>\n      </div>\n    </main>\n  )\n}\n\nFilePreview.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n  message: PropTypes.string,\n  handleChange: PropTypes.func.isRequired,\n  fileId: PropTypes.string.isRequired,\n  closeModal: PropTypes.func.isRequired,\n  filesData: PropTypes.instanceOf(Object).isRequired,\n  orientation: PropTypes.number,\n}\n\nFilePreview.defaultProps = {\n  message: '',\n  orientation: 0,\n}\n\nexport default memo(FilePreview)\n","import React, { memo, useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { isIE } from 'react-device-detect'\nimport RecordRTC, { StereoAudioRecorder } from 'recordrtc'\nimport Timer from 'react-compound-timer'\nimport ButtonContainer from '../../ButtonContainer'\nimport './styles.scss'\n\nconst AudioInput = props => {\n  const { handleSubmit, closeModal, isRecording } = props\n  const [stream, setStream] = useState(null)\n  const [recorder, setRecorder] = useState(null)\n  const [recordingFinished, setRecorderFinished] = useState(false)\n  const timer = React.createRef()\n\n  // If timer has reached 60 seconds, it sets recordingFinished to true and this is activated\n  useEffect(() => {\n    if (recordingFinished) {\n      timer.current.stop()\n      recorder.stopRecording()\n      stream.stop()\n    } else if (recorder) {\n      recorder.startRecording()\n    }\n  }, [recordingFinished, recorder, stream, timer])\n\n  // This useEffect handles opening and closing audio stream\n  useEffect(() => {\n    if (isRecording && !isIE) {\n      const openStream = async () => {\n        setStream(\n          await navigator.mediaDevices.getUserMedia({\n            audio: true,\n          })\n        )\n      }\n      if (!stream) {\n        openStream()\n      }\n    }\n    return () => {\n      if (stream) {\n        stream.stop()\n      }\n    }\n  }, [isRecording, stream])\n\n  // This useEffect handles creating and setting recorder after stream is set\n  useEffect(() => {\n    if (stream) {\n      setRecorder(\n        new RecordRTC(stream, {\n          type: 'audio',\n          mimeType: 'audio/wav',\n          recorderType: StereoAudioRecorder,\n        })\n      )\n    }\n  }, [stream])\n\n  // If recording is finished (timer is at 60 secs) recorder is already stopped.\n  const endRecording = () => {\n    if (recordingFinished) {\n      const blob = recorder.getBlob()\n      const file = new File([blob], 'audio.wav')\n      handleSubmit(file)\n      closeModal()\n    } else if (recorder) {\n      recorder.stopRecording(() => {\n        const blob = recorder.getBlob()\n        const file = new File([blob], 'audio.wav')\n        handleSubmit(file)\n        closeModal()\n      })\n    } else {\n      closeModal()\n    }\n  }\n\n  // If recording is finished (timer is at 60 secs) recorder is already stopped.\n  const cancelRecording = () => {\n    if (recordingFinished) {\n      closeModal()\n    } else if (recorder) {\n      recorder.stopRecording(() => {\n        closeModal()\n      })\n    } else {\n      closeModal()\n    }\n  }\n\n  return (\n    <main className=\"audio-recording-content\">\n      {isIE && (\n        <div className=\"IE-info-container\">\n          <p className=\"IE-info-text\">\n            Interner Explorer -selaimella ei valitettavasti voi lähettää\n            ääniviestejä.\n          </p>\n          <ButtonContainer\n            onClick={closeModal}\n            className=\"button IE-close-button\"\n          >\n            Sulje\n          </ButtonContainer>\n        </div>\n      )}\n      {!recorder && !isIE && (\n        <div className=\"audio-description-text\">\n          <p>Odottaa mikrofonia...</p>\n        </div>\n      )}\n      {recorder && (\n        <div>\n          <div className=\"audio-recording-info\">\n            <Timer\n              ref={timer}\n              lastUnit=\"s\"\n              checkpoints={[\n                { time: 60000, callback: () => setRecorderFinished(true) },\n              ]}\n            >\n              <div className=\"audio-timer\">\n                <Timer.Seconds />\n              </div>\n            </Timer>\n            <span\n              className={recordingFinished ? 'pulse-done' : 'pulse-recording'}\n            />\n          </div>\n          <p className=\"audio-description-text\">\n            {recordingFinished ? 'Äänitys valmis' : 'Äänitys käynnissä...'}\n          </p>\n          <div className=\"audio-control-buttons\">\n            <ButtonContainer\n              className=\"button cancel-button\"\n              onClick={cancelRecording}\n            >\n              peruuta\n            </ButtonContainer>\n            <ButtonContainer\n              className=\"button save-button\"\n              onClick={endRecording}\n            >\n              lähetä\n            </ButtonContainer>\n          </div>\n        </div>\n      )}\n    </main>\n  )\n}\n\nAudioInput.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n  closeModal: PropTypes.func.isRequired,\n  isRecording: PropTypes.bool.isRequired,\n}\n\nexport default memo(AudioInput)\n","import React, { useState, memo } from 'react'\nimport TextareaAutosize from 'react-autosize-textarea'\nimport PropTypes from 'prop-types'\nimport { isBrowser } from 'react-device-detect'\nimport EXIF from 'exif-js'\nimport ButtonContainer from '../../ButtonContainer'\nimport ModalContainer from '../../ModalContainer'\nimport FilePreview from '../FilePreview'\nimport AudioInput from '../AudioInput'\nimport BouncingLoader from '../../BouncingLoader'\nimport './styles.scss'\n\nconst UserInput = props => {\n  const { createPost, channel, uploadFile, filesData } = props\n  const [message, setMessage] = useState('')\n  const [fileId, setFileId] = useState('')\n  const [modalIsOpen, setModalIsOpen] = useState(false)\n  const [errorModalIsOpen, setErrorModalIsOpen] = useState(false)\n  const [orientation, setOrientation] = useState(0)\n\n  const getExifData = file => {\n    // get Exif data for file if it exists.\n    // Exif data is used to rotate the image to the correct orientation.\n    if (file && isBrowser) {\n      EXIF.getData(file, () => {\n        const exifData = EXIF.pretty(file)\n        if (exifData) {\n          const orientationTag = EXIF.getTag(file, 'Orientation')\n          setOrientation(orientationTag)\n        }\n      })\n    }\n  }\n  const [isRecording, setIsRecording] = useState(false)\n  const [isUploading, setIsUploading] = useState(false)\n\n  const closeModal = () => {\n    setModalIsOpen(false)\n    setErrorModalIsOpen(false)\n    setFileId('')\n    setOrientation(0)\n    setMessage('')\n    setIsRecording(false)\n  }\n  const fileInput = React.createRef()\n\n  const isEmpty = str => {\n    return str.replace(/^\\s+|\\s+$/g, '').length === 0\n  }\n  const handleSubmit = async (e, msg) => {\n    e.preventDefault()\n    let messageToUse = msg\n    if (msg === '' || msg === undefined) {\n      messageToUse = message\n    }\n    const post = {\n      channel_id: channel.id,\n      message: messageToUse,\n      file_ids: fileId !== '' ? [fileId] : null,\n    }\n    if ((message && !isEmpty(message)) || fileId !== '') {\n      await createPost(post)\n      setFileId('')\n    }\n    setMessage('')\n    setModalIsOpen(false)\n  }\n\n  const handleChange = e => {\n    setMessage(e.target.value)\n  }\n\n  const addFile = async e => {\n    setIsUploading(true)\n    const channelId = channel.id\n    const data = new FormData()\n    getExifData(e.target.files[0])\n    const file = e.target.files[0]\n    e.target.value = ''\n    data.append('files', file)\n    data.append('channel_id', channelId)\n    if (file.size > 50000000) {\n      setErrorModalIsOpen(true)\n    } else {\n      setModalIsOpen(true)\n      const res = await uploadFile(channelId, null, null, data)\n      const id =\n        res && res.data && res.data.file_infos && res.data.file_infos[0].id\n      setFileId(id)\n      setIsUploading(false)\n    }\n  }\n\n  const startSendingAudio = () => {\n    setIsRecording(true)\n    setModalIsOpen(true)\n  }\n\n  const handleAudioSubmit = async audioFile => {\n    setIsRecording(false)\n    const data = new FormData()\n    data.append('files', audioFile)\n    data.append('channel_id', channel.id)\n    const res = await uploadFile(channel.id, null, null, data)\n    const id = res && res.data.file_infos[0].id\n    const post = {\n      channel_id: channel.id,\n      message: '',\n      file_ids: [id],\n    }\n    await createPost(post)\n  }\n\n  const clickFileInput = () => {\n    fileInput.current.click()\n  }\n\n  return (\n    <div className=\"chat-user-input-wrapper\">\n      <form onSubmit={handleSubmit} className=\"chat-user-input-content\">\n        <TextareaAutosize\n          className=\"chat-user-input-text-field\"\n          id=\"message\"\n          type=\"text\"\n          value={message}\n          onChange={handleChange}\n          placeholder=\"Kirjoita viesti\"\n          maxRows={3}\n          rows={1}\n          aria-label=\"Kirjoita viesti\"\n        />\n        <input\n          style={{ display: 'none' }}\n          type=\"file\"\n          accept=\"image/*,video/*,video/mp4\" // video/mp4 is for safari\n          onChange={addFile}\n          ref={fileInput}\n          aria-label=\"Liitä tiedosto\"\n        />\n        <div className=\"userinput-buttons\">\n          <ButtonContainer\n            className=\"icon-btn\"\n            onClick={clickFileInput}\n            label=\"Lähetä kuva tai video\"\n          >\n            <div className=\"send-image-attachment-button\" />\n          </ButtonContainer>\n          <ButtonContainer\n            className=\"icon-btn\"\n            onClick={startSendingAudio}\n            label=\"Lähetä ääniviesti\"\n          >\n            <div className=\"send-voice-attachment-button\" />\n          </ButtonContainer>\n          <button\n            type=\"submit\"\n            className=\"send-message-button\"\n            tabIndex=\"0\"\n            aria-label=\"Lähetä viesti\"\n          >\n            {}\n          </button>\n        </div>\n      </form>\n      <ModalContainer\n        modalIsOpen={modalIsOpen}\n        closeModal={closeModal}\n        label={!isRecording ? 'Esikatselu' : 'Ääniviestin lähetys'}\n        isLong\n        className=\"image-preview-modal\"\n        overlayClassName=\"image-preview-modal-overlay\"\n      >\n        {!isRecording && isUploading && !errorModalIsOpen && (\n          <div>\n            <ButtonContainer\n              className=\"icon-btn go-back-button image-max-size-exceeded\"\n              onClick={closeModal}\n              label=\"Sulje\"\n            >\n              {' '}\n            </ButtonContainer>\n            <BouncingLoader />\n            <p className=\"uploading-text\">Ladataan...</p>\n          </div>\n        )}\n        {!isRecording && !isUploading && (\n          <FilePreview\n            handleSubmit={handleSubmit}\n            message={message}\n            handleChange={setMessage}\n            fileId={fileId}\n            closeModal={closeModal}\n            filesData={filesData}\n            orientation={orientation}\n            isUploading={isUploading}\n          />\n        )}\n        {isRecording && (\n          <AudioInput\n            handleSubmit={handleAudioSubmit}\n            closeModal={closeModal}\n            isRecording={isRecording}\n          />\n        )}\n      </ModalContainer>\n      <ModalContainer\n        modalIsOpen={errorModalIsOpen}\n        label=\"Tiedosto on liian suuri\"\n        closeModal={closeModal}\n      >\n        <div>\n          <p className=\"image-max-size-exceeded-text\">\n            Tiedosto on liian suuri!\n          </p>\n          <ButtonContainer\n            className=\"icon-btn go-back-button image-max-size-exceeded\"\n            onClick={closeModal}\n            label=\"Sulje\"\n          />\n        </div>\n      </ModalContainer>\n    </div>\n  )\n}\n\nUserInput.propTypes = {\n  createPost: PropTypes.func.isRequired,\n  uploadFile: PropTypes.func.isRequired,\n  channel: PropTypes.instanceOf(Object).isRequired,\n  filesData: PropTypes.instanceOf(Object).isRequired,\n}\n\nexport default memo(UserInput)\n","import React, { memo } from 'react'\nimport propTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\nimport { isSystemAdmin, isTeamAdmin } from '../../../../utils/userIsAdmin'\nimport './styles.scss'\n\nconst Member = props => {\n  const {\n    userId,\n    nickName,\n    currentUserId,\n    profiles,\n    teams,\n    iconMemberStatus,\n  } = props\n  const userFirstLetter = nickName[0]\n  const getUsername = () => {\n    return profiles && profiles[userId] && profiles[userId].username\n  }\n\n  if (isSystemAdmin(userId, profiles) || isTeamAdmin(userId, teams)) {\n    return <></>\n  }\n  return (\n    <div className=\"chat-header-members-sider-member\">\n      {currentUserId !== userId && (\n        <Link to={`/profile/${getUsername()}`} className=\"channel-name-link\">\n          <i aria-hidden=\"true\" title={userFirstLetter} />\n          <div\n            className=\"label chat-message-sender-icon\"\n            style={{\n              backgroundImage: `url(\n                  ${\n                    process.env.REACT_APP_MATTERMOST_URL\n                  }/api/v4/users/${userId}/image?${Date.now()}\n                )`,\n            }}\n          />\n        </Link>\n      )}\n      {currentUserId === userId && (\n        <div>\n          <i aria-hidden=\"true\" title={userFirstLetter} />\n          <div\n            className=\"label chat-message-sender-icon\"\n            style={{\n              backgroundImage: `url(\n                  ${\n                    process.env.REACT_APP_MATTERMOST_URL\n                  }/api/v4/users/${userId}/image?${Date.now()}\n                )`,\n            }}\n          />\n        </div>\n      )}\n      <span className={iconMemberStatus} />\n      {currentUserId !== userId && (\n        <Link\n          className=\"members-sider-profile-link chat-member-nickname\"\n          to={`/profile/${getUsername()}`}\n        >\n          {nickName}\n        </Link>\n      )}\n      {currentUserId === userId && (\n        <>\n          <span className=\"chat-member-nickname\">{nickName}</span>\n          <span className=\"chat-header-current-user-label\">(sinä)</span>\n        </>\n      )}\n    </div>\n  )\n}\n\nMember.propTypes = {\n  userId: propTypes.string.isRequired,\n  nickName: propTypes.string.isRequired,\n  currentUserId: propTypes.string.isRequired,\n  profiles: propTypes.instanceOf(Object).isRequired,\n  teams: propTypes.instanceOf(Object).isRequired,\n  iconMemberStatus: propTypes.string.isRequired,\n}\n\nexport default memo(Member)\n","import React, { memo } from 'react'\nimport propTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\nimport ButtonContainer from '../../../ButtonContainer'\nimport ModalContainer from '../../../ModalContainer'\nimport './styles.scss'\n\nconst LeaveChannelModal = props => {\n  const { showConfirmation, closeModal, handleLeaveChannel } = props\n  return (\n    <div className=\"leave-channel-modal-wrapper\">\n      <ModalContainer\n        modalIsOpen={showConfirmation}\n        closeModal={closeModal}\n        label=\"leaveChannelModal\"\n      >\n        <h2>Haluatko varmasti poistua ryhmästä?</h2>\n        <ButtonContainer\n          onClick={closeModal}\n          className=\"cancel-leave-channel-button\"\n        >\n          En\n        </ButtonContainer>\n        <Link className=\"leave-channel-link\" to=\"/\">\n          <ButtonContainer\n            onClick={handleLeaveChannel}\n            className=\"confirm-leave-channel-button\"\n          >\n            Kyllä\n          </ButtonContainer>\n        </Link>\n      </ModalContainer>\n    </div>\n  )\n}\n\nLeaveChannelModal.propTypes = {\n  showConfirmation: propTypes.bool.isRequired,\n  closeModal: propTypes.func.isRequired,\n  handleLeaveChannel: propTypes.func.isRequired,\n}\n\nexport default memo(LeaveChannelModal)\n","import { useEffect } from 'react'\n\nconst useOutsideClick = (ref, callback) => {\n  const handleClick = e => {\n    if (ref.current && !ref.current.contains(e.target)) {\n      callback()\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener('click', handleClick)\n\n    return () => {\n      document.removeEventListener('click', handleClick)\n    }\n  })\n}\n\nexport default useOutsideClick\n","import React, { useState, memo, useRef } from 'react'\nimport propTypes from 'prop-types'\nimport './styles.scss'\nimport Member from './Member'\nimport ButtonContainer from '../../ButtonContainer'\nimport LeaveChannelModal from './LeaveChannelModal'\nimport useOutsideClick from '../../../hooks/useOutsideClick'\n\nconst MembersSider = props => {\n  const {\n    members,\n    profiles,\n    channel,\n    teams,\n    getNickNamebyId,\n    getStatusById,\n    currentUserId,\n    handleLeaveChannel,\n    toggleSiderClosedIfOpen,\n  } = props\n\n  const [showConfirmation, setShowConfirmation] = useState(false)\n\n  const getIconMemberStatus = userId =>\n    `chat-header-${getStatusById(userId)}-status-icon`\n\n  const openModal = () => setShowConfirmation(true)\n  const closeModal = () => setShowConfirmation(false)\n\n  const ref = useRef()\n\n  useOutsideClick(ref, () => {\n    toggleSiderClosedIfOpen()\n  })\n\n  if (channel.name === 'town-square') {\n    return (\n      <div className=\"chat-header-members-sider\" id=\"members-sider\" ref={ref}>\n        <div className=\"chat-header-members-sider-content\">\n          <p>Tässä ryhmässä voit jutella kaikkien muiden käyttäjien kanssa.</p>\n          <p>Ryhmä on auki arkisin klo 9-21.</p>\n          <p>Valvojat ovat ryhmässä arkisin klo 9-17.</p>\n          <p>\n            Kaikki käyttäjät kuuluvat tähän ryhmään, joten ryhmään lähetetyt\n            viestit näkyvät kaikille.\n          </p>\n          <p>\n            Jos haluat lähettää valvojalle viestin, jota muut eivät näe, voit\n            tehdä sen botin kautta.\n          </p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"chat-header-members-sider\" id=\"members-sider\" ref={ref}>\n      <div className=\"chat-header-members-sider-content\">\n        <h4 className=\"chat-header-members-sider-title \">Jäsenet</h4>\n        {members.map(member => (\n          <Member\n            key={member.user_id}\n            userId={member.user_id}\n            profiles={profiles}\n            teams={teams}\n            nickName={getNickNamebyId(member.user_id)}\n            currentUserId={currentUserId}\n            iconMemberStatus={getIconMemberStatus(member.user_id)}\n          />\n        ))}\n        <ButtonContainer\n          onClick={openModal}\n          className=\"members-sider-leave-group-button\"\n        >\n          Poistu ryhmästä\n        </ButtonContainer>\n        <LeaveChannelModal\n          handleLeaveChannel={handleLeaveChannel}\n          closeModal={closeModal}\n          showConfirmation={showConfirmation}\n        />\n      </div>\n    </div>\n  )\n}\n\nMembersSider.propTypes = {\n  members: propTypes.instanceOf(Object).isRequired,\n  profiles: propTypes.instanceOf(Object).isRequired,\n  teams: propTypes.instanceOf(Object).isRequired,\n  channel: propTypes.instanceOf(Object).isRequired,\n  getNickNamebyId: propTypes.func.isRequired,\n  getStatusById: propTypes.func.isRequired,\n  currentUserId: propTypes.string.isRequired,\n  handleLeaveChannel: propTypes.func.isRequired,\n  toggleSiderClosedIfOpen: propTypes.func.isRequired,\n}\n\nexport default memo(MembersSider)\n","import React, { useEffect, useState, memo } from 'react'\nimport PropTypes from 'prop-types'\nimport MessageList from './MessageList'\nimport ChatHeader from './ChatHeader'\nimport UserInput from './UserInput'\nimport MembersSider from './MembersSider'\nimport ModalContainer from '../ModalContainer'\nimport ButtonContainer from '../ButtonContainer'\nimport './styles.scss'\n\nconst Chat = props => {\n  const {\n    channel,\n    teams,\n    posts,\n    profiles,\n    createPost,\n    uploadFile,\n    getFilesForPost,\n    currentUserId,\n    profilesInChannel,\n    membersInChannel,\n    handleLeaveChannel,\n    statuses,\n    handleLogout,\n    sendEmail,\n    location,\n    pinPost,\n    filesData,\n    mmUser,\n    dividerId,\n    lastViewedAt,\n  } = props\n\n  const [currentUser, setCurrentUser] = useState(null)\n\n  useEffect(() => {\n    setCurrentUser(\n      membersInChannel.find(member => member.user_id === currentUserId)\n    )\n  }, [currentUser, currentUserId, membersInChannel])\n\n  const [showSider, setShowSider] = useState(false)\n  const [pinPostModalIsOpen, setPinPostModalIsOpen] = useState(false)\n  const [afterPinModal, setAfterPinModal] = useState(false)\n  const [pinPostId, setPinPostId] = useState(null)\n  const [pinPostSenderData, setPinPostSenderData] = useState(null)\n  const [pinPostText, setPinPostText] = useState(null)\n  const directChannel = channel.type === 'D'\n  const [membersToShow, setMembersToShow] = useState([])\n\n  useEffect(() => {\n    const getMembersToShow = () => {\n      if (!directChannel) {\n        const activeUserIds = profilesInChannel.map(profile => profile.id)\n        const members = Object.values(membersInChannel).filter(member =>\n          activeUserIds.includes(member.user_id)\n        )\n        setMembersToShow(members)\n      } else {\n        setMembersToShow(membersInChannel)\n      }\n    }\n    getMembersToShow()\n  }, [membersInChannel, profilesInChannel, directChannel])\n\n  const toggleSider = () => setShowSider(!showSider)\n\n  const toggleSiderClosedIfOpen = () => {\n    if (showSider) {\n      setShowSider(false)\n    }\n  }\n\n  const getNicknameById = id => {\n    const user = Object.values(profiles).find(profile => profile.id === id)\n    let visibleName = 'Käyttäjä'\n    if (user && user.delete_at === 0 && user.position !== 'deleted') {\n      if (user && user.nickname) {\n        visibleName = user.nickname\n      }\n      return visibleName\n    }\n    return 'Poistunut käyttäjä'\n  }\n\n  const getUserDataById = id =>\n    Object.values(profiles).find(profile => profile.id === id)\n\n  const getStatusById = id => {\n    const status = id ? statuses[id] : ''\n    return status\n  }\n\n  const getOtherUserName = () => {\n    if (directChannel) {\n      const otherUser = membersInChannel.find(\n        member => member.user_id !== currentUserId\n      )\n      if (otherUser) {\n        return (\n          <>\n            <img\n              className=\"friend-icon\"\n              src={`${process.env.REACT_APP_MATTERMOST_URL}/api/v4/users/${otherUser.user_id}/image`}\n              alt=\"Profiilikuva\"\n            />\n            <span className=\"direct-chat-header-name\">\n              {getNicknameById(otherUser.user_id)}\n            </span>\n          </>\n        )\n      }\n    }\n    return null\n  }\n\n  const getOtherUser = () => {\n    if (directChannel) {\n      const friend = membersInChannel.find(\n        member => member.user_id !== currentUserId\n      )\n      const mmid = friend && friend.user_id\n      const mmProfile = Object.values(profiles).find(\n        profile => profile.id === mmid\n      )\n      return mmProfile && mmProfile.username\n    }\n    return null\n  }\n\n  const getDeleted = () => {\n    if (directChannel) {\n      const friend = membersToShow.find(\n        member => member.user_id !== currentUserId\n      )\n      const mmid = friend && friend.user_id\n      const mmProfile = Object.values(profiles).find(\n        profile => profile.id === mmid\n      )\n      if (\n        mmProfile &&\n        (mmProfile.delete_at !== 0 || mmProfile.position === 'deleted')\n      )\n        return true\n    }\n    return false\n  }\n\n  const handlePinPost = (id, senderId, text) => {\n    setPinPostSenderData(getUserDataById(senderId))\n    setPinPostText(text)\n    setPinPostModalIsOpen(true)\n    setPinPostId(id)\n  }\n\n  const closePinPostModal = () => {\n    setPinPostSenderData(getUserDataById(null))\n    setPinPostText(null)\n    setPinPostModalIsOpen(false)\n    setPinPostId(null)\n  }\n\n  const completePinPost = id => {\n    const currentUserData = getUserDataById(currentUserId)\n    sendEmail({\n      name: `${currentUserData.nickname}(${currentUserData.username})`,\n      email: currentUserData.email,\n      message: `Käyttäjä ${pinPostSenderData.nickname}(${pinPostSenderData.username}) lähetti seuraavan viestin ryhmään ${channel.display_name}: ${pinPostText}`,\n      type: 'reported post',\n    })\n    pinPost(id)\n    closePinPostModal()\n    setAfterPinModal(true)\n  }\n\n  const closeAfterPinModal = () => {\n    setAfterPinModal(false)\n  }\n\n  return (\n    <main className=\"chat-wrapper\" id=\"chat\">\n      <ChatHeader\n        channel={channel}\n        toggleSider={toggleSider}\n        otherUser={getOtherUserName()}\n        otherUserName={getOtherUser()}\n        direct={directChannel}\n        handleLogout={handleLogout}\n        location={location}\n        deleted={getDeleted()}\n        mmUser={mmUser}\n      />\n      <MessageList\n        posts={posts}\n        getFilesForPost={getFilesForPost}\n        currentUserId={currentUserId}\n        getNickNamebyId={getNicknameById}\n        directChannel={directChannel}\n        channelId={channel.id}\n        profiles={profiles}\n        getStatusById={getStatusById}\n        pinPost={handlePinPost}\n        filesData={filesData}\n        teams={teams}\n        location={location}\n        dividerId={dividerId}\n        lastViewedAt={lastViewedAt}\n      />\n      {channel.id && (\n        <UserInput\n          channel={channel}\n          createPost={createPost}\n          uploadFile={uploadFile}\n          currentUserId={currentUserId}\n          filesData={filesData}\n        />\n      )}\n      {channel.id && getDeleted() && directChannel && (\n        <div className=\"inactive-userinput-field\">\n          <p>Et voi lähettää viestiä poistuneelle käyttäjälle.</p>\n        </div>\n      )}\n      {showSider && !directChannel && (\n        <MembersSider\n          members={membersToShow}\n          profiles={profiles}\n          currentUserId={currentUserId}\n          getNickNamebyId={getNicknameById}\n          handleLeaveChannel={handleLeaveChannel}\n          getStatusById={getStatusById}\n          toggleSiderClosedIfOpen={toggleSiderClosedIfOpen}\n          channel={channel}\n          teams={teams}\n        />\n      )}\n      <ModalContainer\n        modalIsOpen={pinPostModalIsOpen}\n        closeModal={closePinPostModal}\n        label=\"report-message-modal\"\n      >\n        <h3>Haluatko ilmoittaa tämän viestin asiattomaksi?</h3>\n        <div className=\"report-message-buttons-wrapper\">\n          <ButtonContainer\n            secondary\n            onClick={() => closePinPostModal()}\n            className=\"report-message-button\"\n          >\n            <p>En</p>\n          </ButtonContainer>\n          <ButtonContainer\n            onClick={() => completePinPost(pinPostId)}\n            className=\"report-message-button\"\n          >\n            <p>Kyllä</p>\n          </ButtonContainer>\n        </div>\n      </ModalContainer>\n      <ModalContainer\n        modalIsOpen={afterPinModal}\n        closeModal={closeAfterPinModal}\n        label=\"report-message-finish-modal\"\n      >\n        <h3>Viesti ilmoitettu asiattomaksi.</h3>\n        <ButtonContainer\n          className=\"report-message-finish-button\"\n          onClick={closeAfterPinModal}\n        >\n          Valmis\n        </ButtonContainer>\n      </ModalContainer>\n    </main>\n  )\n}\n\nChat.propTypes = {\n  channel: PropTypes.instanceOf(Object).isRequired,\n  teams: PropTypes.instanceOf(Object).isRequired,\n  posts: PropTypes.instanceOf(Array).isRequired,\n  profiles: PropTypes.instanceOf(Object).isRequired,\n  membersInChannel: PropTypes.arrayOf(PropTypes.instanceOf(Object)),\n  profilesInChannel: PropTypes.instanceOf(Array).isRequired,\n  createPost: PropTypes.func.isRequired,\n  getFilesForPost: PropTypes.func.isRequired,\n  uploadFile: PropTypes.func.isRequired,\n  currentUserId: PropTypes.string.isRequired,\n  handleLeaveChannel: PropTypes.func.isRequired,\n  statuses: PropTypes.instanceOf(Object).isRequired,\n  handleLogout: PropTypes.func.isRequired,\n  sendEmail: PropTypes.func.isRequired,\n  location: PropTypes.instanceOf(Object).isRequired,\n  pinPost: PropTypes.func.isRequired,\n  filesData: PropTypes.instanceOf(Object).isRequired,\n  mmUser: PropTypes.instanceOf(Object).isRequired,\n  dividerId: PropTypes.string,\n  lastViewedAt: PropTypes.number.isRequired,\n}\n\nChat.defaultProps = {\n  membersInChannel: [],\n  dividerId: null,\n}\n\nexport default memo(Chat)\n","import React, { useEffect, useState, memo } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport {\n  getPosts as getPostsAction,\n  createPost as createPostAction,\n  pinPost as pinPostAction,\n  getPostsAfter as getPostsAfterAction,\n} from 'mattermost-redux/actions/posts'\nimport {\n  uploadFile as uploadFileAction,\n  getFilesForPost as getFilesForPostAction,\n} from 'mattermost-redux/actions/files'\nimport {\n  getProfiles as getProfilesAction,\n  getProfilesInChannel as getProfilesInChannelAction,\n  logout as matterMostLogoutAction,\n} from 'mattermost-redux/actions/users'\nimport {\n  removeChannelMember as removeChannelMemberAction,\n  getChannelMembers as getChannelMembersAction,\n  fetchMyChannelsAndMembers as fetchChannelsAndMembersAction,\n  viewChannel as viewChannelAction,\n} from 'mattermost-redux/actions/channels'\nimport PropTypes from 'prop-types'\nimport { getUserByUsername, userLogout, sendEmail } from '../api/user/user'\nimport { removeUserInterestsFromChannelPurpose } from '../api/channels/channels'\nimport Chat from '../components/Chat'\nimport logoutHandler from '../utils/userLogout'\nimport { isTeamAdmin, isSystemAdmin } from '../utils/userIsAdmin'\n\nconst ChatContainer = props => {\n  const {\n    posts,\n    profiles,\n    createPost,\n    getProfiles,\n    currentUserId,\n    channels,\n    teams,\n    fetchMyChannelsAndMembers,\n    currentChannelId,\n    getPosts,\n    getChannelMembers,\n    removeChannelMember,\n    viewChannel,\n    uploadFile,\n    getFilesForPost,\n    statuses,\n    matterMostLogout,\n    location,\n    pinPost,\n    files,\n    user,\n    getPostsAfter,\n  } = props\n\n  // Sort and filter posts, posts dependent effect\n  const [currentPosts, setCurrentPosts] = useState([])\n  const [currentMembers, setCurrentMembers] = useState([])\n  const currentChannel = channels[currentChannelId]\n  const [filteredOrder, setFilteredOrder] = useState([])\n  const [lastViewedAt, setLastViewedAt] = useState(0)\n  const [activeMemberMmProfiles, setActiveMemberMmProfiles] = useState([])\n\n  const currentUser =\n    location && location.state ? location.state.currentUser : null\n\n  // Get current channel members\n  useEffect(() => {\n    if (currentChannelId) {\n      getChannelMembers(currentChannelId).then(data =>\n        setCurrentMembers(data.data)\n      )\n    }\n  }, [channels, currentChannelId, getChannelMembers])\n\n  useEffect(() => {\n    const getCurrentMemberData = async () => {\n      const currentMember = await currentMembers.find(\n        member => member.user_id === currentUserId\n      )\n      if (currentMember) setLastViewedAt(currentMember.last_viewed_at)\n    }\n    if (currentMembers) getCurrentMemberData()\n  }, [currentMembers, setLastViewedAt, currentUserId])\n\n  // fetches posts sent after last viewed time and filters and orders them\n  useEffect(() => {\n    const getPostsAfterLastViewed = async () => {\n      if (currentUser) {\n        const lastViewedPost = Object.values(posts).find(\n          p => p.create_at === currentUser.last_viewed_at\n        )\n        if (lastViewedPost) {\n          const res = await getPostsAfter(currentChannelId, lastViewedPost.id)\n          const filtered = Object.values(res.data.posts).filter(\n            p => p.type === ''\n          )\n          const filteredIds = Object.values(filtered).map(p => p.id)\n          const newOrder = res.data.order.filter(id => filteredIds.includes(id))\n          setFilteredOrder(newOrder)\n        }\n      }\n    }\n    getPostsAfterLastViewed()\n  }, [currentChannelId, getPostsAfter, currentUser])\n\n  // Get user profiles and current user's teams at initial render\n  useEffect(() => {\n    getProfiles()\n  }, [getProfiles])\n\n  // Get team related channels and members\n  useEffect(() => {\n    const { currentTeamId } = teams\n    if (currentTeamId) {\n      fetchMyChannelsAndMembers(currentTeamId)\n    }\n  }, [teams, fetchMyChannelsAndMembers])\n\n  // Get posts for current channel and view channel\n  useEffect(() => {\n    if (currentChannelId) {\n      // get maximum of 400 posts at a time\n      getPosts(currentChannelId, 0, 100)\n      viewChannel(currentChannelId)\n    }\n  }, [teams, posts, getPosts, viewChannel, currentChannelId])\n\n  // Remove current user from channel\n  const handleLeaveChannel = async () => {\n    try {\n      await removeUserInterestsFromChannelPurpose(\n        localStorage.getItem('authToken'),\n        currentChannelId\n      )\n      removeChannelMember(currentChannelId, currentUserId)\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error)\n    }\n  }\n\n  // Filter and sort posts after fetching\n  useEffect(() => {\n    // Filter posts by channel id\n    const filterPostsByChannelId = channelId => {\n      const filtered = Object.values(posts).filter(\n        post => post.channel_id === channelId\n      )\n      return filtered\n    }\n    // Sort posts based on created timestamp\n    const sortPosts = allPosts => {\n      const postsArr = Object.values(allPosts)\n      postsArr.sort((a, b) => a.create_at - b.create_at)\n      return postsArr\n    }\n    if (currentChannelId) {\n      const filtered = filterPostsByChannelId(currentChannelId)\n      const sorted = sortPosts(filtered)\n      setCurrentPosts(sorted)\n    }\n  }, [posts, teams, currentChannelId])\n\n  const handleLogout = () => logoutHandler(userLogout, matterMostLogout)\n\n  useEffect(() => {\n    const getActiveMattermostProfiles = () => {\n      const activeProfilesArr =\n        currentMembers &&\n        currentMembers\n          .map(member => profiles[member.user_id])\n          .filter(\n            member =>\n              member &&\n              member.delete_at === 0 &&\n              member.position !== 'deleted' &&\n              !isSystemAdmin(member.id, profiles) &&\n              !isTeamAdmin(member.id, teams)\n          )\n      setActiveMemberMmProfiles(activeProfilesArr)\n    }\n    getActiveMattermostProfiles()\n  }, [currentMembers, profiles, setActiveMemberMmProfiles, teams])\n\n  return (\n    <>\n      {currentChannel && (\n        <Chat\n          channel={currentChannel}\n          posts={currentPosts}\n          profiles={profiles}\n          teams={teams}\n          createPost={createPost}\n          getFilesForPost={getFilesForPost}\n          uploadFile={uploadFile}\n          currentUserId={currentUserId}\n          profilesInChannel={activeMemberMmProfiles}\n          membersInChannel={currentMembers}\n          handleLeaveChannel={handleLeaveChannel}\n          statuses={statuses}\n          getUserByUsername={getUserByUsername}\n          sendEmail={sendEmail}\n          handleLogout={handleLogout}\n          location={location}\n          pinPost={pinPost}\n          filesData={files}\n          mmUser={user}\n          getPostsAfter={getPostsAfter}\n          dividerId={filteredOrder && filteredOrder[filteredOrder.length - 1]}\n          lastViewedAt={lastViewedAt}\n        />\n      )}\n    </>\n  )\n}\n\nChatContainer.propTypes = {\n  posts: PropTypes.instanceOf(Object).isRequired,\n  profiles: PropTypes.instanceOf(Object).isRequired,\n  channels: PropTypes.instanceOf(Object).isRequired,\n  teams: PropTypes.instanceOf(Object).isRequired,\n  getPosts: PropTypes.func.isRequired,\n  createPost: PropTypes.func.isRequired,\n  getFilesForPost: PropTypes.func.isRequired,\n  uploadFile: PropTypes.func.isRequired,\n  getProfiles: PropTypes.func.isRequired,\n  currentUserId: PropTypes.string.isRequired,\n  getChannelMembers: PropTypes.func.isRequired,\n  fetchMyChannelsAndMembers: PropTypes.func.isRequired,\n  currentChannelId: PropTypes.string.isRequired,\n  removeChannelMember: PropTypes.func.isRequired,\n  viewChannel: PropTypes.func.isRequired,\n  statuses: PropTypes.instanceOf(Object).isRequired,\n  matterMostLogout: PropTypes.func.isRequired,\n  location: PropTypes.instanceOf(Object).isRequired,\n  pinPost: PropTypes.func.isRequired,\n  files: PropTypes.instanceOf(Object).isRequired,\n  user: PropTypes.instanceOf(Object).isRequired,\n  getPostsAfter: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const { currentUserId } = state.entities.users\n  const { teams } = state.entities\n  const { channels } = state.entities.channels\n  const user = state.entities.users.profiles[currentUserId]\n  const { profiles } = state.entities.users\n  const { posts } = state.entities.posts\n  const currentChannelId = ownProps.match.params.id\n  const { statuses } = state.entities.users\n  const { files } = state.entities.files\n\n  return {\n    currentUserId,\n    currentChannelId,\n    user,\n    profiles,\n    teams,\n    posts,\n    channels,\n    statuses,\n    files,\n  }\n}\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n      getPosts: getPostsAction,\n      createPost: createPostAction,\n      getFilesForPost: getFilesForPostAction,\n      uploadFile: uploadFileAction,\n      fetchMyChannelsAndMembers: fetchChannelsAndMembersAction,\n      getChannelMembers: getChannelMembersAction,\n      getProfiles: getProfilesAction,\n      getProfilesInChannel: getProfilesInChannelAction,\n      removeChannelMember: removeChannelMemberAction,\n      viewChannel: viewChannelAction,\n      matterMostLogout: matterMostLogoutAction,\n      pinPost: pinPostAction,\n      getPostsAfter: getPostsAfterAction,\n    },\n    dispatch\n  )\n\nconst shouldComponentUpdate = (props, prevProps) => {\n  const { match: pMatch, ...prest } = prevProps\n  const { match, ...rest } = props\n  return JSON.stringify(rest) === JSON.stringify(prest)\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(memo(ChatContainer, shouldComponentUpdate))\n","import React, { memo, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\nimport useForm from 'react-hook-form'\nimport ValidatedInputField from '../ValidatedInputField'\nimport './styles.scss'\n\nconst LogIn = props => {\n  const { handleLogin, user, uuid, error, textToAdd } = props\n  const { register, handleSubmit, errors, setError, clearError } = useForm()\n\n  // Set appropriate error given different errors\n  useEffect(() => {\n    if (user && user.errorMessage === 'Email needs to be verified') {\n      setError('email', 'VerificationError')\n    } else if (user && user.errorMessage) {\n      setError('email', 'loginError')\n      setError('password', 'loginError')\n    }\n  }, [user, setError])\n\n  const onSubmit = async data => {\n    await handleLogin(data.email.trim().toLowerCase(), data.password)\n  }\n\n  return (\n    <main className=\"login-container\">\n      <h1 className=\"main-title\">Kohdataan</h1>\n      {uuid && <p id=\"message-text\">Kiitos sähköpostin vahvistamisesta.</p>}\n      {error && error === 'cookiesNotAccepted' && (\n        <p id=\"message-text\">\n          Jos haluat käyttää Kohdataan-somea, sinun täytyy hyväksyä evästeiden\n          käyttö.\n        </p>\n      )}\n      {textToAdd && <p id=\"message-text\">{textToAdd}</p>}\n      <div className=\"login-fields-container\">\n        <h2 className=\"login-title\">Kirjautuminen</h2>\n        <form\n          className=\"login-input-fields-container\"\n          onSubmit={handleSubmit(onSubmit)}\n        >\n          <div className=\"formfield-container\">\n            <ValidatedInputField\n              label=\"Sähköposti\"\n              name=\"email\"\n              onChange={() => clearError()}\n              ref={register({\n                required: true,\n              })}\n              ariaInvalid={!!errors.email}\n              inputClassName=\"create-account-input-text\"\n              labelClassName={\n                errors.email\n                  ? 'create-account-errors-field'\n                  : 'create-account-input-field'\n              }\n            />\n            <div className=\"error-text\">\n              {errors.email &&\n                errors.email.type === 'required' &&\n                'Kirjoita sähköpostiosoite.'}\n              {errors.email &&\n                errors.email.type === 'loginError' &&\n                'Tarkista, että kirjoitit sähköpostin oikein.'}\n              {errors.email &&\n                errors.email.type === 'VerificationError' &&\n                'Sähköposti pitää varmentaa ennen sisäänkirjautumista.'}\n            </div>\n          </div>\n\n          <div className=\"formfield-container\">\n            <ValidatedInputField\n              label=\"Salasana\"\n              name=\"password\"\n              onChange={() => clearError()}\n              ref={register({\n                required: true,\n              })}\n              type=\"password\"\n              ariaInvalid={!!errors.password}\n              inputClassName=\"create-account-input-text\"\n              labelClassName={\n                errors.password\n                  ? 'create-account-errors-field'\n                  : 'create-account-input-field'\n              }\n            />\n            <div className=\"error-text\">\n              {errors.password &&\n                errors.password.type === 'required' &&\n                'Kirjoita salasana.'}\n              {errors.password &&\n                errors.password.type === 'loginError' &&\n                'Tarkista, että kirjoitit salasanan oikein.'}\n            </div>\n          </div>\n          <button\n            type=\"submit\"\n            className=\"create-account-button\"\n            onKeyPress={handleSubmit(onSubmit)}\n            tabIndex=\"0\"\n          >\n            Kirjaudu\n          </button>\n        </form>\n        <div className=\"login-links-container\">\n          <Link className=\"login-link\" to=\"/reset-password\">\n            Olen unohtanut salasanani.\n          </Link>\n          <Link className=\"login-link\" to=\"/registrationproblem\">\n            Tarvitsen apua kirjautumisessa.\n          </Link>\n          <Link className=\"login-link\" to=\"/createaccount\">\n            Olen uusi käyttäjä ja haluan rekisteröityä.\n          </Link>\n        </div>\n      </div>\n    </main>\n  )\n}\n\nLogIn.propTypes = {\n  uuid: PropTypes.bool,\n  handleLogin: PropTypes.func.isRequired,\n  user: PropTypes.instanceOf(Object).isRequired,\n  error: PropTypes.string,\n  textToAdd: PropTypes.string,\n}\n\nLogIn.defaultProps = {\n  uuid: false,\n  error: null,\n  textToAdd: null,\n}\n\nexport default memo(LogIn)\n","import React, { memo, useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport LogIn from '../components/LogIn'\nimport {\n  userLogin as userLoginAction,\n  addUserToState as addUserToStateAction,\n} from '../store/user/userAction'\nimport * as API from '../api/user/user'\n\nconst LogInContainer = props => {\n  const {\n    match: {\n      params: { uuid },\n    },\n    userLogin,\n    addUserToState,\n    user,\n    history,\n  } = props\n\n  const [uuidValid, setUuidValid] = useState(false)\n  const [error, setError] = useState(null)\n\n  useEffect(() => {\n    document.body.className = 'create-account-body'\n    return () => {\n      document.body.className = ''\n    }\n  })\n\n  useEffect(() => {\n    if (localStorage.getItem('authToken')) {\n      if (user.profileReady) {\n        history.push('/')\n      } else {\n        history.push('/registration/info')\n      }\n    } else if (uuid) {\n      API.verifyEmail({ uuid }).then(response => {\n        if (response.success) {\n          setUuidValid(true)\n        } else {\n          setUuidValid(false)\n        }\n      })\n    }\n  }, [user, history, uuid])\n\n  const handleLogin = async (email, password) => {\n    if (document.cookie.includes('CookieConsent=true')) {\n      const userData = { email, password }\n      await userLogin(userData)\n      await addUserToState()\n    } else {\n      setError('cookiesNotAccepted')\n    }\n  }\n\n  return (\n    <LogIn\n      handleLogin={handleLogin}\n      user={user}\n      uuid={uuidValid}\n      error={error}\n      textToAdd={history.location.state && history.location.state.textToAdd}\n    />\n  )\n}\n\nconst shouldComponentUpdate = (props, prevProps) => {\n  const { match: pMatch, ...prest } = prevProps\n  const { match, ...rest } = props\n  return JSON.stringify(rest) === JSON.stringify(prest)\n}\n\nLogInContainer.propTypes = {\n  match: PropTypes.instanceOf(Object),\n  userLogin: PropTypes.func.isRequired,\n  addUserToState: PropTypes.func.isRequired,\n  user: PropTypes.instanceOf(Object).isRequired,\n  history: PropTypes.instanceOf(Object).isRequired,\n  textToAdd: PropTypes.string,\n}\n\nLogInContainer.defaultProps = {\n  match: null,\n  textToAdd: null,\n}\n\nconst mapStateToProps = state => {\n  const { user } = state\n  return {\n    user,\n  }\n}\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n      userLogin: userLoginAction,\n      addUserToState: addUserToStateAction,\n    },\n    dispatch\n  )\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(memo(LogInContainer, shouldComponentUpdate))\n","import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport ButtonContainer from '../ButtonContainer'\nimport './styles.scss'\n\nconst PrivacyPolicy = ({ closeModal }) => {\n  return (\n    <div className=\"privacy-policy-modal-container\">\n      <div className=\"privacy-policy-modal-content\">\n        <div className=\"privacy-policy-header-content\">\n          <h1 className=\"privacy-policy-header\">Tietosuoja&shy;seloste</h1>\n          <ButtonContainer\n            className=\"privacy-policy-icon-btn\"\n            onClick={closeModal}\n            label=\"Sulje\"\n          >\n            <div className=\"go-back-button\" />\n          </ButtonContainer>\n        </div>\n        <p className=\"bold-text\">(voimassa 27.4.2020 alkaen)</p>\n        <div className=\"service-info-content\">\n          <p>\n            Tämä on <span className=\"uppercase-text\">Kohdataan</span>\n            -palvelun tietosuojaseloste. Tietosuojaselosteessa kerrotaan, mitä\n            henkilötietoja palvelussa käyttäjistä kerätään ja mitä\n            henkilötiedoilla tehdään.\n          </p>\n          <ol className=\"service-info-list\">\n            <li>\n              <span className=\"service-info-list-item\">Rekisterinpitäjä</span>\n              <div className=\"list-block-item\">\n                Kehitysvammaliitto ry\n                <br />\n                Linnoitustie 2 B\n                <br />\n                02600 Espoo\n                <br />\n                Y-tunnus: 0116608-8\n                <br />\n                Puhelin: (09) 348 090 (vaihde)\n                <br />\n              </div>\n            </li>\n            <li>\n              <span className=\"service-info-list-item\">\n                Yhteyshenkilö rekisteriin liittyvissä asioissa\n              </span>\n              <div className=\"list-block-item\">\n                Nimi: Tanja Räsänen\n                <br />\n                Puhelin: 0400 675 674\n                <br />\n                Sähköposti:\n{' '}\n                <a className=\"email-link\" href=\"mailto:tanja.rasanen@kvl.fi\">tanja.rasanen@kvl.fi</a>\n                <br />\n                Voit kysyä yhteyshenkilöltä lisätietoa tästä selosteesta tai\n                henkilötietojesi käytöstä.\n                <br />\n              </div>\n            </li>\n            <li>\n              <span className=\"service-info-list-item\">Tietosuojavastaava</span>\n              <div className=\"list-block-item\">\n                Nimi: Marko Peltomäki\n                <br />\n                Puhelin: (09) 3480 9262\n                <br />\n                Sähköposti:\n{' '}\n                <a className=\"email-link\" href=\"mailto:marko.peltomaki@kvl.fi\">marko.peltomaki@kvl.fi</a>\n                <br />\n              </div>\n            </li>\n            <li>\n              <span className=\"service-info-list-item\">Rekisterin nimi</span>\n              <p>\n                <span className=\"uppercase-text\">Kohdataan</span>\n                -palvelun käyttäjärekisteri\n              </p>\n            </li>\n            <li>\n              <span className=\"service-info-list-item\">\n                Mihin tarkoituksiin rekisteriä käytetään?\n              </span>\n              <p>\n                <span className=\"uppercase-text\">Kohdataan</span>\n                -palvelu on sosiaalisen median palvelu, jossa voi tutustua\n                uusiin ihmisiin. Palvelussa voi keskustella muiden käyttäjien\n                kanssa ryhmissä tai kahdestaan. Palvelussa voi viestiä\n                kirjoittamalla, kuvilla, videoilla ja ääniviesteillä.\n              </p>\n              <p>\n                Keräämme ja käsittelemme vain sellaisia henkilötietojasi, joita\n                tarvitaan <span className=\"uppercase-text\">Kohdataan</span>\n                -palvelun käyttöön.\n              </p>\n              Käsittelemme ja käytämme henkilötietojasi, jotta voimme\n              <ul>\n                <li>tarjota sinulle palvelun</li>\n                <li>kehittää palvelua</li>\n                <li>ottaa yhteyttä ongelmatilanteissa</li>\n                <li>\n                  tiedottaa palvelun muutoksista, esimerkiksi käyttöehtojen\n                  muutoksista\n                </li>\n                <li>markkinoida palvelua.</li>\n              </ul>\n              <p>\n                Henkilötietojesi käyttö perustuu Kehitysvammaliiton ja sinun\n                väliseen sopimukseen{' '}\n                <span className=\"uppercase-text\">Kohdataan</span>\n                -palvelun käytöstä.\n              </p>\n              <p>\n                Kehitysvammaliitolla voi myös olla niin kutsuttuja oikeutettuja\n                etuja, joiden perusteella se voi käyttää henkilötietojasi.\n                Tällaisia oikeutettuja etuja ovat mm. oikeus edistää palvelun\n                käyttöä markkinoinnin avulla sekä oikeus selvittää mahdollisia\n                väärinkäytöksiä ja muita ongelmatilanteita.\n              </p>\n            </li>\n            <li>\n              <span className=\"service-info-list-item\">\n                Minkälaisia tietoja rekisteri sisältää?\n              </span>\n              <div className=\"list-block-item\">\n                Kun rekisteröidyt palvelun käyttäjäksi, sinusta kerätään:\n                <ul>\n                  <li>etu-ja sukunimi</li>\n                  <li>syntymäaika</li>\n                  <li>sähköpostiosoite</li>\n                  <li>puhelinnumero</li>\n                  <li>salasana</li>\n                </ul>\n                <br />\n                Kun luot käyttäjäprofiilin, joka näkyy muille käyttäjille,\n                sinusta kerätään:\n                <ul>\n                  <li>kutsumanimi</li>\n                  <li>asuinkunta</li>\n                  <li>kuvaus itsestä</li>\n                  <li>kuva itsestä</li>\n                  <li>kiinnostuksen kohteet.</li>\n                </ul>\n                <br />\n                Kun käytät palvelua sinusta kerätään:\n                <ul>\n                  <li>\n                    lokitietoja, jotka sisältävät muun muassa tietokoneesi tai\n                    mobiililaitteesi IP-osoitteen sekä laitteessa olevan\n                    käyttöjärjestelmän ja selaimen\n                  </li>\n                  <li>\n                    palvelun ryhmäkeskusteluihin kirjoittamasi tekstit ja muut\n                    jakamasi materiaalit.\n                  </li>\n                </ul>\n              </div>\n            </li>\n            <li>\n              <span className=\"service-info-list-item\">\n                Miten henkilötietoja kerätään?\n              </span>\n              <p>\n                Keräämme henkilötietoja vain sinulta itseltäsi sekä evästeiden\n                ja vastaavien teknologioiden avulla laitteistasi. Tietoja\n                kerätään kerätään esimerkiksi silloin kun\n              </p>\n              <ul>\n                <li>rekisteröidyt palveluun</li>\n                <li>kirjaudut sisään palveluun</li>\n                <li>luot tai muokkaat omaa profiiliasi</li>\n                <li>muokkaat rekisteröitymistietojasi</li>\n                <li>liityt ryhmiin</li>\n                <li>keskustelet muiden käyttäjien kanssa</li>\n                <li>liikut palvelussa sivuilta toiselle</li>\n                <li>olet yhteydessä valvojiin ongelmatilanteissa.</li>\n              </ul>\n              <br />\n            </li>\n            <li>\n              <span className=\"service-info-list-item\">\n                Miten henkilötietoja säilytetään ja suojataan?\n              </span>\n              <p>\n                Henkilötiedot kerätään tietokantoihin ja lokitiedostoihin.\n                Tietokannat, tiedostot ja niiden varmuuskopiot sijaitsevat\n                lukituissa tiloissa ja ne on suojattu palomuureilla,\n                salasanoilla sekä muilla teknisillä keinoilla. Tiedot\n                sijaitsevat Suomessa.\n              </p>\n              <p>\n                Tietoihin pääsevät vain ne Kehitysvammaliiton työntekijät,\n                joiden työhön tietojen käsittely kuuluu. Lisäksi tietoihin\n                pääsevät sellaiset henkilöt, joilta Kehitysvammaliitto ostaa\n                palvelun kehittämistä tai ylläpitoa. Kaikilla näillä henkilöillä\n                on velvollisuus pitää tiedot salassa. Tietoja ei siis saa kertoa\n                kenellekään.\n              </p>\n              <p>\n                Henkilötietoja säilytetään niin kauan kuin käyttäjällä on\n                käyttäjätili sekä enintään yksi vuosi sen jälkeen.\n                Henkilötietoja voidaan säilyttää kauemmin, jos se on\n                perusteltua.\n              </p>\n            </li>\n            <li>\n              <span className=\"service-info-list-item\">Evästeet</span>\n              <p>\n                <span className=\"uppercase-text\">Kohdataan</span>\n                -palvelussa käytetään evästeitä, jotta palvelu toimii ja sitä\n                voi käyttää.\n              </p>\n              <p>\n                Evästeet ovat pieniä, tietokoneesi tai mobiililaitteesi\n                selaimelle tallennettavia tekstitiedostoja, jotka eivät\n                vahingoita laitettasi. Evästeet tunnistavat tietokoneesi tai\n                mobiililaitteesi, kun tulet palveluun ja liikut sen sisällä.\n              </p>\n              <p>\n                <span className=\"uppercase-text\">Kohdataan</span>\n                -palvelun evästeiden avulla kerätään myös tietoa palvelun\n                käytöstä ja kehitetään palvelua. Evästeiden avulla ei kerätä\n                henkilötietojasi tai selaushistoriaasi.\n              </p>\n              <p>\n                Tietokoneesi selaimen tai mobiililaitteen asetuksista voit\n                hallita evästeiden käyttöä tai halutessasi estää ne kokonaan.\n                Jos estät asetuksistasi evästeiden käytön kokonaan, et pysty\n                käyttämään <span className=\"uppercase-text\">Kohdataan</span>\n                -palvelua.\n              </p>\n            </li>\n            <li>\n              <span className=\"service-info-list-item\">\n                Tietojen luovuttaminen ulkopuolisille tahoille tai siirtäminen\n                EU:n tai ETA:n ulkopuolelle\n              </span>\n              <p>\n                Henkilötietoja ei luovuteta ulkopuolisille tahoille eikä\n                siirretä Euroopan unionin tai Euroopan talousalueen\n                ulkopuolelle, jos se ei ole palvelun teknisen toteuttamisen\n                vuoksi tarpeellista.\n              </p>\n              <p>\n                Ulkopuoliset henkilöt saavat käyttää henkilötietoja\n                Kehitysvammaliiton luvalla vain\n                <span className=\"uppercase-text\">Kohdataan</span>\n                -palvelun kehittämiseen.\n              </p>\n              <p>\n                Henkilötietoja voidaan kuitenkin luovuttaa eteenpäin, jos\n                viranomainen tai laki vaatii.\n              </p>\n            </li>\n            <li>\n              <span className=\"service-info-list-item\">\n                Mitä oikeuksia rekisteröidyllä on omiin henkilötietoihinsa?\n              </span>\n              <p>Rekisteröitynä sinulla on oikeus:</p>\n              <ul>\n                <li>\n                  tarkastaa, mitä henkilötietoja sinusta on tallennettu\n{' '}\n                  <span className=\"uppercase-text\">Kohdataan</span>\n                  -palvelun rekisteriin\n                </li>\n                <li>saada virheellinen henkilötietosi korjattua</li>\n                <li>\n                  saada henkilötietosi poistettua rekisteristä, jos\n                  Kehitysvammaliitolla ei ole enää perustetta jatkaa tietojen\n                  käyttöä\n                </li>\n                <li>\n                  peruuttaa mahdolliset suostumuksesi henkilötietojesi käyttöön\n                </li>\n                <li>vastustaa henkilötietojesi käyttöä</li>\n                <li>rajoittaa henkilötietojesi käyttöä</li>\n                <li>saada tietosi siirrettyä järjestelmästä toiseen</li>\n                <li>vastustaa itseäsi koskevaa profilointia</li>\n                <li>\n                  tehdä valitus Kehitysvammaliiton toiminnasta\n                  tietosuojavaltuutetun toimistoon.\n                </li>\n              </ul>\n              Voit tehdä oikeuksiasi koskevan pyynnön ottamalla yhteyttä\n              kohdassa 2 mainittuun yhteyshenkilöön.\n            </li>\n            <br />\n            <li>\n              <span className=\"service-info-list-item\">\n                Minkä maan lainsäädäntöä henkilötietojen käsittelyyn\n                sovelletaan?\n              </span>\n              <p>\n                <span className=\"uppercase-text\">Kohdataan</span>\n                -palvelun henkilörekisteriin ja siihen sisältyvien\n                henkilötietojen käsittelyyn sovelletaan Suomen lainsäädäntöä\n                sekä suoraan Suomessa sovellettavaa EU:n lainsäädäntöä, kuten\n                EU:n tietosuoja-asetusta.\n              </p>\n            </li>\n            <li>\n              <span className=\"service-info-list-item\">\n                Miten voimme päivittää tätä tietosuojaselostetta?\n              </span>\n              <p>\n                Kehitämme palveluamme ja toimintaamme jatkuvasti, ja sen takia\n                myös henkilötietojen käsittelyyn voi tulla muutoksia. Päivitämme\n                tarvittaessa tietosuojaselosteen vastaamaan muutoksia. Muutokset\n                voivat perustua myös lainsäädännön muutoksiin. Suosittelemme,\n                että tutustut tietosuojaselosteemme sisältöön säännöllisesti.\n              </p>\n              <p>\n                Ilmoitamme sinulle, jos alamme käyttää henkilötietojasi muuhun\n                tarkoitukseen kuin siihen, johon henkilötietosi kerättiin.\n                Ilmoitamme asiasta ja uudesta tietosuojaselosteesta etukäteen.\n                Jos tietosuojaselosteeseen tulee muita muutoksia, ilmoitamme\n                niistä verkkosivuillamme.\n              </p>\n            </li>\n          </ol>\n        </div>\n      </div>\n      <ButtonContainer\n        className=\"profile-modal-button privacy-policy-modal-button\"\n        onClick={closeModal}\n      >\n        Sulje\n      </ButtonContainer>\n    </div>\n  )\n}\n\nPrivacyPolicy.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n}\n\nexport default memo(PrivacyPolicy)\n","import React, { memo, useState } from 'react'\nimport propTypes from 'prop-types'\nimport ButtonContainer from '../ButtonContainer'\nimport ModalContainer from '../ModalContainer'\nimport PrivacyPolicy from '../PrivacyPolicy'\nimport './styles.scss'\n\nconst ServiceRules = ({ setRulesAccepted, setOpenErrorModal }) => {\n  const [modalIsOpen, setModalIsOpen] = useState(false)\n  const [privacyPolicyModalIsOpen, setPrivacyPolicyModalIsOpen] = useState(\n    false\n  )\n\n  const openModal = () => {\n    setModalIsOpen(true)\n  }\n\n  const closeModal = () => {\n    setOpenErrorModal(true)\n    setModalIsOpen(false)\n  }\n\n  const acceptRules = () => {\n    setRulesAccepted(true)\n    setModalIsOpen(false)\n  }\n\n  return (\n    <div className=\"create-account-modal-container\">\n      <div className=\"service-rules-content\">\n        <ButtonContainer className=\"accept-rules-link\" onClick={openModal}>\n          Hyväksy palvelun käyttöehdot\n        </ButtonContainer>\n        <ModalContainer\n          modalIsOpen={modalIsOpen}\n          closeModal={closeModal}\n          label=\"Hyväksy käyttösäännöt-dialogi\"\n          isLong\n          aria={{\n            labelledby: 'Hyväksy käyttösäännöt-dialogi',\n            modal: true,\n          }}\n        >\n          <div className=\"service-rules-content\">\n            <div className=\"service-rules-header-content\">\n              <h1 className=\"service-info-header\">Käyttöehdot</h1>\n              <ButtonContainer\n                className=\"accept-rules-icon-btn\"\n                onClick={closeModal}\n                label=\"Sulje\"\n              >\n                <div className=\"go-back-button\" />\n              </ButtonContainer>\n            </div>\n            <p className=\"bold-text\">(voimassa 27.4.2020 alkaen)</p>\n            <div className=\"service-info-content\">\n              <section>\n                <p>\n                  Nämä käyttöehdot ovat sinun ja Kehitysvammaliiton välinen\n                  sopimus <span className=\"uppercase-text\">Kohdataan</span>\n                  -palvelun käytöstä.\n                </p>\n                <p>\n                  Lue ehdot huolellisesti läpi. Jos haluat käyttää palvelua,\n                  sinun täytyy ensin hyväksyä nämä ehdot. Voit hyväksyä ehdot\n                  tämän tekstin lopussa.\n                </p>\n                <p>\n                  Jos haluat kysyä käyttöehdoista, voit lähettää sähköpostia\n                  osoitteeseen{' '}\n                  <a\n                    className=\"email-link\"\n                    href=\"mailto:kohdataan@kohdataan.fi\"\n                  >\n                    kohdataan@kohdataan.fi\n                  </a>\n                  .\n                </p>\n              </section>\n              <section>\n                <ol className=\"service-info-list\">\n                  <li>\n                    <span className=\"service-info-list-item\">\n                      Mikä on <span className=\"uppercase-text\">Kohdataan</span>\n                      -palvelu?\n                    </span>\n                    <p>\n                      {' '}\n                      <span className=\"uppercase-text\">Kohdataan</span>\n                      -palvelu on sosiaalisen median palvelu, jossa voit\n                      tutustua uusiin ihmisiin. Voit keskustella palvelussa\n                      muiden käyttäjien kanssa ryhmissä tai kahdestaan. Voit\n                      viestiä palvelussa kirjoittamalla, kuvilla, videoilla ja\n                      ääniviesteillä.\n                    </p>\n                    <p>\n                      {' '}\n                      <span className=\"uppercase-text\">Kohdataan</span>\n                      -palvelu on ilmainen, kotimainen ja turvallinen palvelu.\n                      Palvelua moderoidaan eli keskusteluista poistetaan\n                      asiattomat sisällöt. Valvojaan saa tarvittaessa yhteyden,\n                      ja valvoja pyrkii vastaamaan viesteihin mahdollisimman\n                      pian.\n                    </p>\n                  </li>\n                  <li>\n                    <span className=\"service-info-list-item\">\n                      <span className=\"uppercase-text\">Kohdataan </span>\n                      -palvelun ikäraja ja muut vaatimukset\n                    </span>\n                    <p>\n                      {' '}\n                      Voit käyttää{' '}\n                      <span className=\"uppercase-text\">Kohdataan</span>\n                      -palvelua, jos olet vähintään 15-vuotias. Sinulla täytyy\n                      olla toimiva sähköpostiosoite ja puhelinnumero. Palvelu on\n                      ilmainen, mutta sinun täytyy itse maksaa omat laitteesi ja\n                      internetyhteytesi.\n                    </p>\n                    <p>\n                      {' '}\n                      Voit rekisteröityä palveluun vain omilla, oikeilla\n                      henkilötiedoilla. Palveluun ei saa ilmoittaa vääriä\n                      henkilötietoja.\n                    </p>\n                  </li>\n                  <li>\n                    <span className=\"service-info-list-item\">\n                      Mitä vastuita meillä on?\n                    </span>\n                    <div className=\"list-item-content\">\n                      <p>\n                        {' '}\n                        Kehitysvammaliitto tarjoaa sinulle parhaan mahdollisen\n{' '}\n                        <span className=\"uppercase-text\">Kohdataan</span>\n                        -palvelun .\n                      </p>\n                      <p>\n                        {' '}\n                        <span className=\"uppercase-text\">Kohdataan</span>\n                        -palvelussa saattaa olla virheitä, ja se voi olla joskus\n                        poissa käytöstä. Kehitysvammaliitto pyrkii korjaamaan\n                        virheet niin, että ne haittaavat palvelun käyttöä\n                        mahdollisimman vähän.\n                      </p>\n                      <p>\n                        Kehitysvammaliitto ei ole vastuussa, jos\n{' '}\n                        <span className=\"uppercase-text\">Kohdataan</span>\n                        -palvelun käyttö aiheuttaa vahinkoja tai muita ongelmia,\n                        esimerkiksi maksuja internetin käyttämisestä\n                        puhelimella.\n                      </p>\n                      <p>\n                        Kehitysvammaliitto ei ole vastuussa materiaaleista,\n                        joita käyttäjät jakavat palvelussa.\n                      </p>\n                    </div>\n                  </li>\n                  <li>\n                    <span className=\"service-info-list-item\">\n                      Mitä vastuita sinulla on?\n                    </span>\n                    <p>\n                      {' '}\n                      Sinulla voi olla\n{' '}\n                      <span className=\"uppercase-text\">Kohdataan</span>\n                      -palvelussa vain yksi käyttäjätili. Käyttäjätili aukeaa,\n                      kun rekisteröidyt palveluun.\n                    </p>\n                    <p>\n                      Käytät palvelua omalla vastuullasi. Olet vastuussa omasta\n                      käyttäjätilistäsi. Älä kerro tai anna tilisi salasanaa\n                      muille. Jos epäilet, että joku muu tietää salasanasi,\n                      vaihda se heti uuteen. Voit myös ottaa yhteyttä meihin,\n                      niin autamme sinua.\n                    </p>\n                    <p>\n                      Olet vastuussa kaikesta materiaalista, jota jaat\n{' '}\n                      <span className=\"uppercase-text\">Kohdataan</span>\n                      -palvelussa. Jaa vain materiaalia, johon sinulla on\n                      oikeus. Älä jaa viestejä ja materiaaleja, jotka ovat\n                      laittomia, asiattomia tai loukkaavia.\n                    </p>\n                    <p>\n                      <span className=\"uppercase-text\">Kohdataan</span>\n                      -palvelun säännöissä kerrotaan lisää, millaisia\n                      materiaaleja kannattaa jakaa.\n                    </p>\n                    <p>\n                      <a\n                        href=\"https://kohdataan.fi/saannot/\"\n                        className=\"service-info-link\"\n                      >\n                        Siirry Kohdataan-sivuilla oleviin sääntöihin.\n                      </a>\n                    </p>\n                    <p>\n                      Säännöt ovat osa Kehitysvammaliiton ja sinun välistä\n                      sopimusta.\n                    </p>\n                  </li>\n                  <li>\n                    <span className=\"service-info-list-item\">\n                      Miten muut voivat käyttää materiaaliasi?\n                    </span>\n                    <p>\n                      Kehitysvammaliitto ei käytä materiaalejasi mihinkään, ei\n                      muokkaa, eikä jaa niitä eteenpäin. Sinulla säilyvät kaikki\n                      tekijänoikeudet materiaaleihisi, joita jaat palvelussa.\n                    </p>\n                    <p>\n                      Muiden käyttäjien kuvia ja materiaaleja ei saa kopioida\n                      eikä jakaa eteenpäin. On kuitenkin mahdollista, että joku\n                      muu jakaa palvelussa olevia materiaaleja eteenpäin ilman\n                      lupaa. Me emme pysty estämään sitä teknisesti. Ilmoita\n                      meille, jos huomaat, että materiaalejasi jaetaan\n                      eteenpäin.\n                    </p>\n                  </li>\n                  <li>\n                    <span className=\"service-info-list-item\">\n                      Henkilötiedot ja yksityisyys\n                    </span>\n                    <div>\n                      <span className=\"uppercase-text\">Kohdataan</span>\n                      -palvelu kerää sinusta seuraavat henkilötiedot: \n                      <ul>\n                        <li>\n                          kun rekisteröidyt palvelun käyttäjäksi\n                          <ul>\n                            <li>etu-ja sukunimesi</li>\n                            <li>syntymäaikasi</li>\n                            <li>sähköpostiosoit&shy;teesi</li>\n                            <li>puhelinnume&shy;rosi</li>\n                            <li>luomasi salasana</li>\n                          </ul>\n                        </li>\n                        <li>\n                          kun luot käyttäjäprofiilin, joka näkyy muille\n                          käyttäjille\n                          <ul>\n                            <li>kutsumanimesi</li>\n                            <li>asuinpaikkasi</li>\n                            <li>kuvasi</li>\n                            <li>kuvauksen itsestäsi</li>\n                            <li>kiinnostuksen kohteesi</li>\n                          </ul>\n                        </li>\n                        <li>\n                          keskusteluryhmiin tuottamasi materiaalit, kuten\n                          tekstit, valokuvat, videot ja äänet.\n                        </li>\n                      </ul>\n                    </div>\n                    <p>\n                      Yksityisyytesi on meille hyvin tärkeää. Keräämme sinusta\n                      ainoastaan niitä tietoja, joita tarvitaan, että voit\n                      käyttää <span className=\"uppercase-text\">Kohdataan</span>\n                      -palvelua ja saada meiltä viestejä.\n                    </p>\n                    <p>\n                      Voit katsoa ja muokata omia tietojasi omassa profiilissasi\n                      ja Rekisteröitymistiedot-osiossa. Jos tietosi muuttuvat,\n                      käy muuttamassa ne Rekisteröitymistiedot-osiossa.\n                    </p>\n                    <p>\n                      Kun käytät{' '}\n                      <span className=\"uppercase-text\">Kohdataan</span>\n                      -palvelua, hyväksyt samalla, että voimme tallentaa\n                      evästeitä tietokoneellesi tai mobiililaitteellesi.\n                    </p>\n                    <p>\n                      Henkilötietojen käsittelystä ja evästeiden käytöstä\n                      kerrotaan lisää palvelun tietosuojaselosteessa.\n                    </p>\n                    <ButtonContainer\n                      className=\"service-info-link\"\n                      role=\"link\"\n                      onClick={() => setPrivacyPolicyModalIsOpen(true)}\n                    >\n                      <span>Siirry tietosuojaselosteeseen.</span>\n                    </ButtonContainer>\n                    <ModalContainer\n                      modalIsOpen={privacyPolicyModalIsOpen}\n                      closeModal={() => setPrivacyPolicyModalIsOpen(false)}\n                      isLong\n                      label=\"Tietosuojaseloste\"\n                      aria={{\n                        label: 'Tietosuojaseloste',\n                        modal: true,\n                      }}\n                    >\n                      <aside id=\"Tietosuojaseloste\">\n                        <PrivacyPolicy\n                          closeModal={() => setPrivacyPolicyModalIsOpen(false)}\n                        />\n                      </aside>\n                    </ModalContainer>\n                  </li>\n                  <br />\n                  <li>\n                    <span className=\"service-info-list-item\">\n                      Kuinka palvelun käyttö voi loppua?\n                    </span>\n                    <p>\n                      Voit lopettaa\n{' '}\n                      <span className=\"uppercase-text\">Kohdataan</span>\n                      -palvelun käytön ja poistaa käyttäjätilisi\n                      Rekisteröitymistiedot-osiossa. Voit myös pyytää palvelun\n                      valvojaa poistamaan käyttäjätilisi. Lähetä valvojalle\n                      sähköpostia siitä sähköpostiosoitteesta, jota käytit, kun\n                      rekisteröidyit palveluun.\n                    </p>\n                    <p>\n                      Voit käyttää\n{' '}\n                      <span className=\"uppercase-text\">Kohdataan</span>\n                      -palvelua vain, jos noudatat näitä käyttöehtoja. Jos et\n                      noudata käyttöehtoja, Kehitysvammaliitto voi poistaa\n                      käyttäjätilisi ja estää sinua avaamasta uutta\n                      käyttäjätiliä.\n                    </p>\n                    <p>\n                      Kun käyttäjätilisi poistetaan, käyttäjäprofiilisi ja\n                      kaikki profiilitietosi poistuvat\n{' '}\n                      <span className=\"uppercase-text\">Kohdataan</span>\n                      -palvelusta. Profiilitiedot poistuvat kaikissa\n                      tilanteissa, silloin kun itse poistat käyttäjätilin ja\n                      silloin kun me poistamme sen. Kaikki ryhmäkeskusteluissa\n                      jakamasi viestit ja materiaalit säilyvät palvelussa.\n                    </p>\n                    <p>\n                      Kehitysvammaliitolla on oikeus tehdä\n{' '}\n                      <span className=\"uppercase-text\">Kohdataan</span>\n                      -palveluun muutoksia tai lopettaa koko palvelu. Jos\n                      palvelu lopetetaan, Kehitysvammaliitto ilmoittaa siitä\n                      sinulle sähköpostilla hyvissä ajoin etukäteen.  \n                    </p>\n                  </li>\n                  <li>\n                    <span className=\"service-info-list-item\">\n                      Miten näihin käyttöehtoihin voidaan tehdä muutoksia?\n                    </span>\n                    <p>\n                      Kehitysvammaliitto voi muuttaa näitä käyttöehtoja ilman,\n                      että ilmoittaa siitä sinulle etukäteen. Jos muutamme\n                      käyttöehtojen sisältöä paljon, ilmoitamme sinulle\n                      muutoksista sähköpostilla siihen sähköpostiosoitteeseen,\n                      joka näkyy käyttäjätililläsi.\n                    </p>\n                    <p>\n                      Jos jatkat\n{' '}\n                      <span className=\"uppercase-text\">Kohdataan</span>\n                      -palvelun käyttöä, hyväksyt samalla uudet käyttöehdot. Jos\n                      et hyväksy muutettuja ehtoja, et voi jatkaa palvelun\n                      käyttöä ja voit poistaa käyttäjätilisi palvelusta.\n                    </p>\n                  </li>\n                  <li>\n                    <span className=\"service-info-list-item\">\n                      Miten riidat ratkaistaan?\n                    </span>\n                    <p>\n                      <span className=\"uppercase-text\">Kohdataan</span>\n                      -palvelu ja nämä käyttöehdot on tehty niin, että ne\n                      noudattavat Suomen lakeja. Jos sinulle ja\n                      Kehitysvammaliitolle tulee riita palvelusta ja sen\n                      käytöstä, yritämme ensin sopia riidan yhdessä. Jos se ei\n                      onnistu, riita ratkaistaan sinun kotipaikkasi\n                      käräjäoikeudessa. Voit myös viedä riidan\n                      kuluttajariitalautakuntaan, joka suosittelee, miten asia\n                      kannattaa ratkaista. Ennen kuin viet riidan\n                      kuluttajariitalautakuntaan, kannattaa pyytää apua oman\n                      kunnan kuluttajaneuvojalta.\n                    </p>\n                  </li>\n                  <li>\n                    <span className=\"service-info-list-item\">Ota yhteyttä</span>\n                    <p>\n                      Voit ottaa yhteyttä\n{' '}\n                      <span className=\"uppercase-text\">Kohdataan</span>\n                      -palvelun valvojiin aina, kun sinulla on kysyttävää tai\n                      ongelmia palvelun käytössä.\n                    </p>\n                    <p>\n                      Voit ottaa yhteyttä valvojiin palvelussa olevalla\n                      lomakkeella tai sähköpostilla {' '} \n                      <a\n                        className=\"email-link\"\n                        href=\"mailto:kohdataan@kohdataan.fi\"\n                      >\n                        kohdataan@kohdataan.fi\n                      </a>.\n                    </p>\n                  </li>\n                </ol>\n              </section>\n              <section>\n                <h2>Yhteystiedot</h2>\n                Kehitysvammaliitto ry\n                <br />\n                Linnoitustie 2 B\n                <br />\n                02600 Espoo\n                <br />\n                Y-tunnus: 0116608-8\n                <br />\n                Puhelin: (09) 348 090 (vaihde)\n                <br />\n              </section>\n            </div>\n            <ButtonContainer\n              className=\"profile-modal-button accept-rules-modal-button\"\n              onClick={acceptRules}\n            >\n              Hyväksy\n            </ButtonContainer>\n          </div>\n        </ModalContainer>\n      </div>\n    </div>\n  )\n}\n\nServiceRules.propTypes = {\n  setRulesAccepted: propTypes.func.isRequired,\n  setOpenErrorModal: propTypes.func.isRequired,\n}\n\nexport default memo(ServiceRules)\n","import React, { memo } from 'react'\nimport propTypes from 'prop-types'\nimport ServiceRules from '../components/ServiceRules'\n\nconst ServiceRulesContainer = ({ setRulesAccepted, setOpenErrorModal }) => {\n  return (\n    <ServiceRules\n      setRulesAccepted={setRulesAccepted}\n      setOpenErrorModal={setOpenErrorModal}\n    />\n  )\n}\n\nconst shouldComponentUpdate = (props, prevProps) => {\n  const { match: pMatch, ...prest } = prevProps\n  const { match, ...rest } = props\n  return JSON.stringify(rest) === JSON.stringify(prest)\n}\n\nServiceRulesContainer.propTypes = {\n  setRulesAccepted: propTypes.func.isRequired,\n  setOpenErrorModal: propTypes.func.isRequired,\n}\n\nexport default memo(ServiceRulesContainer, shouldComponentUpdate)\n","import React, { memo, useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport Select from 'react-select'\nimport './styles.scss'\n\nconst DateSelectField = React.forwardRef((props, ref) => {\n  const {\n    label,\n    showLabel,\n    ariaInvalid,\n    errors,\n    inputClassName,\n    labelClassName,\n    noOptionsMessage,\n    name,\n    onChange,\n    value,\n  } = props\n  const [ariaLabel, setAriaLabel] = useState('')\n  const years = []\n  let year = new Date().getFullYear()\n  const months = [\n    { value: '01', label: 'Tammi' },\n    { value: '02', label: 'Helmi' },\n    { value: '03', label: 'Maalis' },\n    { value: '04', label: 'Huhti' },\n    { value: '05', label: 'Touko' },\n    { value: '06', label: 'Kesä' },\n    { value: '07', label: 'Heinä' },\n    { value: '08', label: 'Elo' },\n    { value: '09', label: 'Syys' },\n    { value: '10', label: 'Loka' },\n    { value: '11', label: 'Marras' },\n    { value: '12', label: 'Joulu' },\n  ]\n  const days = [\n    { value: 1, label: '01' },\n    { value: 2, label: '02' },\n    { value: 3, label: '03' },\n    { value: 4, label: '04' },\n    { value: 5, label: '05' },\n    { value: 6, label: '06' },\n    { value: 7, label: '07' },\n    { value: 8, label: '08' },\n    { value: 9, label: '09' },\n  ]\n  let day = 10\n  let options = []\n\n  const getBorderStyle = isFocused => {\n    let border = '1px solid #f59023'\n    if (isFocused) {\n      border = '1px solid white'\n    } else if (\n      errors &&\n      (errors.ref.name === 'day' ||\n        errors.ref.name === 'month' ||\n        errors.ref.name === 'year')\n    ) {\n      border = '1px solid #ff5c69'\n    }\n    return border\n  }\n\n  const customStyles = {\n    container: provided => ({\n      ...provided,\n      width: '100%',\n    }),\n    menu: provided => ({\n      ...provided,\n      border: '2px solid #f59023',\n    }),\n    placeholder: provided => ({\n      ...provided,\n      color: 'white',\n      fontSize: '15px',\n    }),\n    clearIndicator: provided => ({\n      ...provided,\n      display: 'none',\n    }),\n    dropdownIndicator: provided => ({\n      ...provided,\n      padding: '1px',\n    }),\n    indicatorSeparator: provided => ({\n      ...provided,\n      display: 'none',\n    }),\n    option: (provided, state) => ({\n      ...provided,\n      color: 'white',\n      background: state.isFocused ? 'grey' : '#1c1c1c',\n    }),\n    control: (provided, state) => ({\n      ...provided,\n      borderRadius: 25,\n      flexGrow: 1,\n      flexBasis: 'auto',\n      border: state.isFocused ? getBorderStyle(true) : getBorderStyle(false),\n      boxShadow: 'none',\n      background: '#3a3a3a',\n      color: 'white',\n      margin: '0',\n    }),\n    input: () => ({\n      color: 'white',\n    }),\n    singleValue: () => ({\n      color: 'white',\n    }),\n  }\n\n  while (year >= 1900) {\n    years.push({ value: year, label: year })\n    year -= 1\n  }\n\n  while (day <= 31) {\n    days.push({ value: day, label: day })\n    day += 1\n  }\n\n  switch (name) {\n    case 'day':\n      options = days\n      break\n    case 'month':\n      options = months\n      break\n    case 'year':\n      options = years\n      break\n    default:\n  }\n\n  useEffect(() => {\n    const getAriaLabel = () => {\n      const arialabel = `${label}-combobox`\n      setAriaLabel(arialabel)\n    }\n    getAriaLabel()\n  }, [label])\n\n  return (\n    <label htmlFor={label} className={labelClassName}>\n      {showLabel && label}\n      <Select\n        id={label}\n        name={name}\n        options={options}\n        ref={ref}\n        isSearchable\n        isClearable\n        isRequired\n        placeholder={label}\n        aria-label={ariaLabel}\n        aria-invalid={ariaInvalid}\n        role=\"combobox\"\n        styles={customStyles}\n        onChange={onChange}\n        className={inputClassName}\n        value={value.label}\n        noOptionsMessage={noOptionsMessage}\n      />\n    </label>\n  )\n})\n\nDateSelectField.propTypes = {\n  label: PropTypes.string.isRequired,\n  showLabel: PropTypes.bool,\n  ariaInvalid: PropTypes.bool,\n  errors: PropTypes.instanceOf(Object),\n  inputClassName: PropTypes.string,\n  labelClassName: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n  noOptionsMessage: PropTypes.func.isRequired,\n}\n\nDateSelectField.defaultProps = {\n  showLabel: false,\n  ariaInvalid: false,\n  errors: null,\n  inputClassName: '',\n  labelClassName: '',\n}\n\nexport default memo(DateSelectField)\n","import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport Modal from 'react-modal'\n\nModal.setAppElement('#root')\n\nconst customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '20%',\n    transform: 'translate(-50%, -50%)',\n    position: 'fixed',\n    border: 'solid 1px #f5a623',\n    borderRadius: '10px',\n    textAlign: 'center',\n    width: '300px',\n    backgroundColor: '#fff2e7',\n  },\n  overlay: {\n    position: 'fixed',\n    zIndex: '2000',\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n}\n\nconst closeModalBtnStyle = {\n  position: 'absolute',\n  top: 5,\n  right: 5,\n  borderRadius: '0',\n  margin: '10px',\n}\n\nconst ToolTipModalContainer = props => {\n  const { content, modalIsOpen, closeModal, label } = props\n  return (\n    <Modal\n      isOpen={modalIsOpen}\n      onRequestClose={closeModal}\n      contentLabel={label}\n      style={customStyles}\n      role=\"dialog\"\n      aria={{\n        labelledby: label,\n        modal: true,\n      }}\n    >\n      <aside>\n        <button\n          type=\"button\"\n          className=\"go-back-button\"\n          onClick={closeModal}\n          style={closeModalBtnStyle}\n          aria-label=\"Sulje\"\n          onKeyPress={closeModal}\n          tabIndex=\"0\"\n        />\n        <p className=\"text-paragraph\">{content}</p>\n      </aside>\n    </Modal>\n  )\n}\n\nToolTipModalContainer.propTypes = {\n  content: PropTypes.string.isRequired,\n  modalIsOpen: PropTypes.bool.isRequired,\n  closeModal: PropTypes.func.isRequired,\n  label: PropTypes.string.isRequired,\n}\n\nexport default memo(ToolTipModalContainer)\n","import moment from 'moment'\n\nconst getAge = user => {\n  const birthdate = moment(user.birthdate)\n  const age = moment().diff(birthdate, 'years')\n  return age\n}\n\nexport default getAge\n","import React, { memo } from 'react'\nimport propTypes from 'prop-types'\nimport ButtonContainer from '../ButtonContainer'\nimport './styles.scss'\n\nconst AccessibilityStatement = ({ closeModal }) => {\n  return (\n    <div className=\"accessibility-statement-modal-container\">\n      <div className=\"accesibility-statement-modal-content\">\n        <div className=\"accessibility-statement-header-content\">\n          <h1 className=\"accessibility-statement-header\">\n            Saavutettavuus&shy;seloste\n          </h1>\n          <ButtonContainer\n            className=\"accessibility-statement-icon-btn\"\n            onClick={closeModal}\n            label=\"Sulje\"\n          >\n            <div className=\"go-back-button\" />\n          </ButtonContainer>\n        </div>\n        <p className=\"bold-text\">(voimassa 27.4.2020 alkaen)</p>\n        <div className=\"service-info-content\">\n          <p>\n            Tämä on <span className=\"uppercase-text\">Kohdataan</span>\n            -palvelun saavutettavuusseloste.\n          </p>\n          <h2 className=\"accessibility-statement-headline\">\n            Mitä tarkoittavat saavutettavuus ja saavutettavuusseloste?\n          </h2>\n          <p>Saavutettavuusseloste kertoo verkkopalvelun saavutettavuudesta.</p>\n          <p>\n            Saavutettavaa verkkopalvelu on sellainen, jota voivat käyttää\n            mahdollisimman monet ihmiset. Saavutettavaa verkkopalvelua voivat\n            siis käyttää myös ihmiset, joilla on jokin vamma tai\n            toimintarajoite. Esimerkiksi näkövamma, kuulovamma, liikuntavamma\n            tai kehitysvamma ei estä palvelun käyttöä, jos palvelu on tehty\n            hyvin ja saavutettavasti.\n          </p>\n          <p>\n            <span className=\"uppercase-text\">Kohdataan</span>\n            -palvelussa monet asiat on tehty hyvin ja saavutettavasti, mutta\n            joitakin asioita voidaan vielä parantaa.\n          </p>\n          <h2 className=\"accessibility-statement-headline\">\n            <span className=\"uppercase-text\">Kohdataan</span>\n            -palvelun saavutettavuus \n          </h2>\n          <p>\n            <span className=\"uppercase-text\">Kohdataan</span>\n            -palvelua koskee laki digitaalisten palvelujen tarjoamisesta. Lain\n            mukaan julkisilla varoilla rahoitettujen verkkopalvelujen täytyy\n            olla saavutettavia.\n          </p>\n          <p>\n            <a\n              href=\"https://www.finlex.fi/fi/laki/alkup/2019/20190306\"\n              className=\"service-info-link\"\n            >\n              Siirry lakiin tästä.\n            </a>\n          </p>\n          <p>\n            <span className=\"uppercase-text\">Kohdataan</span>\n            -palvelu täyttää kriittiset saavutettavuusvaatimukset WCAG 2.1\n            -kriteerien mukaan. Palvelun saavutettavuuden on arvioinut\n            Kehitysvammaliiton asiantuntija.\n          </p>\n          <h2 className=\"accessibility-statement-headline\">\n            Sisällöt, jotka eivät ole vielä saavutettavia\n          </h2>\n          <h3 className=\"accessibility-statement-headline\">\n            Saavutettavuuspuutteet:\n          </h3>\n          <p>\n            Ruudunlukuohjelman käyttäjä ei saa varmistusta siitä, että profiili-\n            ja rekisteröitymistietoja on muokattu onnistuneesti.  \n          </p>\n          <h3 className=\"accessibility-statement-headline\">\n            Saavutettavuusvaatimukset, jotka eivät täyty:\n          </h3>\n          <p>4.1.3 Tilasta kertovat viestit</p>\n          <h3 className=\"accessibility-statement-headline\">\n            Syy noudattamatta jättämiselle: \n          </h3>\n          <p>\n            Palvelun kaikkia ominaisuuksia ei ole vielä toteutettu. Puute\n            korjataan mahdollisimman pian.\n          </p>\n          <h2 className=\"accessibility-statement-headline\">\n            Sisältö, joka ei kuulu lainsäädännön piiriin \n          </h2>\n          <p>\n            Käyttäjien tuottama tai jakama sisältö ei kuulu lainsäädännön\n            piiriin. Tällaisia sisältöjä ovat esimerkiksi viesteissä olevat\n            tekstit, kuvat, videot tai ääniviestit. Nämä sisällöt eivät\n            välttämättä ole saavutettavia.\n          </p>\n          <h2 className=\"accessibility-statement-headline\">Anna palautetta</h2>\n          <p>\n            Jos huomaat <span className=\"uppercase-text\">Kohdataan</span>\n            -palvelun saavutettavuudessa ongelmia, anna meille palautetta. Voit\n            antaa palautetta saavutettavuudesta sähköpostitse {' '}\n            <a className=\"email-link\" href=\"mailto:kohdataan@kohdataan.fi\">\n              kohdataan@kohdataan.fi\n            </a>\n            . Vastaamme palautteeseen kahden viikon aikana. Pyrimme jatkuvasti\n            <span className=\"uppercase-text\">Kohdataan</span>\n            -palvelun saavutettavuutta.\n          </p>\n          <h2 className=\"accessibility-statement-headline\">\n            Saavutettavuuden valvonta \n          </h2>\n          <p>\n            Etelä-Suomen aluehallintovirasto valvoo saavutettavuusvaatimusten\n            toteutumista. Jos olet laittanut meille saavutettavuuspalautetta,\n            mutta et ole tyytyväinen vastaukseen tai et saa vastausta 14 päivän\n            aikana, voit antaa palautetta Etelä-Suomen aluehallintovirastoon.\n            Aluehallintoviraston sivulla kerrotaan, miten palautetta annetaan ja\n            miten se käsitellään.\n          </p>\n          <p>\n            <a\n              href=\"https://www.saavutettavuusvaatimukset.fi/oikeutesi/oikeutesi-antaa-palautetta-saavutettavuudesta/\"\n              className=\"service-info-link\"\n            >\n              Siirry aluehallintoviraston ohjeisiin tästä.\n            </a>\n          </p>\n          <h2 className=\"accessibility-statement-headline\">\n            <span className=\"uppercase-text\">Kohdataan</span>\n            -palvelun yhteystiedot \n          </h2>\n          <span>\n            Sähköposti: {' '}\n            <a className=\"email-link\" href=\"mailto:kohdataan@kohdataan.fi\">kohdataan@kohdataan.fi</a>\n          </span>\n          <br />\n          <span>Puhelinnumero: 09 348 090 (vaihde)</span>\n          <br />\n          <h2 className=\"accessibility-statement-headline\">\n            Valvontaviranomaisen yhteystiedot \n          </h2>\n          <span>Etelä-Suomen aluehallintovirasto</span>\n          <br />\n          <span>Saavutettavuuden valvonnan yksikkö</span>\n          <br />\n          <p>\n            <a\n              href=\"https://saavutettavuusvaatimukset.fi\"\n              className=\"service-info-link\"\n            >\n              www.saavutettavuusvaatimukset.fi\n            </a>\n          </p>\n          <span>\n            Sähköposti:\n{' '}\n            <a className=\"email-link\" href=\"mailto:saavutettavuus@avi.fi\">saavutettavuus@avi.fi</a>\n          </span>\n          <br />\n          <span>Puhelinnumero: 02 9501 6000</span>\n          <br />\n        </div>\n      </div>\n      <ButtonContainer\n        className=\"profile-modal-button accessibility-statement-modal-button\"\n        onClick={closeModal}\n      >\n        Sulje\n      </ButtonContainer>\n    </div>\n  )\n}\n\nAccessibilityStatement.propTypes = {\n  closeModal: propTypes.func.isRequired,\n}\n\nexport default memo(AccessibilityStatement)\n","/* eslint-disable react/jsx-curly-newline */\nimport React, { memo, useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\nimport useForm from 'react-hook-form'\nimport moment from 'moment'\nimport ServiceRulesContainer from '../../containers/ServiceRulesContainer'\nimport ValidatedInputField from '../ValidatedInputField'\nimport DateSelectField from '../DateSelectField'\nimport ButtonContainer from '../ButtonContainer'\nimport ModalContainer from '../ModalContainer'\nimport ToolTipModalContainer from '../../containers/ToolTipModalContainer'\nimport getAge from '../../utils/getAge'\nimport './styles.scss'\nimport PrivacyPolicy from '../PrivacyPolicy'\nimport AccessibilityStatement from '../AccessibilityStatement'\n\nconst CreateAccount = ({ handleAccountCreation, apiErrors }) => {\n  const {\n    register,\n    handleSubmit,\n    errors,\n    watch,\n    setValue,\n    setError,\n    clearError,\n  } = useForm()\n  const [rulesAccepted, setRulesAccepted] = useState(false)\n  // const [phoneNumberModalIsOpen, setPhoneNumberModalIsOpen] = useState(false)\n  const [passwordModalIsOpen, setPasswordModalIsOpen] = useState(false)\n  const [birthday, setBirthday] = useState('')\n  const [birthmonth, setBirthmonth] = useState('')\n  const [birthyear, setBirthyear] = useState('')\n  const [currentApiErrors, setCurrentApiErrors] = useState({})\n  const [openErrorModal, setOpenErrorModal] = useState(false)\n  const [privacyPolicyModalIsOpen, setPrivacyPolicyModalIsOpen] = useState(\n    false\n  )\n  const [\n    accessibilityStatementModalIsOpen,\n    setAccessibilityStatementModalIsOpen,\n  ] = useState(false)\n\n  useEffect(() => {\n    if (apiErrors && apiErrors.fields) {\n      setCurrentApiErrors(apiErrors)\n    }\n  }, [apiErrors, setCurrentApiErrors])\n\n  const closeAcceptModal = () => {\n    setOpenErrorModal(false)\n  }\n\n  const onSubmit = data => {\n    const usersBirthdate = moment\n      .utc({\n        year: birthyear,\n        month: birthmonth - 1,\n        day: birthday,\n      })\n      .format()\n\n    const ageAccepted = getAge({ birthdate: usersBirthdate }) >= 15\n    if (!ageAccepted) {\n      setError(\n        'day',\n        'registrationError',\n        'Voit käyttää palvelua, jos olet yli 15-vuotias.'\n      )\n      setError(\n        'month',\n        'registrationError',\n        'Voit käyttää palvelua, jos olet yli 15-vuotias.'\n      )\n      setError(\n        'year',\n        'registrationError',\n        'Voit käyttää palvelua, jos olet yli 15-vuotias.'\n      )\n    }\n\n    if (!rulesAccepted) {\n      setOpenErrorModal(true)\n    }\n\n    if (ageAccepted && rulesAccepted) {\n      handleAccountCreation(\n        data.firstname.trim(),\n        data.lastname.trim(),\n        usersBirthdate,\n        data.email.trim().toLowerCase(),\n        data.phoneNumber,\n        data.password\n      )\n    }\n  }\n\n  const closeModal = () => {\n    // setPhoneNumberModalIsOpen(false)\n    setPasswordModalIsOpen(false)\n  }\n\n  /*\n  const openPhoneNumberModal = () => {\n    setPhoneNumberModalIsOpen(true)\n  }\n  */\n\n  const openPasswordModal = () => {\n    setPasswordModalIsOpen(true)\n  }\n\n  return (\n    <main role=\"main\" className=\"create-account-container\">\n      <h1 className=\"main-title\">Kohdataan</h1>\n      <div className=\"create-account-content-container\">\n        <h2 className=\"create-account-title\">Rekisteröityminen</h2>\n        <p className=\"create-account-text\">\n          Anna omat tiedot. Tiedot näkyvät vain sinulle. Kaikki tiedot ovat\n          pakollisia.\n        </p>\n        <form\n          className=\"create-account-input-content-container\"\n          onSubmit={handleSubmit(onSubmit)}\n          autoComplete=\"on\"\n        >\n          <div className=\"formfield-container\">\n            <ValidatedInputField\n              label=\"Etunimi\"\n              name=\"firstname\"\n              ref={register({\n                required: true,\n                minLength: 2,\n                maxLength: 20,\n                pattern: /^[a-z A-ZäöüßÄÖÜ'-]+$/i,\n              })}\n              ariaInvalid={!!errors.firstname}\n              inputClassName=\"create-account-input-text\"\n              labelClassName={\n                errors.firstname\n                  ? 'create-account-errors-field'\n                  : 'create-account-input-field'\n              }\n            />\n            <div className=\"error-text\">\n              {errors.firstname &&\n                errors.firstname.type === 'required' &&\n                'Kirjoita etunimi'}\n              {errors.firstname &&\n                (errors.firstname.type === 'minLength' ||\n                  errors.firstname.type === 'maxLength') &&\n                'Etunimen tulee olla 2-20 merkkiä pitkä.'}\n              {errors.firstname &&\n                errors.firstname.type === 'pattern' &&\n                'Tarkista, että kirjoitit etunimen oikein.'}\n            </div>\n          </div>\n\n          <div className=\"formfield-container\">\n            <ValidatedInputField\n              label=\"Sukunimi\"\n              name=\"lastname\"\n              ref={register({\n                required: true,\n                minLength: 2,\n                maxLength: 30,\n                pattern: /^[a-z A-ZäöüßÄÖÜ'-]+$/i,\n              })}\n              autocomplete\n              ariaInvalid={!!errors.lastname}\n              inputClassName=\"create-account-input-text\"\n              labelClassName={\n                errors.lastname\n                  ? 'create-account-errors-field'\n                  : 'create-account-input-field'\n              }\n            />\n            <div className=\"error-text\">\n              {errors.lastname &&\n                errors.lastname.type === 'required' &&\n                'Kirjoita sukunimi'}\n              {errors.lastname &&\n                (errors.lastname.type === 'minLength' ||\n                  errors.lastname.type === 'maxLength') &&\n                'Sukunimen tulee olla 2-30 merkkiä pitkä.'}\n              {errors.lastname &&\n                errors.lastname.type === 'pattern' &&\n                'Tarkista, että kirjoitit sukunimen oikein.'}\n            </div>\n          </div>\n          <div\n            className={\n              errors.year && errors.year.type === 'registrationError'\n                ? 'select-birthdate-error-container'\n                : 'select-birthdate-container'\n            }\n            aria-invalid={false}\n          >\n            <span className=\"birthdate-content-label\">Syntymäaika</span>\n            <div className=\"birthdate-container\">\n              <div className=\"formfield-container\">\n                <DateSelectField\n                  label=\"Päivä\"\n                  name=\"day\"\n                  ref={() =>\n                    register(\n                      { name: 'day', type: 'custom' },\n                      {\n                        required: true,\n                      }\n                    )\n                  }\n                  errors={errors.day}\n                  ariaInvalid={!!errors.day}\n                  value={String(birthday)}\n                  noOptionsMessage={() => 'Tarkista päivä.'}\n                  onChange={selected => {\n                    if (selected) {\n                      clearError('day')\n                      setBirthday(selected.value)\n                    }\n                    setValue('day', selected ? selected.value : null)\n                  }}\n                  inputClassName={\n                    errors.day && errors.day.type === 'required'\n                      ? 'create-birthdate-errors-field'\n                      : 'create-account-input-date'\n                  }\n                />\n              </div>\n\n              <div className=\"formfield-container\">\n                <DateSelectField\n                  label=\"Kuukausi\"\n                  name=\"month\"\n                  ref={() =>\n                    register(\n                      { name: 'month' },\n                      {\n                        required: true,\n                      }\n                    )\n                  }\n                  ariaInvalid={!!errors.birthdate}\n                  errors={errors.month}\n                  value={String(birthmonth)}\n                  noOptionsMessage={() => 'Tarkista kuukausi.'}\n                  onChange={selected => {\n                    if (selected) {\n                      clearError('month')\n                      setBirthmonth(selected.value)\n                    }\n                    setValue('month', selected ? selected.value : null)\n                  }}\n                  inputClassName={\n                    errors.month && errors.month.type === 'required'\n                      ? 'create-birthdate-errors-field'\n                      : 'create-account-input-date'\n                  }\n                />\n              </div>\n\n              <div className=\"formfield-container\">\n                <DateSelectField\n                  label=\"Vuosi\"\n                  name=\"year\"\n                  ref={() =>\n                    register(\n                      { name: 'year' },\n                      {\n                        required: true,\n                      }\n                    )\n                  }\n                  ariaInvalid={!!errors.year}\n                  errors={errors.year}\n                  value={String(birthyear)}\n                  noOptionsMessage={() => 'Tarkista vuosi.'}\n                  onChange={selected => {\n                    if (selected) {\n                      clearError('year')\n                      setBirthyear(selected.value)\n                    }\n                    setValue('year', selected ? selected.value : null)\n                  }}\n                  inputClassName={\n                    errors.year && errors.year.type === 'required'\n                      ? 'create-birthdate-errors-field'\n                      : 'create-account-input-date'\n                  }\n                />\n              </div>\n            </div>\n            <div className=\"birthdate-error-text\">\n              {((errors.day && errors.day.type === 'required') ||\n                (errors.month && errors.month.type === 'required') ||\n                (errors.year && errors.year.type === 'required')) &&\n                'Anna syntymäaika.'}\n              {((errors.day && errors.day.type === 'registrationError') ||\n                (errors.month && errors.month.type === 'registrationError') ||\n                (errors.year && errors.year.type === 'registrationError')) &&\n                'Voit käyttää palvelua, jos olet yli 15-vuotias.'}\n            </div>\n          </div>\n          <div className=\"formfield-container\">\n            <ValidatedInputField\n              label=\"Sähköposti\"\n              name=\"email\"\n              ref={register({\n                required: true,\n                pattern: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n              })}\n              onChange={selected => {\n                if (selected) {\n                  clearError('email')\n                  setCurrentApiErrors({})\n                }\n              }}\n              ariaInvalid={!!errors.email}\n              inputClassName=\"create-account-input-text\"\n              labelClassName={\n                errors.email ||\n                (currentApiErrors &&\n                  currentApiErrors.fields &&\n                  currentApiErrors.fields.email)\n                  ? 'create-account-errors-field'\n                  : 'create-account-input-field'\n              }\n            />\n            <div className=\"error-text\">\n              {errors.email &&\n                errors.email.type === 'required' &&\n                'Kirjoita sähköpostiosoite.'}\n              {errors.email &&\n                errors.email.type === 'pattern' &&\n                'Tarkista sähköpostiosoite.'}\n              {currentApiErrors &&\n                currentApiErrors.fields &&\n                currentApiErrors.fields.email && (\n                  <p>Olet jo rekisteröitynyt tällä sähköpostilla palveluun.</p>\n                )}\n            </div>\n          </div>\n\n          <div className=\"formfield-container\">\n            <div className=\"info-circle-line\">\n              <ValidatedInputField\n                label=\"Puhelinnumero\"\n                name=\"phoneNumber\"\n                ref={register({\n                  required: true,\n                  minLength: 6,\n                  maxLength: 20,\n                  pattern: /^(\\+358|00358|358|\\+7|007|\\+372|00372|\\+46|0046|04|050)[0-9- ]{4,14}$/i,\n                })}\n                ariaInvalid={!!errors.phoneNumber}\n                inputClassName=\"create-account-input-text\"\n                labelClassName={\n                  errors.phoneNumber\n                    ? 'create-account-errors-field'\n                    : 'create-account-input-field'\n                }\n              />\n            </div>\n\n            <div className=\"error-text\">\n              {errors.phoneNumber &&\n                errors.phoneNumber.type === 'required' &&\n                'Kirjoita puhelinnumero'}\n              {errors.phoneNumber &&\n                (errors.phoneNumber.type === 'pattern' ||\n                  errors.phoneNumber.type === 'minLength' ||\n                  errors.phoneNumber.type === 'maxLength') &&\n                'Tarkista puhelinnumero.'}\n            </div>\n          </div>\n\n          <div className=\"formfield-container\">\n            <div className=\"info-circle-line\">\n              <ValidatedInputField\n                label=\"Salasana\"\n                name=\"password\"\n                ref={register({\n                  required: true,\n                  maxLength: 30,\n                  // password must contain lower and upper case letters and numbers\n                  pattern: /^(?=.*[0-9]+.*)(?=.*[a-zäöüß]+.*)(?=.*[A-ZÄÖÜ]+.*)[\\w\\W]{10,}$/,\n                })}\n                type=\"password\"\n                ariaInvalid={!!errors.password}\n                inputClassName=\"create-account-input-text\"\n                labelClassName={\n                  errors.password\n                    ? 'create-account-errors-field'\n                    : 'create-account-input-field'\n                }\n              />\n              <div className=\"info-circle\">\n                <button\n                  type=\"button\"\n                  onClick={openPasswordModal}\n                  id=\"password-info\"\n                  className=\"info-circle-button\"\n                  aria-label=\"salasana-info-nappi\"\n                  aria-labelledby=\"password-info\"\n                />\n              </div>\n              <ToolTipModalContainer\n                modalIsOpen={passwordModalIsOpen}\n                closeModal={closeModal}\n                label=\"salasana-info-modaali\"\n                content=\"Salasanassa täytyy olla vähintään 10 merkkiä, yksi iso kirjain, yksi pieni kirjain ja yksi numero.\"\n              />\n            </div>\n            <div className=\"error-text\">\n              {errors.password &&\n                errors.password.type === 'required' &&\n                'Kirjoita salasana'}\n              {errors.password &&\n                errors.password.type === 'pattern' &&\n                'Salasanassa täytyy olla vähintään 10 merkkiä, yksi iso kirjain, yksi pieni kirjain ja yksi numero.'}\n              {errors.password &&\n                errors.password.type === 'maxLength' &&\n                'Salasanan on oltava enintään 30 merkkiä pitkä.'}\n            </div>\n          </div>\n\n          <div className=\"formfield-container\">\n            <ValidatedInputField\n              label=\"Salasana uudestaan\"\n              name=\"passwordConfirm\"\n              ref={register({\n                required: true,\n                validate: value => {\n                  return value === watch('password')\n                },\n              })}\n              type=\"password\"\n              ariaInvalid={!!errors.passwordConfirm}\n              inputClassName=\"create-account-input-text\"\n              labelClassName={\n                errors.passwordConfirm\n                  ? 'create-account-errors-field'\n                  : 'create-account-input-field'\n              }\n            />\n            <div className=\"error-text\">\n              {errors.passwordConfirm &&\n                errors.passwordConfirm.type === 'required' &&\n                'Kirjoita salasana uudestaan'}\n              {errors.passwordConfirm &&\n                errors.passwordConfirm.type === 'validate' &&\n                'Salasanat eivät ole samat.'}\n            </div>\n          </div>\n          <ServiceRulesContainer\n            setRulesAccepted={setRulesAccepted}\n            setOpenErrorModal={setOpenErrorModal}\n          />\n          {!rulesAccepted && (\n            <ModalContainer\n              modalIsOpen={openErrorModal}\n              closeModal={closeAcceptModal}\n              label=\"Käyttöehtoja ei hyväksytty\"\n            >\n              <div>\n                <ButtonContainer\n                  className=\"icon-btn go-back-button close-modal-icon-btn\"\n                  onClick={closeAcceptModal}\n                  label=\"Sulje\"\n                />\n                <h3 className=\"accept-rules-modal-text\">\n                  Jos haluat käyttää palvelua, sinun täytyy hyväksyä\n                  käyttöehdot.\n                </h3>\n              </div>\n            </ModalContainer>\n          )}\n          <button\n            type=\"submit\"\n            className=\"create-account-button\"\n            onKeyPress={handleSubmit(onSubmit)}\n            tabIndex=\"0\"\n          >\n            {'Rekisteröidy '}\n          </button>\n        </form>\n        <div className=\"create-account-links-container\">\n          <Link className=\"create-account-link-block\" to=\"/login\" tabIndex={0}>\n            Olen vanha käyttäjä ja haluan kirjautua sisään.\n          </Link>\n          <Link className=\"create-account-link-block\" to=\"/registrationproblem\">\n            Tarvitsen apua rekisteröitymisessä.\n          </Link>\n          <ButtonContainer\n            className=\"create-account-link-block create-account-link-item create-account-link\"\n            onClick={() => setPrivacyPolicyModalIsOpen(true)}\n          >\n            Tutustu tietosuojaselosteeseen.\n          </ButtonContainer>\n          <ModalContainer\n            modalIsOpen={privacyPolicyModalIsOpen}\n            closeModal={() => setPrivacyPolicyModalIsOpen(false)}\n            label=\"Tietosuojaseloste\"\n            isLong\n            aria={{\n              label: 'Tietosuojaseloste',\n              modal: true,\n            }}\n          >\n            <aside id=\"Tietosuojaseloste\" className=\"privacy-policy-container\">\n              <PrivacyPolicy\n                closeModal={() => setPrivacyPolicyModalIsOpen(false)}\n              />\n            </aside>\n          </ModalContainer>\n          <ButtonContainer\n            className=\"create-account-link-block create-account-link-item create-account-link\"\n            role=\"link\"\n            onClick={() => setAccessibilityStatementModalIsOpen(true)}\n          >\n            Tutustu saavutettavuusselosteeseen.\n          </ButtonContainer>\n          <ModalContainer\n            modalIsOpen={accessibilityStatementModalIsOpen}\n            closeModal={() => setAccessibilityStatementModalIsOpen(false)}\n            label=\"Saavutettavuusseloste\"\n            isLong\n            aria={{\n              label: 'Saavutettavuusseloste',\n              modal: true,\n            }}\n          >\n            <aside>\n              <AccessibilityStatement\n                closeModal={() => setAccessibilityStatementModalIsOpen(false)}\n              />\n            </aside>\n          </ModalContainer>\n        </div>\n      </div>\n    </main>\n  )\n}\n\nCreateAccount.propTypes = {\n  handleAccountCreation: PropTypes.func.isRequired,\n  apiErrors: PropTypes.shape({\n    name: PropTypes.string,\n    errors: PropTypes.instanceOf(Array),\n    fields: PropTypes.instanceOf(Object),\n  }),\n}\n\nCreateAccount.defaultProps = {\n  apiErrors: { name: '', errors: [], fields: {} },\n}\n\nexport default memo(CreateAccount)\n","import React, { memo, useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport uniqid from 'uniqid'\nimport CreateAccount from '../components/CreateAccount'\nimport * as API from '../api/user/user'\n\nconst CreateAccountContainer = props => {\n  const { history } = props\n  const [errors, setErrors] = useState(null)\n\n  useEffect(() => {\n    document.body.className = 'create-account-body'\n    return () => {\n      document.body.className = ''\n    }\n  })\n\n  const handleAccountCreation = async (\n    firstname,\n    lastname,\n    birthdate,\n    email,\n    phoneNumber,\n    password\n  ) => {\n    // Remove empty spaces and potential country code\n    // in case of Russia, Estonia or Sweden, store number as 00{code}\n    let number = phoneNumber.replace(/ /g, '')\n    if (number.startsWith('+358')) {\n      number = number.replace('+358', '0')\n    } else if (number.startsWith('358')) {\n      number = number.replace('358', '0')\n    } else if (number.startsWith('00358')) {\n      number = number.replace('00358', '0')\n    } else if (number.startsWith('+7')) {\n      number = number.replace('+', '00')\n    } else if (number.startsWith('+372')) {\n      number = number.replace('+', '00')\n    } else if (number.startsWith('+46')) {\n      number = number.replace('+', '00')\n    } \n    // create unique username for Mattermost\n    // Mattermot username must begin with a letter and contain between 3 and 22 characters\n    // including numbers, lowercase letters, and the symbols \".\", \"-\", and \"_\".\n\n    let username = `${uniqid('-')}`\n    if (username.length > 22) {\n      username = username.slice(0, 22)\n    }\n\n    try {\n      const user = {\n        first_name: firstname,\n        last_name: lastname,\n        birthdate,\n        email,\n        phoneNumber,\n        username,\n        nickname: 'Käyttäjä',\n        password,\n      }\n\n      if (user) {\n        const res = await API.userSignUp(user)\n        if (res && res.success) {\n          const emailAddress = { email }\n          await API.sendVerifyEmailLink(emailAddress)\n          history.push('/registration-success')\n        }\n        setErrors(res.error)\n      }\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e)\n    }\n  }\n\n  return (\n    <CreateAccount\n      handleAccountCreation={handleAccountCreation}\n      apiErrors={errors}\n    />\n  )\n}\n\n// TODO: refactor\n\nconst shouldComponentUpdate = (props, prevProps) => {\n  const { match: pMatch, ...prest } = prevProps\n  const { match, ...rest } = props\n  return JSON.stringify(rest) === JSON.stringify(prest)\n}\n\nCreateAccountContainer.propTypes = {\n  history: PropTypes.instanceOf(Object).isRequired,\n}\n\nexport default memo(CreateAccountContainer, shouldComponentUpdate)\n","import React, { memo } from 'react'\nimport './styles.scss'\n\nconst RegistrationTitle = () => {\n  return (\n    <div className=\"registration-title-container\">\n      <h1 className=\"registration-title\">Kohdataan</h1>\n    </div>\n  )\n}\n\nexport default memo(RegistrationTitle)\n","const pages = {\n  info: {\n    current: 'info',\n    next: 'add-nickname',\n  },\n  'add-nickname': {\n    current: 'add-nickname',\n    next: 'add-show-age',\n    previous: 'info',\n  },\n  'add-show-age': {\n    current: 'add-show-age',\n    next: 'add-location',\n    previous: 'add-nickname',\n  },\n  'add-location': {\n    current: 'add-location',\n    next: 'add-description',\n    previous: 'add-show-age',\n  },\n  'add-description': {\n    current: 'add-description',\n    next: 'add-image',\n    previous: 'add-location',\n  },\n  'add-image': {\n    current: 'add-image',\n    next: 'add-interests',\n    previous: 'add-description',\n  },\n  'add-interests': {\n    current: 'add-interests',\n    previous: 'add-image',\n    last: true,\n  },\n}\n\nexport default pages\n","import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\nimport ButtonContainer from '../../ButtonContainer'\nimport './styles.scss'\n\nconst StepButton = props => {\n  const {\n    params: { next, previous, last },\n    onClick,\n    nextButtonActive,\n    setOpenModal,\n    history,\n  } = props\n\n  const handleProfileReady = async () => {\n    await onClick()\n    history.push('/me')\n  }\n\n  return (\n    <div className=\"step-button-container\">\n      {previous && (\n        <Link className=\"next-step-button\" to={`/registration/${previous}`}>\n          Edellinen\n        </Link>\n      )}\n      {next && nextButtonActive && (\n        <Link\n          className=\"next-step-button\"\n          to={`/registration/${next}`}\n          onClick={onClick}\n        >\n          Seuraava\n        </Link>\n      )}\n\n      {next && !nextButtonActive && (\n        <div className=\"next-step-button-inactive\">Seuraava</div>\n      )}\n\n      {last && nextButtonActive && (\n        <ButtonContainer\n          className=\"next-step-button\"\n          onClick={handleProfileReady}\n        >\n          Tallenna\n        </ButtonContainer>\n      )}\n\n      {last && !nextButtonActive && (\n        <ButtonContainer\n          className=\"next-step-button-inactive\"\n          onClick={() => setOpenModal(true)}\n        >\n          Tallenna\n        </ButtonContainer>\n      )}\n    </div>\n  )\n}\n\nStepButton.propTypes = {\n  params: PropTypes.instanceOf(Object).isRequired,\n  onClick: PropTypes.func.isRequired,\n  nextButtonActive: PropTypes.bool.isRequired,\n  setOpenModal: PropTypes.func.isRequired,\n  history: PropTypes.instanceOf(Object).isRequired,\n}\n\nexport default memo(StepButton)\n","import React, { memo } from 'react'\nimport './styles.scss'\n\nconst InfoPage = () => {\n  return (\n    <main role=\"main\" className=\"registration-info-container \">\n      <h2 className=\"registration-description\">\n        Tervetuloa tutustumaan uusiin ihmisiin!\n      </h2>\n\n      <div className=\"registration-info-text-container\">\n        <p className=\"registration-info-text\">\n          Vastaa muutamaan kysymykseen, jotta muut voivat tutustua sinuun. Voit\n          muokata kaikkia vastauksia myöhemmin omassa profiilissa.\n        </p>\n      </div>\n    </main>\n  )\n}\n\nexport default memo(InfoPage)\n","import React, { memo } from 'react'\nimport propTypes from 'prop-types'\nimport './styles.scss'\n\nconst ShadowBox = props => {\n  const { children } = props\n  return <div className=\"shadow-box-container\">{children}</div>\n}\n\nShadowBox.propTypes = {\n  children: propTypes.oneOfType([\n    propTypes.string,\n    propTypes.instanceOf(Array),\n    propTypes.node,\n  ]).isRequired,\n}\n\nexport default memo(ShadowBox)\n","import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\n\nconst InputField = props => {\n  const {\n    label,\n    labelClassName,\n    showPlaceholder,\n    showLabel,\n    value,\n    inputClassName,\n    onChange,\n    type,\n    ariaRequired,\n  } = props\n  return (\n    <label htmlFor={label} className={inputClassName}>\n      {showLabel && label}\n      <input\n        type={type}\n        name={label}\n        id={label}\n        aria-label={label}\n        value={value}\n        placeholder={showPlaceholder ? label : ''}\n        className={labelClassName}\n        onChange={onChange}\n        aria-required={ariaRequired}\n      />\n    </label>\n  )\n}\n\nInputField.propTypes = {\n  type: PropTypes.string,\n  label: PropTypes.string.isRequired,\n  showLabel: PropTypes.bool,\n  value: PropTypes.string,\n  inputClassName: PropTypes.string,\n  labelClassName: PropTypes.string,\n  showPlaceholder: PropTypes.bool,\n  onChange: PropTypes.func.isRequired,\n  ariaRequired: PropTypes.bool,\n}\n\nInputField.defaultProps = {\n  type: 'text',\n  showLabel: true,\n  value: '',\n  inputClassName: '',\n  labelClassName: '',\n  showPlaceholder: true,\n  ariaRequired: false,\n}\n\nexport default memo(InputField)\n","import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport ShadowBox from '../../ShadowBox'\nimport InputField from '../../InputField'\nimport './styles.scss'\n\nconst Nickname = props => {\n  const { onChange, value, hideStep } = props\n  return (\n    <ShadowBox>\n      <main role=\"main\" className=\"add-user-nickname-container\">\n        <div className=\"profile-creation-title-container\">\n          <h2 className=\"profile-creation-title\">Kerro kuka olet.</h2>\n          {!hideStep && <span className=\"profile-creation-step-text\">1/6</span>}\n        </div>\n        <InputField\n          inputClassName=\"add-user-nickname-text\"\n          labelClassName=\"add-user-nickname-field\"\n          label=\"Kutsumanimi\"\n          showLabel={false}\n          onChange={onChange}\n          value={value}\n          ariaRequired\n        />\n        <p className=\"add-user-nickname-title\">Tämä nimi näkyy muille.</p>\n      </main>\n    </ShadowBox>\n  )\n}\n\nNickname.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n  hideStep: PropTypes.bool,\n}\n\nNickname.defaultProps = {\n  hideStep: false,\n}\n\nexport default memo(Nickname)\n","import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport './styles.scss'\n\nconst RadioButton = props => {\n  const {\n    name,\n    labelClassName,\n    inputClassName,\n    value,\n    onChange,\n    label,\n    checked,\n  } = props\n\n  return (\n    <label htmlFor={label} className={`radio-button ${labelClassName}`}>\n      {label}\n      <input\n        type=\"radio\"\n        name={name}\n        id={label}\n        value={value}\n        onChange={onChange}\n        className={inputClassName}\n        checked={checked}\n        onKeyPress={onChange}\n        tabIndex={0}\n      />\n      <span className=\"radio-button-checkmark\" />\n    </label>\n  )\n}\n\nRadioButton.propTypes = {\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  inputClassName: PropTypes.string,\n  labelClassName: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  checked: PropTypes.bool,\n}\n\nRadioButton.defaultProps = {\n  value: '',\n  inputClassName: '',\n  labelClassName: '',\n  checked: false,\n}\n\nexport default memo(RadioButton)\n","import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport ShadowBox from '../../ShadowBox'\nimport RadioButton from '../../RadioButton'\nimport './styles.scss'\n\nconst ShowAge = props => {\n  const { onChange, showAge, age, hideStep } = props\n\n  return (\n    <ShadowBox>\n      <main role=\"main\" className=\"add-user-show-age-container\">\n        <div className=\"profile-creation-title-container\">\n          <h2 className=\"profile-creation-title\">\n            Ikäsi:\n            <span className=\"add-user-show-age-value\">{` ${age} vuotta`}</span>\n          </h2>\n\n          {!hideStep && <span className=\"profile-creation-step-text\">2/6</span>}\n        </div>\n        <RadioButton\n          label=\"Näytä ikä muille.\"\n          name=\"agePermission\"\n          value=\"showAge\"\n          onChange={() => onChange(true)}\n          checked={showAge === 'true'}\n        />\n        <RadioButton\n          label=\"Älä näytä ikää muille.\"\n          name=\"agePermission\"\n          value=\"hideAge\"\n          onChange={() => onChange(false)}\n          checked={showAge === 'false'}\n        />\n      </main>\n    </ShadowBox>\n  )\n}\n\nShowAge.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  showAge: PropTypes.string.isRequired,\n  age: PropTypes.number.isRequired,\n  hideStep: PropTypes.bool,\n}\n\nShowAge.defaultProps = {\n  hideStep: false,\n}\n\nexport default memo(ShowAge)\n","import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport './styles.scss'\n\nconst TextArea = props => {\n  const {\n    label,\n    showLabel,\n    value,\n    inputClassName,\n    labelClassName,\n    onChange,\n    maxLength,\n    rows,\n  } = props\n  return (\n    <label htmlFor={label} className={inputClassName}>\n      {showLabel && label}\n      <textarea\n        type=\"text\"\n        name={label}\n        id={label}\n        aria-label={label}\n        value={value}\n        placeholder={label}\n        className={labelClassName}\n        onChange={onChange}\n        maxLength={maxLength}\n        rows={rows}\n      />\n    </label>\n  )\n}\n\nTextArea.propTypes = {\n  label: PropTypes.string.isRequired,\n  showLabel: PropTypes.bool,\n  value: PropTypes.string,\n  inputClassName: PropTypes.string,\n  labelClassName: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  maxLength: PropTypes.number,\n  rows: PropTypes.number,\n}\n\nTextArea.defaultProps = {\n  showLabel: true,\n  value: '',\n  inputClassName: '',\n  labelClassName: '',\n  maxLength: 1000,\n  rows: 4,\n}\n\nexport default memo(TextArea)\n","import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport ShadowBox from '../../ShadowBox'\nimport TextArea from '../../TextArea'\nimport './styles.scss'\n\nconst MAX_LENGTH = 200\n\nconst Description = props => {\n  const { onChange, value, hideStep } = props\n  return (\n    <ShadowBox>\n      <main role=\"main\" className=\"add-user-description-container\">\n        <div className=\"profile-creation-title-container\">\n          <h2 className=\"profile-creation-title\">Kerro itsestäsi.</h2>\n          {!hideStep && <span className=\"profile-creation-step-text\">4/6</span>}\n        </div>\n\n        <TextArea\n          inputClassName=\"add-user-description-text\"\n          labelClassName=\"add-user-description-field\"\n          label=\"Kerro itsestäsi\"\n          showLabel={false}\n          onChange={onChange}\n          value={value}\n          maxLength={MAX_LENGTH}\n        />\n\n        <div className=\"add-user-description-details-container\">\n          <div>\n            Tämä kuvaus näkyy muille.\n            <br />\n            Voit lisätä kuvauksen myöhemmin.\n          </div>\n          <div className=\"add-user-description-limit\">\n            {`${value.length}/${MAX_LENGTH}`}\n          </div>\n        </div>\n      </main>\n    </ShadowBox>\n  )\n}\n\nDescription.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string,\n  hideStep: PropTypes.bool,\n}\n\nDescription.defaultProps = {\n  value: '',\n  hideStep: false,\n}\n\nexport default memo(Description)\n","import React, { memo, useState } from 'react'\nimport propTypes from 'prop-types'\nimport ModalContainer from '../ModalContainer'\nimport ButtonContainer from '../ButtonContainer'\nimport CameraIconPath from '../../assets/camera-add-solid.svg'\nimport './styles.scss'\n\nconst ImageUploader = props => {\n  const { onChange, setShowFileLoader } = props\n  const [openModal, setOpenModal] = useState(false)\n\n  const fileInput = React.createRef()\n\n  const onBeforeFileLoad = e => {\n    if (e.target.files[0].size > 50000000) {\n      setOpenModal(true)\n      e.target.value = ''\n    }\n  }\n\n  const customIconStyle = {\n    fontSize: '115',\n    width: '130px',\n    height: '130px',\n    display: 'block',\n    textAlign: 'center',\n    border: '1px solid #000000',\n    borderStyle: 'solid',\n    borderRadius: '50%',\n    margin: '10px',\n    background: `url(${CameraIconPath})`,\n    backgroundRepeat: 'no-repeat',\n    backgroundPosition: 'center',\n    backgroundSize: '40%',\n  }\n\n  const uploadFile = e => {\n    e.preventDefault()\n    onBeforeFileLoad(e)\n    if (!e.target.value) return\n\n    const file = e.target.files[0]\n    onChange(file)\n\n    setShowFileLoader(false)\n  }\n\n  const clickFileInput = () => {\n    fileInput.current.click()\n  }\n\n  return (\n    <div>\n      <div className=\"upload-file-container\">\n        <input\n          onChange={e => uploadFile(e)}\n          name=\"image-upload\"\n          id=\"image-upload\"\n          type=\"file\"\n          accept=\"image/*\"\n          className=\"input-content\"\n          ref={fileInput}\n        />\n        <ButtonContainer\n          className=\"icon-btn\"\n          onClick={clickFileInput}\n          label=\"Lisää kuva\"\n        >\n          <div style={customIconStyle}>&nbsp;</div>\n        </ButtonContainer>\n      </div>\n\n      <ModalContainer\n        modalIsOpen={openModal}\n        label=\"Tiedosto on liian suuri\"\n        closeModal={() => setOpenModal(false)}\n      >\n        <div>\n          <p className=\"image-max-size-exceeded-text\">\n            Tiedosto on liian suuri!\n          </p>\n          <ButtonContainer\n            className=\"icon-btn go-back-button image-max-size-exceeded\"\n            onClick={() => setOpenModal(false)}\n            label=\"Sulje\"\n          />\n        </div>\n      </ModalContainer>\n    </div>\n  )\n}\n\nImageUploader.propTypes = {\n  onChange: propTypes.func.isRequired,\n  setShowFileLoader: propTypes.func.isRequired,\n}\n\nexport default memo(ImageUploader)\n","/* eslint-disable no-alert */\nimport React, { memo, useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport AvatarEditor from 'react-avatar-editor'\nimport Slider from 'rc-slider'\nimport ShadowBox from '../../ShadowBox'\nimport ButtonContainer from '../../ButtonContainer'\nimport './styles.scss'\nimport 'rc-slider/assets/index.css'\nimport ImageUploader from '../../ImageUploader'\n\nconst Picture = props => {\n  const { onChange, hideStep } = props\n  const [showFileLoader, setShowFileLoader] = useState(true)\n  const [rotation, setRotation] = useState(0)\n  const [scale, setScale] = useState(1)\n  const [position, setPosition] = useState({ x: 0.5, y: 0.5 })\n  const [imageFile, setImageFile] = useState(null)\n  const [imageUploaded, setImageUploaded] = useState(false)\n\n  const editorRef = React.createRef()\n\n  const closePreview = () => {\n    onChange(null)\n    setScale(1)\n    setRotation(0)\n    setShowFileLoader(true)\n    setPosition({ x: 0.5, y: 0.5 })\n    setImageUploaded(false)\n  }\n\n  const handlePositionChange = pos => {\n    setPosition(pos)\n  }\n\n  const handleScale = value => {\n    setScale(parseFloat(value))\n  }\n\n  const handleScaleByDirection = (direction, value) => {\n    if (direction === 'down' && scale === 1) {\n      setScale(1)\n    } else if (direction === 'up' && scale === 3) {\n      setScale(3)\n    } else {\n      setScale(parseFloat(value))\n    }\n  }\n\n  const handleRotate = () => {\n    const newRotation = rotation + 90\n    setRotation(newRotation)\n  }\n\n  useEffect(() => {\n    const saveAfterChange = () => {\n      if (editorRef && editorRef.current) {\n        const canvas = editorRef.current.getImageScaledToCanvas().toDataURL()\n        onChange(canvas)\n      }\n    }\n    saveAfterChange()\n  }, [rotation, scale, imageUploaded, editorRef, onChange])\n\n  return (\n    <ShadowBox>\n      <main role=\"main\" className=\"add-user-picture-container\">\n        <div className=\"add-user-picture-title-container\">\n          <h2\n            className=\"profile-creation-title add-user\"\n            id=\"add-user-picture-title-text\"\n          >\n            Valitse oma kuva.\n          </h2>\n          {!hideStep && (\n            <span className=\"profile-creation-step-text add-user-picture-step-text\">\n              5/6\n            </span>\n          )}\n        </div>\n\n        <div className=\"add-user-picture-content-container\">\n          {showFileLoader ? (\n            <ImageUploader\n              onChange={setImageFile}\n              setShowFileLoader={setShowFileLoader}\n            />\n          ) : (\n            <div className=\"image-preview-container\">\n              <ButtonContainer\n                className=\"icon-btn close-preview-button\"\n                onClick={closePreview}\n                label=\"Sulje\"\n              >\n                <i className=\"fas fa-times\" />\n              </ButtonContainer>\n              <AvatarEditor\n                ref={editorRef}\n                image={imageFile}\n                width={200}\n                height={200}\n                border={50}\n                borderRadius={100}\n                color={[255, 255, 255, 0.8]} // RGBA\n                scale={parseFloat(scale)}\n                rotate={parseFloat(rotation)}\n                position={position}\n                onPositionChange={handlePositionChange}\n                className=\"add-user-picture-picker\"\n                onImageReady={() => setImageUploaded(true)}\n              />\n\n              <div className=\"controls-button-container\">\n                <ButtonContainer\n                  className=\"icon-btn rotate-btn\"\n                  onClick={handleRotate}\n                  label=\"Käännä\"\n                >\n                  <i className=\"fas fa-retweet\" />\n                </ButtonContainer>\n                <br />\n                <div className=\"zoom-controls-container\">\n                  <ButtonContainer\n                    className=\"icon-btn\"\n                    onKeyPress={() =>\n                      handleScaleByDirection('down', scale - 0.02)\n                    }\n                    onClick={() => handleScaleByDirection('down', scale - 0.02)}\n                    label=\"Pienennä\"\n                  >\n                    <i className=\"fas fa-minus zoom-control-sign\" />\n                  </ButtonContainer>\n                  <Slider\n                    defaultValue={1}\n                    ariaLabelForHandle=\"zoom\"\n                    tabIndex={0}\n                    handleStyle={{\n                      borderColor: 'gray',\n                      height: 20,\n                      width: 20,\n                      marginLeft: 10,\n                      marginRight: 10,\n                      backgroundColor: 'white',\n                    }}\n                    railStyle={{\n                      height: 15,\n                      marginLeft: 10,\n                      marginRight: 10,\n                    }}\n                    trackStyle={{\n                      height: 15,\n                      marginLeft: 10,\n                      marginRight: 10,\n                      backgroundColor: 'gray',\n                    }}\n                    value={scale}\n                    onChange={handleScale}\n                    min={1}\n                    max={3}\n                    step={0.01}\n                  />\n                  <ButtonContainer\n                    className=\"icon-btn\"\n                    onKeyDown={() => handleScaleByDirection('up', scale + 0.02)}\n                    onClick={() => handleScaleByDirection('up', scale + 0.02)}\n                    label=\"Suurenna\"\n                  >\n                    <i className=\"fas fa-plus zoom-control-sign\" />\n                  </ButtonContainer>\n                </div>\n                <br />\n              </div>\n            </div>\n          )}\n          <div className=\"add-user-picture-text\">\n            <p className=\"add-user-topmost-text\">Tämä kuva näkyy muille.</p>\n            <p>Voit lisätä kuvan myös myöhemmin.</p>\n          </div>\n        </div>\n      </main>\n    </ShadowBox>\n  )\n}\n\nPicture.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  hideStep: PropTypes.bool,\n}\n\nPicture.defaultProps = {\n  hideStep: false,\n}\n\nexport default memo(Picture)\n","import handleFetchErrors from '../errors'\n\nconst getLocations = async token => {\n  const uri = process.env.REACT_APP_NODE_BACKEND_URL\n  try {\n    const resp = await fetch(`${uri}/location/`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n    })\n    return handleFetchErrors(resp)\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n\nexport default getLocations\n","import React, { useState, useEffect, memo } from 'react'\nimport PropTypes from 'prop-types'\nimport Select from 'react-select'\nimport ShadowBox from '../../ShadowBox'\nimport RadioButton from '../../RadioButton'\nimport getLocations from '../../../api/location/location'\nimport './styles.scss'\n\nconst Location = props => {\n  const [locations, setLocations] = useState([])\n  const { value, onChange, setShowLocation, showLocation, hideStep } = props\n\n  useEffect(() => {\n    async function fetchLocations() {\n      const fetchedLocations = await getLocations(\n        localStorage.getItem('authToken')\n      )\n      setLocations(\n        fetchedLocations.map(location => {\n          return { value: location, label: location }\n        })\n      )\n    }\n    fetchLocations()\n  }, [])\n\n  const customStyles = {\n    menu: provided => ({\n      ...provided,\n      borderRadius: 0,\n      border: '1px solid black',\n    }),\n    option: (provided, state) => ({\n      ...provided,\n      color: 'black',\n      backgroundColor: state.isSelected ? 'lightgrey' : 'white',\n    }),\n    control: provided => ({\n      ...provided,\n      borderRadius: 0,\n      marginTop: '5%',\n      border: '1px solid black',\n      boxShadow: 'none',\n    }),\n    dropdownIndicator: provided => ({\n      ...provided,\n      color: '#f59023',\n    }),\n    indicatorSeparator: () => ({\n      border: 0,\n    }),\n    placeholder: provided => ({\n      ...provided,\n      color: 'white',\n    }),\n  }\n\n  return (\n    <ShadowBox>\n      <main role=\"main\" className=\"add-user-location-container\">\n        <div className=\"profile-creation-title-container\">\n          <h2 className=\"profile-creation-title\">Asuinpaikkasi:</h2>\n          {!hideStep && <span className=\"profile-creation-step-text\">3/6</span>}\n        </div>\n        <Select\n          className=\"basic-single\"\n          classNamePrefix=\"select\"\n          defaultValue={locations[0]}\n          placeholder=\"Kirjoita\"\n          isSearchable\n          name=\"color\"\n          options={locations}\n          value={value}\n          onChange={onChange}\n          styles={customStyles}\n          aria-label=\"Asuinpaikka\"\n          aria-required\n        />\n        <RadioButton\n          label=\"Näytä asuinpaikka muille.\"\n          name=\"locationPermission\"\n          value=\"showLocation\"\n          onChange={() => setShowLocation(true)}\n          checked={showLocation === 'true'}\n        />\n        <RadioButton\n          label=\"Älä näytä asuinpaikkaa muille.\"\n          name=\"locationPermission\"\n          value=\"hideLocation\"\n          onChange={() => setShowLocation(false)}\n          checked={showLocation === 'false'}\n        />\n      </main>\n    </ShadowBox>\n  )\n}\n\nLocation.propTypes = {\n  value: PropTypes.oneOfType([\n    PropTypes.instanceOf(Object).isRequired,\n    PropTypes.string,\n  ]).isRequired,\n  onChange: PropTypes.func.isRequired,\n  setShowLocation: PropTypes.func.isRequired,\n  showLocation: PropTypes.string.isRequired,\n  hideStep: PropTypes.bool,\n}\n\nLocation.defaultProps = {\n  hideStep: false,\n}\n\nexport default memo(Location)\n","const interestIconList = [\n  { key: 'Eläimet', icon: 'fas fa-paw fa-fw' },\n  { key: 'Matkustus', icon: 'fas fa-globe-europe fa-fw' },\n  { key: 'Urheilu', icon: 'fas fa-volleyball-ball fa-fw' },\n  { key: 'Luonto', icon: 'fas fa-tree fa-fw' },\n  { key: 'Elokuvat', icon: 'fas fa-film fa-fw' },\n  { key: 'Ruoka', icon: 'fas fa-utensils fa-fw' },\n  { key: 'Tekniikka', icon: 'fas fa-cogs fa-fw' },\n  { key: 'Musiikki', icon: 'fas fa-music fa-fw' },\n  { key: 'Taide', icon: 'fas fa-palette fa-fw' },\n  { key: 'Lukeminen', icon: 'fas fa-book fa-fw' },\n  { key: 'Politiikka', icon: 'fas fa-gavel fa-fw' },\n  { key: 'Historia', icon: 'fas fa-landmark fa-fw' },\n  { key: 'Käsityöt', icon: 'fas fa-paint-brush fa-fw' },\n  { key: 'Pelaaminen', icon: 'fas fa-gamepad fa-fw' },\n  { key: 'Valokuvaus', icon: 'fas fa-camera fa-fw' },\n]\n\nexport default interestIconList\n","import icons from '../contants/interestIcons'\n\nconst getIcon = name => {\n  const iconObject = icons.find(item => item.key === name)\n  return iconObject.icon\n}\n\nexport default getIcon\n","import React, { memo, useEffect, useState, useRef } from 'react'\nimport './styles.scss'\nimport propTypes from 'prop-types'\nimport ButtonContainer from '../ButtonContainer'\nimport ModalContainer from '../ModalContainer'\nimport getIcon from '../../utils/getIcon'\n\nconst EditInterestsContainer = props => {\n  const { options, interests, setInterests } = props\n  const [sortedOptions, setSortedOptions] = useState(options)\n  // Use ref of interests, because we don't want to sort each\n  // time interests are changed, only on mount\n  const interestsOnMount = useRef(interests)\n  const itemIsSelected = id => interests.includes(id)\n  const [openModal, setOpenModal] = useState(false)\n\n  useEffect(() => {\n    const sortOptions = () => {\n      const sorted = Object.values(options).sort((a, b) => {\n        if (interestsOnMount.current.includes(a.id)) {\n          // Sort by selection\n          if (interestsOnMount.current.includes(b.id)) {\n            return a.name > b.name ? 1 : -1\n          }\n          return -1\n        }\n        if (interestsOnMount.current.includes(b.id)) {\n          return 1\n        }\n        // Sort by name\n        return a.name > b.name ? 1 : -1\n      })\n      return sorted\n    }\n    setSortedOptions(sortOptions())\n  }, [options])\n\n  const closeModal = () => {\n    setOpenModal(false)\n  }\n\n  // Select item if less than 5 items are selected\n  const addToSelected = key => {\n    if (interests.length < 5) {\n      const interestsArr = [...interests]\n      interestsArr.push(key)\n      setInterests(interestsArr)\n    } else if (interests.length === 5) {\n      setOpenModal(true)\n    }\n  }\n\n  // Remove from selected items\n  const removeFromSelected = id => {\n    const interestsArr = [...interests]\n    const indx = interests.indexOf(id)\n    if (indx > -1) {\n      interestsArr.splice(indx, 1)\n      setInterests(interestsArr)\n    }\n  }\n\n  // Toggle selection\n  const handleClick = id => () => {\n    if (!itemIsSelected(id)) {\n      addToSelected(id)\n    } else {\n      removeFromSelected(id)\n    }\n  }\n\n  return (\n    <div className=\"interests-grid\">\n      {sortedOptions.map(interest => (\n        <button\n          key={interest.id}\n          role=\"checkbox\"\n          aria-checked={interests.includes(interest.id)}\n          type=\"button\"\n          className={`${\n            interests.includes(interest.id)\n              ? 'interests-grid-item-selected'\n              : ''\n          } interests-grid-edit-button interests-grid-edit-item`}\n          onClick={handleClick(interest.id)}\n        >\n          <i\n            aria-hidden=\"true\"\n            className={getIcon(interest.name)}\n            title={interest.name}\n          />\n          <span className=\"interests-grid-label\">{interest.name}</span>\n        </button>\n      ))}\n      <ModalContainer\n        modalIsOpen={openModal}\n        closeModal={closeModal}\n        label=\"Voit valita korkeintaan viisi kiinnostusta\"\n      >\n        <div>\n          <h3 className=\"interests-modal-text\">\n            Voit valita enintään viisi kiinnostavaa asiaa.\n          </h3>\n          <p>Voit poistaa valinnan, kun klikkaat sitä uudestaan.</p>\n          <ButtonContainer\n            className=\"icon-btn interests-icon-btn\"\n            onClick={closeModal}\n            label=\"Sulje\"\n          >\n            <div className=\"go-back-button\" />\n          </ButtonContainer>\n        </div>\n      </ModalContainer>\n\n    </div>\n  )\n}\n\nEditInterestsContainer.propTypes = {\n  interests: propTypes.instanceOf(Array).isRequired,\n  setInterests: propTypes.func.isRequired,\n  options: propTypes.instanceOf(Array).isRequired,\n}\n\nexport default memo(EditInterestsContainer)\n","import React, { memo } from 'react'\nimport './styles.scss'\nimport propTypes from 'prop-types'\nimport EditInterestsContainer from '../../EditInterestsContainer'\n\nconst Interests = props => {\n  const { options, interests, setInterests, hideStep } = props\n\n  return (\n    <main role=\"main\" className=\"add-user-interests-container\">\n      <h2 className=\"profile-creation-title\">Kerro, mikä sinua kiinnostaa.</h2>\n      <p>\n        Ehdotamme sinulle kiinnostustesi mukaan keskusteluryhmiä, joissa voit\n        tutustua uusiin ihmisiin.\n      </p>\n      <div className=\"profile-creation-title-container\">\n        <h2 className=\"profile-creation-title\">Valitse 3-5</h2>\n        {!hideStep && <span className=\"profile-creation-step-text\">6/6</span>}\n      </div>\n\n      <EditInterestsContainer\n        options={options}\n        interests={interests}\n        setInterests={setInterests}\n      />\n    </main>\n  )\n}\n\nInterests.propTypes = {\n  interests: propTypes.instanceOf(Array).isRequired,\n  setInterests: propTypes.func.isRequired,\n  options: propTypes.instanceOf(Array).isRequired,\n  hideStep: propTypes.bool,\n}\n\nInterests.defaultProps = {\n  hideStep: false,\n}\n\nexport default memo(Interests)\n","const dataURItoBlob = dataURI => {\n  if (!dataURI) {\n    return undefined\n  }\n\n  let format = 'image/jpeg'\n  const lowerCased = dataURI.toLowerCase()\n  if (lowerCased.indexOf('png') !== -1) {\n    format = 'image/png'\n  } else if (lowerCased.indexOf('jpg') !== -1) {\n    format = 'image/jpg'\n  } else if (lowerCased.indexOf('jpeg') !== -1) {\n    format = 'image/jpeg'\n  } else if (lowerCased.indexOf('bmp') !== -1) {\n    format = 'image/bmp'\n  }\n\n  const binary = atob(dataURI.split(',')[1])\n  const array = []\n  for (let i = 0; i < binary.length; i++) {\n    array.push(binary.charCodeAt(i))\n  }\n  return new Blob([new Uint8Array(array)], { type: format })\n}\n\nexport default dataURItoBlob\n","import React, { memo } from 'react'\nimport './styles.scss'\n\nconst ErrorNotification = props => {\n  const { errorMessage } = props || null\n  return (\n    <div className=\"error-notification-container\">\n      <p>{errorMessage}</p>\n    </div>\n  )\n}\n\nexport default memo(ErrorNotification)\n","const updateUsername = (nickname, mmuser) => {\n  const letter = nickname[0].toLowerCase()\n  const { username } = mmuser\n  const updated = letter.concat(username.substr(0, 21))\n  return updated\n}\n\nexport default updateUsername\n","import React, { useState, memo } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport {\n  getUser,\n  uploadProfileImage,\n  setDefaultProfileImage as setDefaultProfileImageAction,\n} from 'mattermost-redux/actions/users'\nimport PropTypes from 'prop-types'\nimport { updateUser, addUserInterests } from '../store/user/userAction'\nimport RegistrationTitle from '../components/RegistrationFlow/RegistrationTitle'\nimport pages from '../contants/registrationPages'\nimport StepButton from '../components/RegistrationFlow/StepButton'\nimport Container from '../components/Container'\nimport InfoPage from '../components/RegistrationFlow/InfoPage'\nimport Nickname from '../components/RegistrationFlow/Nickname'\nimport ShowAge from '../components/RegistrationFlow/ShowAge'\nimport Description from '../components/RegistrationFlow/Description'\nimport Picture from '../components/RegistrationFlow/Picture'\nimport Location from '../components/RegistrationFlow/Location'\nimport Interests from '../components/RegistrationFlow/Interests'\nimport dataUriToBlob from '../utils/dataUriToBlob'\nimport getInterestsAction from '../store/interest/interestAction'\nimport ModalContainer from '../components/ModalContainer'\nimport ButtonContainer from '../components/ButtonContainer'\nimport ErrorNotification from '../components/RegistrationFlow/ErrorNotification'\nimport getAge from '../utils/getAge'\nimport updateUsername from '../utils/updateUsername'\n\nconst RegistrationContainer = props => {\n  const {\n    match: {\n      params: { step },\n    },\n    mattermostId,\n    interestOptions,\n    registrationError,\n    userBirthdate,\n    mmuser,\n    setDefaultProfileImage,\n    history,\n  } = props\n  const [nickname, setNickname] = useState('')\n  const [showAge, setShowAge] = useState('')\n  const [location, setLocation] = useState('')\n  const [showLocation, setShowLocation] = useState('')\n  const [description, setDescription] = useState('')\n  const [img, setImg] = useState(null)\n  const [imageUploaded, setImageUploaded] = useState(false)\n  const [interests, setInterests] = useState([])\n  const [nextButtonActive, setNextButtonActive] = useState(true)\n  const [openModal, setOpenModal] = useState(false)\n\n  // Change nextButtonActive value only if new value is different\n  const setNextButtonStatus = value => {\n    if (value && !nextButtonActive) {\n      setNextButtonActive(true)\n    } else if (!value && nextButtonActive) {\n      setNextButtonActive(false)\n    }\n  }\n\n  const setProfileImage = i => {\n    setImg(i)\n    setImageUploaded(true)\n  }\n\n  const checkInputValidity = page => {\n    switch (page) {\n      case 'add-nickname':\n        if (nickname.length < 1) {\n          setNextButtonStatus(false)\n        } else {\n          setNextButtonStatus(true)\n        }\n        break\n      case 'add-show-age':\n        if (showAge === '') {\n          setNextButtonStatus(false)\n        } else {\n          setNextButtonStatus(true)\n        }\n        break\n      case 'add-location':\n        if (location === '' || showLocation === '') {\n          setNextButtonStatus(false)\n        } else {\n          setNextButtonStatus(true)\n        }\n        break\n      case 'add-interests':\n        if (interests.length < 3 || interests.length > 5) {\n          setNextButtonStatus(false)\n        } else {\n          setNextButtonStatus(true)\n        }\n        break\n      default:\n        setNextButtonStatus(true)\n    }\n  }\n\n  const subpage = () => {\n    switch (step) {\n      case pages.info.current:\n        checkInputValidity('info')\n        return <InfoPage />\n      case pages['add-nickname'].current:\n        checkInputValidity('add-nickname')\n        return (\n          <Nickname\n            value={nickname}\n            onChange={e => setNickname(e.target.value)}\n          />\n        )\n      case pages['add-show-age'].current:\n        checkInputValidity('add-show-age')\n        return (\n          <ShowAge\n            onChange={setShowAge}\n            age={getAge({ birthdate: userBirthdate })}\n            showAge={showAge.toString()}\n          />\n        )\n      case pages['add-location'].current:\n        checkInputValidity('add-location')\n        return (\n          <Location\n            onChange={value => setLocation(value)}\n            value={location}\n            setShowLocation={setShowLocation}\n            showLocation={showLocation.toString()}\n          />\n        )\n      case pages['add-description'].current:\n        checkInputValidity('add-description')\n        return (\n          <Description\n            value={description}\n            onChange={e => setDescription(e.target.value)}\n          />\n        )\n      case pages['add-image'].current:\n        checkInputValidity('add-image')\n        return <Picture onChange={p => setProfileImage(p)} />\n      case pages['add-interests'].current:\n        checkInputValidity('add-interests')\n        return (\n          <Interests\n            options={interestOptions}\n            interests={interests}\n            setInterests={setInterests}\n          />\n        )\n      default:\n        return undefined\n    }\n  }\n\n  const profileCreationAction = async () => {\n    switch (step) {\n      case pages['add-nickname'].current: {\n        const updatedUsername = updateUsername(nickname, mmuser)\n        await props.updateUser({\n          nickname,\n          username: updatedUsername,\n          mmid: mattermostId,\n        })\n        return setDefaultProfileImage(mattermostId)\n      }\n      case pages['add-show-age'].current: {\n        return props.updateUser({ showAge })\n      }\n      case pages['add-location'].current: {\n        return props.updateUser({\n          location: location.value,\n          showLocation,\n        })\n      }\n      case pages['add-description'].current: {\n        return props.updateUser({ description })\n      }\n      case pages['add-image'].current: {\n        await props.updateUser({\n          imageUploaded,\n        })\n        return props.uploadProfileImage(mattermostId, dataUriToBlob(img))\n      }\n      case pages['add-interests'].current: {\n        return props.addUserInterests({ userInterests: interests })\n      }\n      default:\n        return undefined\n    }\n  }\n\n  const stepButtonActions = async () => {\n    if (pages[step].last)\n      await props.updateUser({ profileReady: true, imageUploaded })\n    await profileCreationAction()\n  }\n\n  const closeModal = () => {\n    setOpenModal(false)\n  }\n\n  return (\n    <Container className=\"registration-container\">\n      <RegistrationTitle />\n      {subpage()}\n      {!registrationError && (\n        <StepButton\n          params={pages[step]}\n          onClick={stepButtonActions}\n          nextButtonActive={nextButtonActive}\n          setOpenModal={setOpenModal}\n          history={history}\n        />\n      )}\n      <ModalContainer\n        modalIsOpen={openModal}\n        closeModal={closeModal}\n        label=\"Käyttäjällä voi olla enintään viisi kiinnostusta.\"\n      >\n        <div>\n          <h3 className=\"interests-modal-text\">\n            Valitse vähintään kolme kiinnostavaa asiaa.\n          </h3>\n          <p>Voit lisätä valinnan klikkaamalla.</p>\n          <ButtonContainer\n            className=\"icon-btn interests-icon-btn\"\n            onClick={closeModal}\n            label=\"Sulje\"\n          >\n            <div className=\"go-back-button\" />\n          </ButtonContainer>\n        </div>\n      </ModalContainer>\n      {registrationError && (\n        <ErrorNotification errorMessage={registrationError} />\n      )}\n    </Container>\n  )\n}\n\nRegistrationContainer.propTypes = {\n  match: PropTypes.instanceOf(Object).isRequired,\n  updateUser: PropTypes.func.isRequired,\n  mattermostId: PropTypes.string.isRequired,\n  uploadProfileImage: PropTypes.func.isRequired,\n  interestOptions: PropTypes.instanceOf(Array),\n  registrationError: PropTypes.string,\n  addUserInterests: PropTypes.func.isRequired,\n  userBirthdate: PropTypes.string,\n  mmuser: PropTypes.shape({ username: PropTypes.string }).isRequired,\n  setDefaultProfileImage: PropTypes.func.isRequired,\n  history: PropTypes.instanceOf(Object).isRequired,\n}\n\nRegistrationContainer.defaultProps = {\n  registrationError: null,\n  interestOptions: [],\n  userBirthdate: '',\n}\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n      updateUser,\n      uploadProfileImage,\n      addUserInterests,\n      getInterestsAction,\n      getUser,\n      setDefaultProfileImage: setDefaultProfileImageAction,\n    },\n    dispatch\n  )\n\nconst mapStateToProps = state => {\n  const { currentUserId } = state.entities.users\n  const mmuser =\n    state.entities.users.profiles &&\n    state.entities.users.profiles[currentUserId]\n  return {\n    mattermostId: currentUserId,\n    mmuser,\n    interestOptions: state.interests.results,\n    registrationError: state.user.errorMessage,\n    userBirthdate: state.user.birthdate,\n  }\n}\n\nconst shouldComponentUpdate = (props, prevProps) => {\n  const { match: pMatch, ...prest } = prevProps\n  const { match, ...rest } = props\n  return JSON.stringify(rest) === JSON.stringify(prest)\n}\n\n// export default App\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(memo(RegistrationContainer, shouldComponentUpdate))\n)\n","import React, { memo } from 'react'\nimport { Link } from 'react-router-dom'\nimport './styles.scss'\n\nconst RegistrationSuccessMessage = () => {\n  return (\n    <div className=\"registration-success-container\">\n      <h1 className=\"main-title\">Kohdataan</h1>\n      <div className=\"registration-success-content-container\">\n        <p className=\"registration-success-text\">Kiitos rekisteröitymisestä!</p>\n        <p>\n          Lähetimme sinulle sähköpostilla linkin, josta pääset vahvistamaan\n          sähköpostisi ja kirjautumaan palveluun.\n        </p>\n        <div className=\"registration-info-content\">\n          <ol className=\"registration-info-list\">\n            <li>Avaa sähköposti.</li>\n            <li>\n              Olet saanut viestin, jossa on lähettäjänä &quot;Kohdataan&quot; ja\n              aiheena &quot;Rekisteröityminen&quot;.\n            </li>\n            <li>\n              Kun klikkaat viestissä olevaa linkkiä, vahvistat sähköpostisi ja\n              pääset palvelun kirjautumissivulle.\n            </li>\n            <li>\n              Kirjoita sivulle sähköpostisi ja salasana, jonka annoit\n              rekisteröitymisessä.\n            </li>\n            <li>Kun klikkaat &quot;Kirjaudu&quot;, olet palvelussa!</li>\n          </ol>\n          <p className=\"reminder-content-text,\">\n            Jos et löydä sähköpostistasi viestiä, muista tarkistaa myös\n            roskapostikansio.\n          </p>\n          <p>\n            Voit myös pyytää, että lähetämme sinulle{' '}\n            <Link className=\"resend-verification-link\" to=\"/email-verification\">\n              vahvistuslinkin uudestaan.\n            </Link>\n          </p>\n        </div>\n        <hr className=\"divider\" />\n        <div className=\"resend-verification-link-container\" />\n        <div className=\"registration-link-container\">\n          <Link className=\"registration-link\" to=\"/registrationproblem\">\n            Tarvitsen apua rekisteröitymisessä.\n          </Link>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default memo(RegistrationSuccessMessage)\n","import React, { memo } from 'react'\nimport RegistrationSuccessMessage from '../components/RegistrationSuccessMessage'\n\nconst RegistrationSuccessContainer = () => {\n  return <RegistrationSuccessMessage />\n}\n\n// TODO: refactor\nconst shouldComponentUpdate = (props, prevProps) => {\n  const { match: pMatch, ...prest } = prevProps\n  const { match, ...rest } = props\n  return JSON.stringify(rest) === JSON.stringify(prest)\n}\n\nexport default memo(RegistrationSuccessContainer, shouldComponentUpdate)\n","import React, { memo } from 'react'\nimport { Link } from 'react-router-dom'\nimport './styles.scss'\n\nconst ThankYouMessage = () => {\n  return (\n    <div className=\"thankyou-message-container\">\n      <h1 className=\"main-title\">Kohdataan</h1>\n      <div className=\"thankyou-message-content-container\">\n        <div>\n          <p className=\"registration-success-text\">Kiitos viestistä.</p>\n          <p>Vastaamme sinulle sähköpostilla mahdollisimman pian.</p>\n        </div>\n        <div className=\"registration-problem-links-container\">\n          <Link className=\"registration-problem-link\" to=\"/login\">\n            Olen vanha käyttäjä ja haluan kirjautua sisään.\n          </Link>\n          <Link className=\"registration-problem-link\" to=\"/createaccount\">\n            Olen uusi käyttäjä ja haluan rekisteröityä.\n          </Link>\n          <Link className=\"registration-problem-link\" to=\"/reset-password\">\n            Olen unohtanut salasanani.\n          </Link>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default memo(ThankYouMessage)\n","import React, { memo } from 'react'\nimport ThankYouMessage from '../components/ThankYouMessage'\n\nconst ThankYouMessageContainer = () => {\n  return <ThankYouMessage />\n}\n\n// TODO: refactor\nconst shouldComponentUpdate = (props, prevProps) => {\n  const { match: pMatch, ...prest } = prevProps\n  const { match, ...rest } = props\n  return JSON.stringify(rest) === JSON.stringify(prest)\n}\n\nexport default memo(ThankYouMessageContainer, shouldComponentUpdate)\n","import React, { memo } from 'react'\nimport propTypes from 'prop-types'\nimport './styles.scss'\n\nconst ProfileImage = props => {\n  const { mmuser } = props\n  const imageUri = `${process.env.REACT_APP_MATTERMOST_URL}/api/v4/users/${\n    mmuser.id\n  }/image?${Date.now()}`\n  return (\n    <div className=\"profile-header-image\">\n      {mmuser.id && (\n        <img className=\"profile-img\" src={imageUri} alt=\"Profiilikuva\" />\n      )}\n      <span className=\"sr-only\">Profiilikuva</span>\n    </div>\n  )\n}\n\nProfileImage.propTypes = {\n  mmuser: propTypes.shape({\n    id: propTypes.string,\n    last_picture_update: propTypes.number,\n  }).isRequired,\n}\n\nexport default memo(ProfileImage)\n","import React, { PureComponent } from 'react'\nimport './styles.scss'\n\nclass Description extends PureComponent {\n  render() {\n    const { text } = this.props || ''\n    return (\n      <section className=\"description-container\">\n        <h2 className=\"profile-secondary-header\">Kuvaus</h2>\n        <div className=\"description-text\">{text}</div>\n      </section>\n    )\n  }\n}\n\nexport default Description\n","import React, { memo } from 'react'\nimport './styles.scss'\nimport propTypes from 'prop-types'\nimport getIcon from '../../../utils/getIcon'\n\nconst InterestsGrid = props => {\n  const { interestList } = props\n\n  const sortedInterestsList = [...interestList].sort((a, b) =>\n    a.name > b.name ? 1 : -1\n  )\n  return (\n    <div className=\"interests-grid\">\n      {sortedInterestsList.map(interest => (\n        <div className=\"interests-grid-item-container\" key={interest.id}>\n          <span className=\"interests-grid-item\">\n            <i\n              aria-hidden=\"true\"\n              className={getIcon(interest.name)}\n              title={interest.name}\n            />\n            <span className=\"interests-grid-label\">{interest.name}</span>\n          </span>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nInterestsGrid.propTypes = {\n  interestList: propTypes.instanceOf(Array).isRequired,\n}\n\nexport default memo(InterestsGrid)\n","import React, { memo } from 'react'\nimport propTypes from 'prop-types'\nimport getAge from '../../../utils/getAge'\nimport './styles.scss'\n\nconst Header = props => {\n  const { nickname, location, showAge, showLocation, birthdate } = props\n\n  return (\n    <div className=\"profile-header-item\">\n      <span className=\"sr-only\">Käyttäjän nimi</span>\n      <h1 className=\"profile-header-nickname\">{nickname}</h1>\n      {showAge && (\n        <p className=\"profile-header-text\">\n          {`${getAge({\n            birthdate,\n          })} vuotta`}\n        </p>\n      )}\n      {showLocation && <p className=\"profile-header-text\">{location}</p>}\n    </div>\n  )\n}\n\nHeader.propTypes = {\n  nickname: propTypes.string,\n  location: propTypes.string,\n  showAge: propTypes.bool,\n  showLocation: propTypes.bool,\n  birthdate: propTypes.string,\n}\n\nHeader.defaultProps = {\n  nickname: '',\n  location: '',\n  showAge: false,\n  showLocation: false,\n  birthdate: '',\n}\n\nexport default memo(Header)\n","import React, { memo } from 'react'\nimport propTypes from 'prop-types'\nimport ButtonContainer from '../../ButtonContainer'\nimport './styles.scss'\n\nconst EditButton = props => {\n  const { isHighlighted, label } = props\n  const classNameList = [\n    'user-edit-button',\n    isHighlighted ? 'user-edit-button-highlight' : '',\n  ]\n  return (\n    <div className=\"profile-header-item\">\n      <ButtonContainer\n        onClick={() => {}}\n        className={classNameList.join(' ')}\n        label={label}\n      >\n        Muokkaa\n      </ButtonContainer>\n    </div>\n  )\n}\n\nEditButton.propTypes = {\n  isHighlighted: propTypes.bool,\n  label: propTypes.string,\n}\n\nEditButton.defaultProps = {\n  isHighlighted: false,\n  label: '',\n}\n\nexport default memo(EditButton)\n","import React, { memo, useEffect, useState } from 'react'\nimport './styles.scss'\nimport propTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\nimport ProfileImage from './ProfileImage'\nimport Description from './Description'\nimport InterestsGrid from './InterestsGrid'\nimport ProfileHeader from './ProfileHeader'\nimport EditButton from './EditButton'\nimport ButtonContainer from '../ButtonContainer'\nimport Tutorial from '../Tutorial'\n\nconst Profile = props => {\n  const {\n    currentUserId,\n    mmuser,\n    myUserInfo,\n    ownProfile,\n    userInterests,\n    startDirectChannel,\n    updateUser,\n    history,\n  } = props\n\n  const [returnToTutorial, setReturnToTutorial] = useState(false)\n\n  useEffect(() => {\n    if (history.location.state && history.location.state.navigateBack) {\n      setReturnToTutorial(true)\n    }\n  }, [history.location.state])\n\n  // Extended user info from node backend\n  const {\n    location,\n    description,\n    tutorialWatched,\n    nickname,\n    birthdate,\n    showAge,\n    showLocation,\n  } = myUserInfo\n\n  const goToFriendsPage = () => {\n    history.push({\n      pathname: '/friends',\n      state: { navigateBack: false },\n    })\n  }\n\n  const steps = [\n    {\n      content: (\n        <div aria-label=\"tutoriaali-1\">\n          <p className=\"tutorial-step\">1/6</p>\n          <h1 className=\"tutorial-header\">\n            Seuraavilla sivuilla esittelemme sinulle Kohdataan-somen!\n          </h1>\n        </div>\n      ),\n      placement: 'center',\n      target: 'body',\n      disableBeacon: true,\n    },\n    {\n      target: '.nav-link-Profiili',\n      content: (\n        <div aria-label=\"tutoriaali-2\" role=\"dialog\" tabIndex={-1}>\n          <p className=\"tutorial-step\">2/6</p>\n          <h1 className=\"tutorial-header\">Tämä on oma profiilisi!</h1>\n          <p className=\"tutorial-text\">Löydät sen kohdasta Profiili.</p>\n        </div>\n      ),\n    },\n    {\n      target: '.user-edit-button',\n      content: (\n        <div aria-label=\"tutoriaali-3\" role=\"dialog\" tabIndex={-1}>\n          <p className=\"tutorial-step\">3/6</p>\n          <h1 className=\"tutorial-header\">\n            Profiilisi tiedot näkyvät myös muille.\n          </h1>\n          <p className=\"tutorial-text\">\n            Voit muokata tietoja kohdasta Muokkaa.\n          </p>\n        </div>\n      ),\n    },\n    {\n      target: '.nav-bot',\n      content: (\n        <div aria-label=\"tutoriaali-4\" role=\"dialog\" tabIndex={-1}>\n          <p className=\"tutorial-step\">4/6</p>\n          <h1 className=\"tutorial-header\">\n            Jos tarvitset apua tai haluat lähettää valvojalle viestin, voit\n            klikata Bottia.\n          </h1>\n          <p className=\"tutorial-text\">Löydät sen kohdasta Botti.</p>\n        </div>\n      ),\n    },\n  ]\n\n  const reversedSteps = [\n    {\n      target: '.nav-bot',\n      content: (\n        <div aria-label=\"tutoriaali-4\" role=\"dialog\" tabIndex={-1}>\n          <p className=\"tutorial-step\">4/6</p>\n          <h1 className=\"tutorial-header\">\n            Jos tarvitset apua tai haluat lähettää valvojalle viestin, voit\n            klikata Bottia.\n          </h1>\n          <p className=\"tutorial-text\">Löydät sen kohdasta Botti.</p>\n          <ButtonContainer\n            className=\"button profile-tutorial-btn\"\n            onClick={goToFriendsPage}\n          >\n            Seuraava\n          </ButtonContainer>\n        </div>\n      ),\n      disableBeacon: true,\n    },\n    {\n      target: '.user-edit-button',\n      content: (\n        <div aria-label=\"tutoriaali-3\" role=\"dialog\" tabIndex={-1}>\n          <p className=\"tutorial-step\">3/6</p>\n          <h1 className=\"tutorial-header\">\n            Profiilisi tiedot näkyvät myös muille.\n          </h1>\n          <p className=\"tutorial-text\">\n            Voit muokata tietoja kohdasta Muokkaa.\n          </p>\n        </div>\n      ),\n    },\n    {\n      target: '.nav-link-Profiili',\n      content: (\n        <div aria-label=\"tutoriaali-2\" role=\"dialog\" tabIndex={-1}>\n          <p className=\"tutorial-step\">2/6</p>\n          <h1 className=\"tutorial-header\">Tämä on oma profiilisi!</h1>\n          <p className=\"tutorial-text\">Löydät sen kohdasta Profiili.</p>\n        </div>\n      ),\n    },\n    {\n      content: (\n        <div aria-label=\"tutoriaali-1\" role=\"dialog\" tabIndex={-1}>\n          <p className=\"tutorial-step\">1/6</p>\n          <h1 className=\"tutorial-header\">\n            Seuraavilla sivuilla esittelemme sinulle Kohdataan-somen!\n          </h1>\n        </div>\n      ),\n      placement: 'center',\n      target: 'body',\n      styles: { buttonNext: { display: 'none' } },\n    },\n  ]\n\n  const updateTutorialWatched = () => updateUser({ tutorialWatched: true })\n\n  const goToPreviousPage = () => {\n    if (\n      history.location &&\n      history.location.state &&\n      history.location.state.searchTerm\n    ) {\n      history.push({\n        pathname: '/friends',\n        state: { searchTerm: history.location.state.searchTerm },\n      })\n    } else {\n      history.goBack()\n    }\n  }\n\n  return (\n    <main className=\"profile-container\">\n      <div className=\"go-back-button-container\">\n        {!ownProfile && startDirectChannel && (\n          <ButtonContainer\n            onClick={goToPreviousPage}\n            className=\"profile-modal-header-button\"\n          >\n            {'< Palaa'}\n          </ButtonContainer>\n        )}\n      </div>\n      <div className=\"profile-top-row\">\n        <ProfileImage mmuser={mmuser} />\n        {ownProfile && (\n          <Link className=\"edit-me-link\" to=\"/edit-me\">\n            <EditButton label=\"muokkaa profiilia\" />\n          </Link>\n        )}\n      </div>\n      <header className=\"profile-header-container\">\n        {mmuser && myUserInfo && (\n          <ProfileHeader\n            nickname={nickname}\n            location={location}\n            birthdate={birthdate}\n            showAge={showAge}\n            showLocation={showLocation}\n          />\n        )}\n      </header>\n      <Description text={description} />\n\n      <section className=\"interests-container\">\n        <div className=\"interests-header\">\n          <h2 className=\"profile-secondary-header\">Minua kiinnostaa</h2>\n          {ownProfile && (\n            <Link className=\"edit-interests-link\" to=\"/edit-interests\">\n              <EditButton\n                isHighlighted={false}\n                label=\"muokkaa mielenkiinnon kohteita\"\n              />\n            </Link>\n          )}\n        </div>\n        <InterestsGrid interestList={userInterests} />\n      </section>\n\n      {!ownProfile &&\n        startDirectChannel &&\n        myUserInfo.blockedUsers &&\n        !myUserInfo.blockedUsers.includes(currentUserId) && (\n          <div className=\"start-conversation-button\">\n            <ButtonContainer\n              onClick={startDirectChannel}\n              className=\"profile-dm-button\"\n            >\n              Lähetä viesti\n            </ButtonContainer>\n          </div>\n        )}\n      {!tutorialWatched && ownProfile && (\n        <aside>\n          <Tutorial\n            steps={returnToTutorial ? reversedSteps : steps}\n            history={history}\n            updateTutorialWatched={updateTutorialWatched}\n            navigateBack={returnToTutorial}\n          />\n        </aside>\n      )}\n    </main>\n  )\n}\n\nProfile.propTypes = {\n  currentUserId: propTypes.string,\n  mmuser: propTypes.instanceOf(Object).isRequired,\n  myUserInfo: propTypes.instanceOf(Object).isRequired,\n  userInterests: propTypes.instanceOf(Array),\n  ownProfile: propTypes.bool,\n  startDirectChannel: propTypes.func,\n  history: propTypes.instanceOf(Object),\n  updateUser: propTypes.func,\n}\n\nProfile.defaultProps = {\n  ownProfile: false,\n  startDirectChannel: null,\n  userInterests: [],\n  history: null,\n  updateUser: null,\n  currentUserId: null,\n}\n\nexport default memo(Profile)\n","import React, { memo } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport PropTypes from 'prop-types'\nimport { updateUser as updateUserAction } from '../store/user/userAction'\nimport Profile from '../components/Profile'\n\nconst ProfileContainer = props => {\n  const {\n    currentUserId,\n    mmuser,\n    userInterests,\n    myUserInfo,\n    updateUser,\n    history,\n  } = props\n\n  if (myUserInfo && !myUserInfo.profileReady) history.push('/registration/info')\n\n  return (\n    <Profile\n      currentUserId={currentUserId}\n      mmuser={mmuser}\n      ownProfile\n      userInterests={userInterests}\n      myUserInfo={myUserInfo}\n      updateUser={updateUser}\n      history={history}\n    />\n  )\n}\n\nconst mapStateToProps = state => {\n  const { currentUserId } = state.entities.users\n  const mmuser = state.entities.users.profiles[currentUserId]\n  const userInterests = state.user.interests\n  const myUserInfo = state.user\n  return {\n    currentUserId,\n    mmuser,\n    userInterests,\n    myUserInfo,\n  }\n}\n\nProfileContainer.propTypes = {\n  currentUserId: PropTypes.string.isRequired,\n  mmuser: PropTypes.instanceOf(Object).isRequired,\n  myUserInfo: PropTypes.instanceOf(Object).isRequired,\n  userInterests: PropTypes.instanceOf(Array),\n  updateUser: PropTypes.func.isRequired,\n  history: PropTypes.instanceOf(Object),\n}\n\nProfileContainer.defaultProps = {\n  userInterests: [],\n  history: null,\n}\n\nconst shouldComponentUpdate = (props, prevProps) => {\n  const { match: pMatch, ...prest } = prevProps\n  const { match, ...rest } = props\n  return JSON.stringify(rest) === JSON.stringify(prest)\n}\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n      updateUser: updateUserAction,\n    },\n    dispatch\n  )\n// export default GroupsContainer\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(memo(ProfileContainer, shouldComponentUpdate))\n","import React, { useState, useEffect, memo } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { getProfilesByUsernames as getProfilesByUsernamesAction } from 'mattermost-redux/actions/users'\nimport { createDirectChannel as createDirectChannelAction } from 'mattermost-redux/actions/channels'\nimport PropTypes from 'prop-types'\nimport { getInterestsByUsername, getUserByUsername } from '../api/user/user'\nimport Profile from '../components/Profile'\n\nconst OtherUserProfileContainer = props => {\n  // mattermost user\n  const {\n    currentUser,\n    username,\n    getProfilesByUsernames,\n    history,\n    createDirectChannel,\n    currentUserId,\n  } = props\n\n  const [mmuser, setmmUser] = useState({})\n  const [interests, setInterests] = useState([])\n  const [otherUserInfo, setOtherUserInfo] = useState([])\n\n  const startDirectChannel = async () => {\n    const newChannel = await createDirectChannel(currentUser.id, mmuser.id)\n    if (newChannel && newChannel.data && newChannel.data.id)\n      history.push(`/chat/${newChannel.data.id}`)\n  }\n\n  // If username is given, get other user's info\n  useEffect(() => {\n    const fetchOtherUser = async () => {\n      try {\n        const res = await getInterestsByUsername(\n          localStorage.getItem('authToken'),\n          username\n        )\n        if (res.result[0]) {\n          const data = res.result[0].interests\n          setInterests(data)\n        }\n        const userInfo = await getUserByUsername(\n          username,\n          localStorage.getItem('authToken')\n        )\n        if (userInfo) {\n          setOtherUserInfo(userInfo)\n        }\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.error(e)\n      }\n    }\n    if (username) {\n      getProfilesByUsernames([username])\n        .then(data => setmmUser(data.data[0]))\n        // eslint-disable-next-line no-console\n        .catch(e => console.error(e))\n      // TODO: Get other users info from node backend (location, description)\n      fetchOtherUser()\n    }\n  }, [username, getProfilesByUsernames])\n\n  return (\n    <Profile\n      mmuser={mmuser}\n      userInterests={interests}\n      myUserInfo={otherUserInfo}\n      startDirectChannel={startDirectChannel}\n      history={history}\n      currentUserId={currentUserId}\n    />\n  )\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const { currentUserId } = state.entities.users\n  const { username } = ownProps.match.params\n  const currentUser = state.entities.users.profiles[currentUserId]\n  const interestOptions = state.interests.results\n\n  return {\n    currentUserId,\n    currentUser,\n    username,\n    interestOptions,\n  }\n}\n\nOtherUserProfileContainer.propTypes = {\n  currentUser: PropTypes.instanceOf(Object),\n  username: PropTypes.string,\n  getProfilesByUsernames: PropTypes.func.isRequired,\n  createDirectChannel: PropTypes.func.isRequired,\n  history: PropTypes.instanceOf(Object).isRequired,\n  currentUserId: PropTypes.string.isRequired,\n}\n\nOtherUserProfileContainer.defaultProps = {\n  currentUser: {},\n  username: '',\n}\n\nconst shouldComponentUpdate = (props, prevProps) => {\n  const { match: pMatch, ...prest } = prevProps\n  const { match, ...rest } = props\n  return JSON.stringify(rest) === JSON.stringify(prest)\n}\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n      getProfilesByUsernames: getProfilesByUsernamesAction,\n      createDirectChannel: createDirectChannelAction,\n    },\n    dispatch\n  )\n// export default GroupsContainer\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(memo(OtherUserProfileContainer, shouldComponentUpdate))\n","import React, { useEffect, useState, memo } from 'react'\nimport PropTypes from 'prop-types'\nimport useForm from 'react-hook-form'\nimport { Link } from 'react-router-dom'\nimport ValidatedInputField from '../ValidatedInputField'\nimport ModalContainer from '../ModalContainer'\nimport ButtonContainer from '../ButtonContainer'\nimport './styles.scss'\n\n// This component needs a function that takes in an object that contains email and phonenumber,\n// And then do something with this data. (send email with verification link, send password reset link, etc..)\n\nconst EmailSmsForm = props => {\n  const {\n    title,\n    pagePurpose,\n    handleRequest,\n    apiError,\n    setApiError,\n    text,\n    setText,\n  } = props\n  const [phoneNumber, setPhoneNumber] = useState('')\n  const [showModal, setShowModal] = useState(false)\n  const { register, handleSubmit, errors, setError, clearError } = useForm()\n\n  useEffect(() => {\n    const setApiErrors = () => {\n      if (apiError && text === '') {\n        setError('email', 'loginError')\n      } else if (apiError && text !== '') {\n        setShowModal(true)\n      }\n    }\n    setApiErrors()\n  }, [apiError, text, setError])\n\n  const onSubmit = async data => {\n    await handleRequest(data.email.trim().toLowerCase())\n  }\n\n  const closeModal = () => {\n    setText('')\n    setApiError(false)\n    setShowModal(false)\n  }\n\n  return (\n    <div className=\"email-sms-form-container\">\n      <h1 className=\"main-title\">Kohdataan</h1>\n\n      <div className=\"email-sms-form-content-container\">\n        <h2 className=\"email-sms-form-title\">{title}</h2>\n        <p>Anna sähköpostiosoitteesi.</p>\n        {pagePurpose === 'changePassword' ? (\n          <p>\n            Lähetämme sinulle linkin, josta pääset vaihtamaan unohtuneen\n            salasanan.\n          </p>\n        ) : (\n          <p>\n            Lähetämme sinulle uudelleen linkin, josta pääset vahvistamaan\n            sähköpostisi ja kirjautumaan sisään.\n          </p>\n        )}\n\n        <div className=\"email-sms-form-input-container\">\n          <form\n            className=\"email-sms-input-fields-container\"\n            onSubmit={handleSubmit(onSubmit)}\n          >\n            <div className=\"formfield-container\">\n              <ValidatedInputField\n                label=\"Sähköposti\"\n                name=\"email\"\n                ref={register({\n                  required: true,\n                })}\n                ariaInvalid={!!errors.email}\n                onChange={() => {\n                  clearError()\n                  setApiError(false)\n                }}\n                inputClassName=\"registration-problem-input-text\"\n                labelClassName=\"registration-problem-input-field\"\n                showPlaceholder={false}\n              />\n              <div className=\"error-text\">\n                {errors.email &&\n                  errors.email.type === 'required' &&\n                  'Kirjoita sähköpostiosoite.'}\n                {errors.email &&\n                  errors.email.type === 'loginError' &&\n                  'Tarkista sähköposti.'}\n              </div>\n            </div>\n            <div className=\"hidden-field\">\n              <ValidatedInputField\n                label=\"Puhelinnumero\"\n                value={phoneNumber}\n                name=\"phoneNumber\"\n                onChange={e => setPhoneNumber(e.target.value)}\n                inputClassName=\"registration-problem-input-text\"\n                labelClassName=\"registration-problem-input-field\"\n                showPlaceholder={false}\n              />\n            </div>\n            <button\n              type=\"submit\"\n              className=\"registration-problem-button email-sms-form-button\"\n              onClick={handleSubmit(onSubmit)}\n              tabIndex={0}\n            >\n              Lähetä\n            </button>\n          </form>\n          <div className=\"registration-problem-link-container\">\n            <Link\n              className=\"registration-problem-link\"\n              to=\"/registrationproblem\"\n            >\n              Tarvitsen apua kirjautumisessa.\n            </Link>\n            <Link className=\"registration-problem-link\" to=\"/login\">\n              Haluan kirjautua sisään.\n            </Link>\n          </div>\n        </div>\n      </div>\n      <ModalContainer\n        modalIsOpen={showModal}\n        closeModal={closeModal}\n        label=\"Email already confirmed\"\n      >\n        <div>\n          <h3 className=\"edit-profile-modal-text\">{text}</h3>\n          <ButtonContainer\n            className=\"icon-btn edit-profile-icon-btn\"\n            onClick={closeModal}\n            label=\"Sulje\"\n          >\n            <div className=\"go-back-button\" />\n          </ButtonContainer>\n        </div>\n      </ModalContainer>\n    </div>\n  )\n}\n\nEmailSmsForm.propTypes = {\n  handleRequest: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  pagePurpose: PropTypes.string.isRequired,\n  apiError: PropTypes.bool,\n  setApiError: PropTypes.func,\n  text: PropTypes.string,\n  setText: PropTypes.func,\n}\n\nEmailSmsForm.defaultProps = {\n  apiError: false,\n  setApiError: null,\n  text: '',\n  setText: null,\n}\n\nexport default memo(EmailSmsForm)\n","import React, { memo, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport * as API from '../api/user/user'\nimport EmailSmsForm from '../components/EmailSmsForm'\n\nconst EmailVerificationContainer = props => {\n  const { history } = props\n  const [apiError, setApiError] = useState(false)\n  const [text, setText] = useState('')\n\n  const handleVerifyRequest = async resetInfo => {\n    const formattedInfo = {\n      email: resetInfo.toLowerCase(),\n      phoneNumber: '',\n    }\n    const resp = await API.sendVerifyEmailLink(formattedInfo)\n    if (resp.success) {\n      history.push('/registration-success')\n    } else if (resp.message === 'This account is already verified') {\n      setText('Sähköposti on jo vahvistettu.')\n      setApiError(true)\n    } else {\n      setText('')\n      setApiError(true)\n    }\n  }\n\n  return (\n    <main>\n      <EmailSmsForm\n        handleRequest={handleVerifyRequest}\n        title=\"Vahvistuslinkin lähettäminen uudelleen\"\n        pagePurpose=\"verifyEmail\"\n        apiError={apiError}\n        setApiError={setApiError}\n        text={text}\n        setText={setText}\n      />\n    </main>\n  )\n}\n\nEmailVerificationContainer.propTypes = {\n  history: PropTypes.instanceOf(Object).isRequired,\n}\n\n// TODO: refactor\nconst shouldComponentUpdate = (props, prevProps) => {\n  const { match: pMatch, ...prest } = prevProps\n  const { match, ...rest } = props\n  return JSON.stringify(rest) === JSON.stringify(prest)\n}\n\nexport default memo(EmailVerificationContainer, shouldComponentUpdate)\n","import React, { memo, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport * as API from '../api/user/user'\nimport EmailSmsForm from '../components/EmailSmsForm'\n\nconst PasswordResetRequestContainer = props => {\n  const { history } = props\n  const [apiError, setApiError] = useState(false)\n\n  const handleResetRequest = async resetInfo => {\n    const infoToSend = { email: resetInfo, phoneNumber: '' }\n    const resp = await API.resetPassword(infoToSend)\n    if (resp.success) {\n      history.push('/reset-password-info')\n    } else {\n      setApiError(true)\n    }\n  }\n\n  return (\n    <main>\n      <EmailSmsForm\n        title=\"Salasanan vaihtaminen\"\n        pagePurpose=\"changePassword\"\n        handleRequest={handleResetRequest}\n        apiError={apiError}\n        setApiError={setApiError}\n      />\n    </main>\n  )\n}\n\nPasswordResetRequestContainer.propTypes = {\n  history: PropTypes.instanceOf(Object).isRequired,\n}\n\n// TODO: refactor\nconst shouldComponentUpdate = (props, prevProps) => {\n  const { match: pMatch, ...prest } = prevProps\n  const { match, ...rest } = props\n  return JSON.stringify(rest) === JSON.stringify(prest)\n}\n\nexport default memo(PasswordResetRequestContainer, shouldComponentUpdate)\n","import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\nimport './styles.scss'\n\nconst EmailSmsInfo = props => {\n  const { description, guide } = props\n\n  return (\n    <main role=\"main\" className=\"email-sms-info-container\">\n      <h1 className=\"main-title\">Kohdataan</h1>\n\n      <div className=\"email-sms-info-content-container\">\n        <h2 className=\"email-sms-info-title\">Salasanan vaihtaminen</h2>\n        <p>{description}</p>\n\n        <div className=\"email-sms-info-input-container\">\n          <div className=\"email-sms-info-content\">\n            {guide}\n            <p className=\"reminder-content-text\">\n              Jos et löydä sähköpostista viestiä, muista tarkistaa myös\n              roskapostikansio.\n            </p>\n          </div>\n          <div className=\"divider\" aria-hidden=\"true\" />\n          <div className=\"registration-problem-link-container email-sms-info-link-container\">\n            <Link\n              className=\"registration-problem-link\"\n              to=\"/registrationproblem\"\n            >\n              Tarvitsen apua salasanan vaihtamisessa.\n            </Link>\n            <Link className=\"registration-problem-link\" to=\"/login\">\n              Haluan kirjautua sisään.\n            </Link>\n          </div>\n        </div>\n      </div>\n    </main>\n  )\n}\n\n// PropTypes.element allows us to pass in jsx\nEmailSmsInfo.propTypes = {\n  description: PropTypes.string.isRequired,\n  guide: PropTypes.element,\n}\n\nEmailSmsInfo.defaultProps = {\n  guide: {},\n}\n\nexport default memo(EmailSmsInfo)\n","import React, { memo } from 'react'\nimport EmailSmsInfo from '../components/EmailSmsInfo'\n\nconst PasswordResetInfoContainer = () => {\n  const passwordResetInfo = (\n    <ol className=\"email-sms-info-list\">\n      <li>Avaa sähköposti.</li>\n      <li>\n        Olet saanut viestin, jossa on lähettäjänä &quot;Kohdataan&quot; ja\n        aiheena &quot;Salasanan vaihtaminen&quot;.\n      </li>\n      <li>\n        Kun klikkaat viestissä olevaa linkkiä, pääset sivulle, jossa voit\n        vaihtaa salasanan.\n      </li>\n      <li>Anna sivulla uusi salasana ohjeiden mukaan.</li>\n      <li>Kun klikkaat &quot;Vaihda&quot;, pääset kirjautumaan palveluun!</li>\n    </ol>\n  )\n  return (\n    <EmailSmsInfo\n      description=\"Lähetimme sinulle sähköpostilla linkin, josta pääset vaihtamaan salasanan.\"\n      guide={passwordResetInfo}\n    />\n  )\n}\n\n// TODO: refactor\nconst shouldComponentUpdate = (props, prevProps) => {\n  const { match: pMatch, ...prest } = prevProps\n  const { match, ...rest } = props\n  return JSON.stringify(rest) === JSON.stringify(prest)\n}\n\nexport default memo(PasswordResetInfoContainer, shouldComponentUpdate)\n","import React, { useState, memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\nimport useForm from 'react-hook-form'\nimport ValidatedInputField from '../ValidatedInputField'\nimport ToolTipModalContainer from '../../containers/ToolTipModalContainer'\nimport './styles.scss'\n\nconst PasswordResetPage = props => {\n  const { handleNewPassword } = props\n  const { register, handleSubmit, errors, watch } = useForm()\n  const [passwordModalIsOpen, setPasswordModalIsOpen] = useState(false)\n\n  const closeModal = () => {\n    setPasswordModalIsOpen(false)\n  }\n\n  const openPasswordModal = () => {\n    setPasswordModalIsOpen(true)\n  }\n\n  return (\n    <div className=\"password-reset-container\">\n      <h1 className=\"main-title\">Kohdataan</h1>\n\n      <div className=\"password-reset-content-container\">\n        <h2 className=\"password-reset-title\">Salasanan vaihtaminen</h2>\n\n        <form\n          className=\"password-reset-input-container\"\n          onSubmit={handleSubmit(handleNewPassword)}\n        >\n          <div className=\"formfield-container\">\n            <div className=\"info-circle-line\">\n              <ValidatedInputField\n                label=\"Salasana\"\n                name=\"password\"\n                ref={register({\n                  required: true,\n                  maxLength: 30,\n                  // password must contain lower and upper case letters and numbers\n                  pattern: /^(?=.*[0-9]+.*)(?=.*[a-zäöüß]+.*)(?=.*[A-ZÄÖÜ]+.*)[\\w\\W]{10,}$/,\n                })}\n                type=\"password\"\n                ariaInvalid={!!errors.password}\n                inputClassName=\"create-account-input-text\"\n                labelClassName={\n                  errors.password\n                    ? 'create-account-errors-field'\n                    : 'create-account-input-field'\n                }\n                showPlaceholder={false}\n              />\n              <div className=\"info-circle\">\n                <button\n                  type=\"button\"\n                  onClick={openPasswordModal}\n                  className=\"info-circle-button\"\n                  aria-labelledby=\"password-info\"\n                />\n              </div>\n              <ToolTipModalContainer\n                modalIsOpen={passwordModalIsOpen}\n                closeModal={closeModal}\n                label=\"show-password-info-dialog\"\n                content=\"Salasanassa tulee olla vähintään 10 merkkiä, ja siinä pitää\n                  olla isoja kirjaimia, pieniä kirjaimia ja numeroita.\"\n              />\n            </div>\n            <div className=\"error-text\">\n              {errors.password &&\n                errors.password.type === 'required' &&\n                'Kirjoita salasana'}\n              {errors.password &&\n                errors.password.type === 'pattern' &&\n                'Salasanan on oltava vähintään 10 merkkiä pitkä ja siinä pitää olla isoja kirjaimia, pieniä kirjaimia ja numeroita.'}\n              {errors.password &&\n                errors.password.type === 'maxLength' &&\n                'Salasanan on oltava enintään 30 merkkiä pitkä.'}\n            </div>\n          </div>\n\n          <div className=\"formfield-container\">\n            <ValidatedInputField\n              label=\"Salasana uudestaan\"\n              name=\"passwordConfirm\"\n              ref={register({\n                required: true,\n                validate: value => {\n                  return value === watch('password')\n                },\n              })}\n              type=\"password\"\n              ariaInvalid={!!errors.passwordConfirm}\n              inputClassName=\"create-account-input-text\"\n              labelClassName={\n                errors.passwordConfirm\n                  ? 'create-account-errors-field'\n                  : 'create-account-input-field'\n              }\n              showPlaceholder={false}\n            />\n            <div className=\"error-text\">\n              {errors.passwordConfirm &&\n                errors.passwordConfirm.type === 'required' &&\n                'Kirjoita salasana uudestaan'}\n              {errors.passwordConfirm &&\n                errors.passwordConfirm.type === 'validate' &&\n                'Salasanat eivät ole samat.'}\n            </div>\n          </div>\n          <button\n            type=\"submit\"\n            className=\"create-account-button\"\n            onKeyPress={handleSubmit(handleNewPassword)}\n            tabIndex=\"0\"\n          >\n            {'Vaihda'}\n          </button>\n        </form>\n\n        <div className=\"password-reset-link-container\">\n          <Link className=\"password-reset-link\" to=\"/registrationproblem\">\n            Tarvitsen apua salasanan vaihtamisessa.\n          </Link>\n          <Link className=\"password-reset-link\" to=\"/login\">\n            Haluan kirjautua sisään.\n          </Link>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nPasswordResetPage.propTypes = {\n  handleNewPassword: PropTypes.func.isRequired,\n}\n\nexport default memo(PasswordResetPage)\n","import React, { memo, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport * as API from '../api/user/user'\nimport PasswordResetPage from '../components/PasswordResetPage'\n\nconst PasswordResetPageContainer = props => {\n  const {\n    match: {\n      params: { uuid },\n    },\n    history,\n  } = props\n\n  useEffect(() => {\n    const checkIfLinkIsUsed = async () => {\n      const data = { uuid }\n      await API.checkIfResetLinkHasBeenUsed(data).then(resp => {\n        if (!resp.success) {\n          history.push({\n            pathname: '/login',\n            state: {\n              textToAdd: 'Linkki on käytetty. Vaihda salasana uudestaan.',\n            },\n          })\n        }\n      })\n    }\n    checkIfLinkIsUsed()\n  }, [uuid, history])\n\n  const handleNewPassword = async password => {\n    const data = { uuid, password: password.password }\n    await API.setNewPassword(data).then(resp => {\n      if (!resp.success) {\n        history.push({\n          state: {\n            textToAdd:\n              'Resetointilinkki on joko vanhentunut, käytetty tai väärä.',\n          },\n        })\n      } else {\n        history.push({\n          pathname: '/login',\n          state: { textToAdd: 'Salasana vaihdettu.' },\n        })\n      }\n    })\n  }\n\n  return <PasswordResetPage handleNewPassword={handleNewPassword} />\n}\n\nPasswordResetPageContainer.propTypes = {\n  match: PropTypes.instanceOf(Object).isRequired,\n  history: PropTypes.instanceOf(Object).isRequired,\n}\n\n// TODO: refactor\nconst shouldComponentUpdate = (props, prevProps) => {\n  const { match: pMatch, ...prest } = prevProps\n  const { match, ...rest } = props\n  return JSON.stringify(rest) === JSON.stringify(prest)\n}\n\nexport default memo(PasswordResetPageContainer, shouldComponentUpdate)\n","import React from 'react'\nimport ContentLoader from 'react-content-loader'\n\nexport const MyLoader = () => (\n  <ContentLoader\n    height={160}\n    width={400}\n    speed={2}\n    primaryColor=\"#f3f3f3\"\n    secondaryColor=\"#ecebeb\"\n  >\n    <rect x=\"69\" y=\"10\" rx=\"4\" ry=\"4\" width=\"170\" height=\"15\" />\n    <rect x=\"70\" y=\"42\" rx=\"3\" ry=\"3\" width=\"100\" height=\"13\" />\n    <circle cx=\"30\" cy=\"30\" r=\"30\" />\n  </ContentLoader>\n)\n\nexport const TextLine = () => (\n  <ContentLoader\n    height={8}\n    width={400}\n    speed={2}\n    primaryColor=\"#f3f3f3\"\n    secondaryColor=\"#ecebeb\"\n  >\n    <rect x=\"0\" y=\"1\" rx=\"5\" ry=\"5\" width=\"120\" height=\"8\" />\n  </ContentLoader>\n)\n","import handleFetchErrors from '../errors'\n\nconst addUserToBlocked = async (data, token) => {\n  const uri = process.env.REACT_APP_NODE_BACKEND_URL\n  try {\n    const resp = await fetch(`${uri}/blockUser`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n    })\n    return handleFetchErrors(resp)\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n\nconst removeUserFromBlocked = async (data, token) => {\n  const uri = process.env.REACT_APP_NODE_BACKEND_URL\n  try {\n    const resp = await fetch(`${uri}/blockUser`, {\n      method: 'DELETE',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n    })\n    return handleFetchErrors(resp)\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n\nexport { addUserToBlocked, removeUserFromBlocked }\n","import React, { useState, useEffect, memo } from 'react'\nimport './styles.scss'\nimport propTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\nimport ButtonContainer from '../../ButtonContainer'\nimport ModalContainer from '../../ModalContainer'\nimport { TextLine } from '../../ContentLoader'\nimport {\n  addUserToBlocked,\n  removeUserFromBlocked,\n} from '../../../api/blocking/blocked_user'\nimport { getUserByUsername, getUser } from '../../../api/user/user'\n\nconst Friend = props => {\n  const {\n    channel,\n    unreadCount,\n    getUsername,\n    getPosts,\n    getLatestMessage,\n    membersInChannel,\n    myUserInfo,\n    getStatusById,\n    currentUserId,\n  } = props\n\n  const [user, setUser] = useState({})\n  const [posts, setPosts] = useState({})\n  const [blockedFriends, setBlockedFriends] = useState(myUserInfo.blockedUsers)\n  const [blocked, setBlocked] = useState(false)\n  const [showModal, setShowModal] = useState(false)\n  const [otherUserInfo, setOtherUserInfo] = useState({})\n  const masterUserEmail = process.env.REACT_APP_MASTER_USER_EMAIL\n\n  const getIconMemberStatus = userId =>\n    `friends-${getStatusById(userId)}-status-icon`\n\n  const imageUri =\n    user && user.id\n      ? `${process.env.REACT_APP_MATTERMOST_URL}/api/v4/users/${\n          user.id\n        }/image?${Date.now()}`\n      : null\n  const message = getLatestMessage(posts)\n\n  useEffect(() => {\n    // get member userinfo\n    const members = Object.values(membersInChannel[channel.id])\n    const getUserInfo = async () => {\n      const userObj = getUsername(members)\n      if (userObj) {\n        setUser(userObj)\n      }\n    }\n    getUserInfo()\n  }, [getUsername, membersInChannel, channel])\n\n  useEffect(() => {\n    // Get channel posts\n    const fetchPosts = async () => {\n      if (channel && channel.id) {\n        const channelPosts = await getPosts(channel.id, 0, 100)\n        if (channelPosts.data) setPosts(channelPosts.data)\n      }\n    }\n    fetchPosts()\n  }, [channel, getPosts])\n\n  useEffect(() => {\n    // checks if friend is blocked\n    const checkUserBlockedStatus = async () => {\n      if (blockedFriends && blockedFriends.indexOf(user.id) !== -1) {\n        setBlocked(true)\n      }\n    }\n    if (myUserInfo && user) checkUserBlockedStatus()\n  }, [user, myUserInfo, blockedFriends])\n\n  useEffect(() => {\n    // fetches user info for other user containing blocked users\n    const fetchOtherUser = async () => {\n      if (\n        user &&\n        user.delete_at === 0 &&\n        user.position !== 'deleted' &&\n        user.username !== 'surveybot' &&\n        user.email !== masterUserEmail\n      ) {\n        const userInfo = await getUserByUsername(\n          user.username,\n          localStorage.getItem('authToken')\n        )\n        if (userInfo) {\n          const res = await getUser(\n            userInfo.id,\n            localStorage.getItem('authToken')\n          )\n          if (res) setOtherUserInfo(res)\n        }\n      }\n    }\n    fetchOtherUser()\n  }, [user, masterUserEmail])\n\n  const toggleBlockedStatus = async () => {\n    const { id } = user\n    const token = localStorage.getItem('authToken')\n    if (blockedFriends.includes(id)) {\n      setBlockedFriends(blockedFriends.filter(foundId => foundId !== id))\n      const data = { unblockedUser: user.id }\n      await removeUserFromBlocked(data, token)\n      setBlocked(false)\n    } else {\n      setBlockedFriends(blockedFriends.concat(id))\n      const data = { blockedUser: user.id }\n      await addUserToBlocked(data, token)\n      setBlocked(true)\n    }\n    setShowModal(false)\n  }\n\n  if (\n    user.delete_at === 0 &&\n    user.username !== 'surveybot' &&\n    otherUserInfo.blockedUsers &&\n    !otherUserInfo.blockedUsers.includes(currentUserId) &&\n    !otherUserInfo.deleteAt\n  ) {\n    return (\n      <div className=\"friend-box-container\">\n        <div className=\"friend-icon-box\">\n          {!blocked && (\n            <div>\n              <img className=\"friend-icon\" src={imageUri} alt=\"Profiilikuva\" />\n              <div className={getIconMemberStatus(user.id)} />\n            </div>\n          )}\n          {blocked && <i className=\"fas fa-ban fa-lg blocked-icon\" />}\n        </div>\n        <div className=\"friend-messages-content\">\n          <Link\n            className=\"friend-box\"\n            to={blocked ? `/friends` : `/chat/${channel.id}`}\n          >\n            <div className=\"friend-box-content\">\n              <div\n                className={blocked ? 'blocked-friend-header' : 'friend-header'}\n              >\n                <span className=\"sr-only\">Viesti käyttäjältä </span>\n                <p className=\"friends-nickname\">{user.nickname}</p>\n              </div>\n              <div\n                className={\n                  blocked\n                    ? 'blocked-friend-text-content text-content'\n                    : 'friend-text-content text-content'\n                }\n              >\n                {message && !blocked ? (\n                  <>{message}</>\n                ) : (\n                  <TextLine className=\"text-content\" />\n                )}\n              </div>\n            </div>\n          </Link>\n          <Link\n            className=\"unread-box\"\n            to={blocked ? `/friends` : `/chat/${channel.id}`}\n          >\n            {unreadCount > 0 && !blocked ? (\n              <mark className=\"unread-badge\">{unreadCount}</mark>\n            ) : (\n              <div className=\"no-unread-messages\">{}</div>\n            )}\n            <span className=\"sr-only\">\n              `{unreadCount} lukemattomia viestejä`\n            </span>\n          </Link>\n          <ButtonContainer\n            className=\"icon-btn block-user-icon-btn\"\n            onClick={() => setShowModal(true)}\n            label=\"Estä käyttäjä\"\n          >\n            <i\n              className=\"fas fa-ellipsis-v fa-lg block-user-icon\"\n              aria-hidden=\"true\"\n            />\n          </ButtonContainer>\n        </div>\n        <ModalContainer\n          modalIsOpen={showModal}\n          closeModal={() => setShowModal(false)}\n          label=\"Lisää tai poista kaverin esto\"\n        >\n          <div className=\"block-user-modal-content\">\n            <h3 className=\"interests-modal-text\">\n              {blocked\n                ? 'Haluatko poistaa kaverin eston?'\n                : 'Haluatko varmasti estää tämän kaverin?'}\n            </h3>\n            <p>\n              {blocked\n                ? 'Voit taas viestitellä kaverin kanssa kahdestaan.'\n                : 'Estetty kaveri ei voi enää lähettää sinulle yksityisviestejä.'}\n            </p>\n            <ButtonContainer\n              onClick={() => setShowModal(false)}\n              className=\"cancel-button block-user-modal-btn\"\n            >\n              En\n            </ButtonContainer>\n            <ButtonContainer\n              onClick={toggleBlockedStatus}\n              className=\"confirm-button block-user-modal-btn\"\n            >\n              Kyllä\n            </ButtonContainer>\n          </div>\n        </ModalContainer>\n      </div>\n    )\n  }\n  if (user.delete_at !== 0 || user.position === 'deleted') {\n    return (\n      <div>\n        <div className=\"friend-box-container\">\n          <div className=\"friend-icon-box\">\n            <i className=\"fas fa-circle deleted-user-icon\" />\n          </div>\n          <Link\n            className=\"friend-box\"\n            to={blocked ? `/friends` : `/chat/${channel.id}`}\n          >\n            <div className=\" friend-messages-content deleted-user-messages-content\">\n              <div className=\"friend-box-content\">\n                <div className=\"friend-header\">\n                  <p className=\"deleted-user-nickname\">Poistunut käyttäjä</p>\n                </div>\n                <div className=\"deleted-user-message text-content\">\n                  <div\n                    className={\n                      blocked\n                        ? 'blocked-friend-text-content text-content'\n                        : 'friend-text-content text-content'\n                    }\n                  >\n                    {message && !blocked ? (\n                      <>{message}</>\n                    ) : (\n                      <TextLine className=\"text-content\" />\n                    )}\n                  </div>\n                </div>\n              </div>\n              <div className=\"deleted-user-empty-fields\" />\n            </div>\n          </Link>\n        </div>\n      </div>\n    )\n  }\n  return <></>\n}\n\nFriend.propTypes = {\n  channel: propTypes.instanceOf(Object).isRequired,\n  unreadCount: propTypes.number.isRequired,\n  getUsername: propTypes.func.isRequired,\n  getPosts: propTypes.func.isRequired,\n  getLatestMessage: propTypes.func.isRequired,\n  membersInChannel: propTypes.instanceOf(Object).isRequired,\n  myUserInfo: propTypes.instanceOf(Object).isRequired,\n  getStatusById: propTypes.func.isRequired,\n  currentUserId: propTypes.string.isRequired,\n}\n\nexport default memo(Friend)\n","import React, { memo } from 'react'\nimport './styles.scss'\nimport propTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\n\nconst FriendSearch = props => {\n  const { profileData, searchTerm } = props\n\n  const imageUri =\n    profileData && profileData.id\n      ? `${process.env.REACT_APP_MATTERMOST_URL}/api/v4/users/${\n          profileData.id\n        }/image?${Date.now()}`\n      : null\n\n  if (\n    profileData.delete_at === 0 &&\n    // The default search includes emails and usernames, this way we filter away all others than nicknames.\n    profileData.nickname.toLowerCase().includes(searchTerm.toLowerCase())\n  ) {\n    return (\n      <div className=\"found-profile-container\">\n        <Link\n          className=\"found-profile-link\"\n          to={{\n            pathname: `/profile/${profileData.username}`,\n            state: {\n              searchTerm,\n            },\n          }}\n        >\n          <div className=\"found-profile-icon-box\">\n            <img\n              className=\"found-profile-icon\"\n              src={imageUri}\n              alt=\"Profiilikuva\"\n            />\n          </div>\n          <div className=\"found-friend-messages-content\">\n            <div className=\"found-profile-name\">\n              <p>{profileData.nickname}</p>\n            </div>\n            <div className=\"arrow-image-container\">\n              <div className=\"fas fa-chevron-right\" />\n            </div>\n          </div>\n        </Link>\n      </div>\n    )\n  }\n  return <></>\n}\n\nFriendSearch.propTypes = {\n  profileData: propTypes.instanceOf(Object).isRequired,\n  searchTerm: propTypes.string.isRequired,\n}\n\nexport default memo(FriendSearch)\n","import React from 'react'\nimport propTypes from 'prop-types'\nimport './styles.scss'\nimport ButtonContainer from '../ButtonContainer'\n\nconst SearchBar = React.forwardRef((props, ref) => {\n  const { handleChange, handleClear, placeholder, label } = props\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      e.preventDefault()\n    }\n  }\n\n  return (\n    <div className=\"search-bar-container\">\n      <span className=\"search-bar-description\">Hae kaveria</span>\n      <form className=\"search-bar\">\n        <input\n          className=\"search-bar-input\"\n          placeholder={placeholder}\n          onChange={e => handleChange(e.target.value)}\n          onKeyPress={e => handleKeyPress(e)}\n          ref={ref}\n          aria-label={label}\n        />\n        <div className=\"search-bar-icon-clear\">\n          <ButtonContainer\n            className=\"search-clear-button\"\n            onClick={handleClear}\n            label=\"Tyhjennä\"\n          >\n            <i className=\"fas fa-times times-icon\" aria-hidden=\"true\" />\n          </ButtonContainer>\n        </div>\n      </form>\n    </div>\n  )\n})\n\nSearchBar.propTypes = {\n  handleChange: propTypes.func.isRequired,\n  placeholder: propTypes.string.isRequired,\n  handleClear: propTypes.func.isRequired,\n  label: propTypes.string.isRequired,\n}\n\nSearchBar.defaultProps = {}\n\nexport default SearchBar\n","import React, { memo, useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport Friend from './Friend'\nimport FriendSearch from './FriendSearch'\nimport Tutorial from '../Tutorial'\nimport ButtonContainer from '../ButtonContainer'\nimport SearchBar from '../SearchBar'\nimport './styles.scss'\n\nconst Friends = props => {\n  const {\n    channels,\n    getUnreadCount,\n    getUsername,\n    getPosts,\n    searchProfiles,\n    getLatestMessage,\n    membersInChannel,\n    tutorialWatched,\n    updateUser,\n    history,\n    myUserInfo,\n    statuses,\n    currentUserId,\n  } = props\n\n  const [friendSearch, setFriendSearch] = useState('')\n  const [friendSearchResult, setFriendSearchResult] = useState([])\n  const friendSearchTextInput = React.createRef()\n\n  const updateTutorialWatched = () => updateUser({ tutorialWatched: true })\n\n  const goToPreviousTutorial = () => {\n    history.push({\n      pathname: '/me',\n      state: { navigateBack: true },\n    })\n  }\n\n  const steps = [\n    {\n      target: '.nav-link-Kaverit',\n      content: (\n        <div>\n          <p className=\"tutorial-step\">5/6</p>\n          <h1 className=\"tutorial-header\">\n            Voit viestitellä kavereiden kanssa kahdestaan.\n          </h1>\n          <p className=\"tutorial-text\">\n            Löydät kaverit täältä, kohdasta Kaverit.\n          </p>\n          <ButtonContainer\n            className=\"button friends-tutorial-btn\"\n            onClick={goToPreviousTutorial}\n          >\n            Edellinen\n          </ButtonContainer>\n        </div>\n      ),\n      disableBeacon: true,\n    },\n  ]\n\n  const getStatusById = id => {\n    const status = id ? statuses[id] : ''\n    return status\n  }\n\n  const sortByUnreadCount = (a, b) => {\n    // Sort primarily by unread count\n    // and secondarily by latest post timestamp\n    if (getUnreadCount(b.id) - getUnreadCount(a.id) === 0) {\n      return b.last_post_at - a.last_post_at\n    }\n    return getUnreadCount(b.id) - getUnreadCount(a.id)\n  }\n\n  const handleFriendSearchReset = async () => {\n    setFriendSearch('')\n    setFriendSearchResult([])\n    friendSearchTextInput.current.value = ''\n  }\n\n  // Filter out current user, surveybot, deleted users, and\n  // only return profiles where nickname matches\n  const filterSearchResults = (data, searchTerm) =>\n    data &&\n    data.filter(\n      profile =>\n        profile.id !== currentUserId &&\n        profile.username !== 'surveybot' &&\n        profile.position !== 'deleted' &&\n        profile.delete_at === 0 &&\n        profile.nickname.toLowerCase().includes(searchTerm.toLowerCase())\n    )\n\n  const handleFriendSearchChange = async searchText => {\n    setFriendSearch(searchText)\n    try {\n      if (searchText === '') {\n        handleFriendSearchReset()\n      } else {\n        const foundProfiles = await searchProfiles(searchText)\n        const filtered = await filterSearchResults(\n          foundProfiles.data,\n          searchText\n        )\n        if (filtered) {\n          setFriendSearchResult(filtered)\n        }\n      }\n    } catch (e) {\n      setFriendSearchResult([])\n    }\n  }\n\n  // if the user navigates back after visiting a profile, save the search term\n  useEffect(() => {\n    if (\n      history.location &&\n      history.location.state &&\n      history.location.state.searchTerm\n    ) {\n      const text = history.location.state.searchTerm\n      friendSearchTextInput.current.value = text\n      setFriendSearch(text)\n      handleFriendSearchChange(text)\n    }\n  }, [])\n\n  return (\n    <section className=\"friends-wrapper\">\n      <header className=\"friends-header\">\n        <h1>Kaverit</h1>\n      </header>\n\n      <div className=\"friends-search\">\n        <SearchBar\n          handleChange={handleFriendSearchChange}\n          placeholder=\"Kirjoita nimi\"\n          handleClear={handleFriendSearchReset}\n          label=\"Hae kaveria\"\n          ref={friendSearchTextInput}\n        />\n      </div>\n      {friendSearch.length === 0 ? (\n        <div className=\"friends-boxes\">\n          {channels && channels.length > 0 ? (\n            Object.values(channels)\n              .sort(sortByUnreadCount)\n              .map(channel => (\n                <Friend\n                  key={channel.id}\n                  channel={channel}\n                  unreadCount={getUnreadCount(channel.id)}\n                  getUsername={getUsername}\n                  getPosts={getPosts}\n                  getLatestMessage={getLatestMessage}\n                  membersInChannel={membersInChannel}\n                  myUserInfo={myUserInfo}\n                  getStatusById={getStatusById}\n                  currentUserId={currentUserId}\n                />\n              ))\n          ) : (\n            <section>\n              <h2 className=\"no-friends-yet-header\">\n                Et ole vielä viestitellyt kenenkään kanssa kahdestaan.\n              </h2>\n              <p className=\"no-friends-yet-text\">\n                Voit lähettää toiselle käyttäjälle yksityisviestin hänen\n                profiilinsa alareunasta.\n              </p>\n              <p className=\"no-friends-yet-text\">\n                Pääset toisen käyttäjän profiiliin, kun klikkaat ryhmässä hänen\n                kuvakettaan. Voit myös hakea käyttäjää hänen kutsumanimellään.\n              </p>\n            </section>\n          )}\n        </div>\n      ) : (\n        <div className=\"friends-boxes\">\n          {Object.values(friendSearchResult).map(profile => (\n            <FriendSearch\n              key={profile.id}\n              profileData={profile}\n              searchTerm={friendSearch}\n            />\n          ))}\n          <p className=\"found-friends-count-info\">{`Löydettiin ${friendSearchResult.length} käyttäjää`}</p>\n        </div>\n      )}\n      {!tutorialWatched && (\n        <Tutorial\n          steps={steps}\n          history={history}\n          updateTutorialWatched={updateTutorialWatched}\n          navigateBack={false}\n        />\n      )}\n    </section>\n  )\n}\n\nFriends.propTypes = {\n  channels: PropTypes.instanceOf(Object).isRequired,\n  getUnreadCount: PropTypes.func.isRequired,\n  getUsername: PropTypes.func.isRequired,\n  getPosts: PropTypes.func.isRequired,\n  searchProfiles: PropTypes.func.isRequired,\n  getLatestMessage: PropTypes.func.isRequired,\n  membersInChannel: PropTypes.instanceOf(Object).isRequired,\n  tutorialWatched: PropTypes.bool.isRequired,\n  updateUser: PropTypes.func.isRequired,\n  history: PropTypes.instanceOf(Object).isRequired,\n  myUserInfo: PropTypes.instanceOf(Object).isRequired,\n  statuses: PropTypes.instanceOf(Object).isRequired,\n  currentUserId: PropTypes.string.isRequired,\n}\n\nexport default memo(Friends)\n","import { getProfiles } from 'mattermost-redux/actions/users'\nimport {\n  fetchMyChannelsAndMembers,\n  getChannelMembers,\n} from 'mattermost-redux/actions/channels'\nimport * as types from '../../contants/actionTypes'\nimport { initUser, initTeam } from '../root/index'\n\nexport const startFriendsPageFetching = () => {\n  return async dispatch => {\n    dispatch({ type: types.START_FRIENDS_FETCHING })\n  }\n}\n\nexport const friendsPageFetchingReady = () => {\n  return async dispatch => {\n    dispatch({ type: types.FRIENDS_FETCHING_READY })\n  }\n}\n\nexport const fetchDirectChannelMembers = () => {\n  return async (dispatch, getState) => {\n    const { channels } = getState().entities.channels\n    const promises = []\n    Object.values(channels).forEach(channel => {\n      promises.push(dispatch(getChannelMembers(channel.id)))\n    })\n    await Promise.all(promises)\n  }\n}\n\nexport const fetchFriendsPageData = () => {\n  // Fetch groups related channel data\n  return async (dispatch, getState) => {\n    await dispatch(startFriendsPageFetching())\n    await dispatch(initUser())\n    await dispatch(initTeam())\n    const { teams } = getState().entities.teams\n    const teamId = Object.keys(teams)[0]\n    await dispatch(fetchMyChannelsAndMembers(teamId))\n    await dispatch(fetchDirectChannelMembers())\n    await dispatch(getProfiles())\n    await dispatch(friendsPageFetchingReady())\n  }\n}\n","import React, { useEffect, useState, memo } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { getPosts as getPostsAction } from 'mattermost-redux/actions/posts'\nimport { searchProfiles as searchProfilesAction } from 'mattermost-redux/actions/users'\nimport PropTypes from 'prop-types'\nimport { updateUser as updateUserAction } from '../store/user/userAction'\nimport Friends from '../components/Friends'\nimport BouncingLoader from '../components/BouncingLoader'\nimport { fetchFriendsPageData as fetchFriendsPageDataAction } from '../store/friends/friendsAction'\n\nconst FriendsContainer = props => {\n  const {\n    channels,\n    currentUserId,\n    myChannels,\n    profiles,\n    getPosts,\n    searchProfiles,\n    fetchFriendsPageData,\n    membersInChannel,\n    updateUser,\n    user,\n    history,\n    statuses,\n  } = props\n\n  if (!user.profileReady) history.push('/registration/info')\n\n  const [directChannels, setDirectChannels] = useState([])\n  const [isInitialized, setIsInitialized] = useState(false)\n\n  useEffect(() => {\n    const initialFetch = async () => {\n      await fetchFriendsPageData()\n      setIsInitialized(true)\n    }\n    initialFetch()\n  }, [fetchFriendsPageData])\n\n  useEffect(() => {\n    // Get channel objects based on myChannels\n    const getChannelInfoForMyChannels = () =>\n      Object.values(channels).filter(channel =>\n        Object.keys(myChannels).includes(channel.id)\n      )\n    // Get only direct channels with at least one message\n    const getDirectChannels = allChannels =>\n      Object.values(allChannels).filter(\n        channel => channel.type === 'D' && channel.total_msg_count > 0\n      )\n    const channelInfo = getChannelInfoForMyChannels()\n    // Set direct channel info\n    setDirectChannels(getDirectChannels(channelInfo))\n  }, [channels, myChannels])\n\n  const getUsername = members => {\n    if (members.length > 0) {\n      const friend = members.find(member => member.user_id !== currentUserId)\n      const friendId = friend && friend.user_id\n      const friendInfo =\n        friendId &&\n        Object.values(profiles).find(profile => profile.id === friendId)\n      return friendInfo\n    }\n    return null\n  }\n\n  // Get unread count by channel id\n  const getUnreadCountByChannelId = channelId => {\n    if (channels) {\n      const channel = Object.values(channels).find(\n        item => item.id === channelId\n      )\n      if (channel) {\n        const channelMsgCount = channel.total_msg_count\n        const myMessageCount = myChannels[channel.id].msg_count\n        return channelMsgCount - myMessageCount\n      }\n    }\n    return 0\n  }\n\n  const getLatestMessage = posts => {\n    // TODO: Even better posts loading\n    const postMap = posts && Object.values(posts)[1]\n    if (postMap) {\n      const postsArray = Object.values(postMap)\n      postsArray.sort((a, b) => a.create_at - b.create_at).reverse()\n      const messageObj = postsArray[0]\n      const senderInfo =\n        messageObj && messageObj.user_id === currentUserId ? 'Sinä: ' : ''\n      return messageObj ? `${senderInfo}${postsArray[0].message}` : null\n    }\n    return null\n  }\n\n  if (!isInitialized) {\n    return <BouncingLoader />\n  }\n\n  return (\n    <main>\n      <Friends\n        channels={directChannels}\n        getUnreadCount={getUnreadCountByChannelId}\n        getUsername={getUsername}\n        getPosts={getPosts}\n        searchProfiles={searchProfiles}\n        getLatestMessage={getLatestMessage}\n        membersInChannel={membersInChannel}\n        tutorialWatched={user.tutorialWatched}\n        updateUser={updateUser}\n        history={history}\n        myUserInfo={user}\n        statuses={statuses}\n        currentUserId={currentUserId}\n      />\n    </main>\n  )\n}\n\nFriendsContainer.propTypes = {\n  channels: PropTypes.instanceOf(Object).isRequired,\n  myChannels: PropTypes.instanceOf(Object).isRequired,\n  currentUserId: PropTypes.string.isRequired,\n  profiles: PropTypes.instanceOf(Object).isRequired,\n  getPosts: PropTypes.func.isRequired,\n  searchProfiles: PropTypes.func.isRequired,\n  fetchFriendsPageData: PropTypes.func.isRequired,\n  membersInChannel: PropTypes.instanceOf(Object).isRequired,\n  user: PropTypes.instanceOf(Object).isRequired,\n  history: PropTypes.instanceOf(Object).isRequired,\n  updateUser: PropTypes.func.isRequired,\n  statuses: PropTypes.instanceOf(Object).isRequired,\n}\n\nconst mapStateToProps = state => {\n  const { currentUserId } = state.entities.users\n  const { channels } = state.entities.channels\n  const { membersInChannel } = state.entities.channels\n  const { users } = state.entities\n  const mmUser = users.profiles[currentUserId]\n  const { profiles } = state.entities.users\n  const { posts } = state.entities.posts\n  const members = state.entities.channels.membersInChannel\n  const myChannels = state.entities.channels.myMembers\n  const { user } = state\n  const { statuses } = state.entities.users\n\n  return {\n    currentUserId,\n    user,\n    mmUser,\n    profiles,\n    posts,\n    channels,\n    members,\n    myChannels,\n    membersInChannel,\n    statuses,\n  }\n}\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n      getPosts: getPostsAction,\n      searchProfiles: searchProfilesAction,\n      fetchFriendsPageData: fetchFriendsPageDataAction,\n      updateUser: updateUserAction,\n    },\n    dispatch\n  )\n\nconst shouldComponentUpdate = (props, prevProps) => {\n  const { match: pMatch, ...prest } = prevProps\n  const { match, ...rest } = props\n  return JSON.stringify(rest) === JSON.stringify(prest)\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(memo(FriendsContainer, shouldComponentUpdate))\n","import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport ButtonContainer from '../../ButtonContainer'\nimport './styles.scss'\n\nconst ViewImage = ({ history, match }) => {\n  const goBack = () => {\n    history.goBack()\n  }\n\n  const { fileId } = match.params\n\n  return (\n    <main className=\"view-image-content\">\n      <ButtonContainer\n        className=\"view-image-go-back-button go-back-button\"\n        onClick={goBack}\n      >\n        <span className=\"sr-only\">Sulje</span>\n      </ButtonContainer>\n      <div className=\"image\">\n        <img\n          className=\"view-image\"\n          src={`${process.env.REACT_APP_MATTERMOST_URL}/api/v4/files/${fileId}`}\n          alt=\"attachment\"\n          width=\"100%\"\n          height=\"100%\"\n        />\n      </div>\n    </main>\n  )\n}\n\nViewImage.propTypes = {\n  history: PropTypes.instanceOf(Object).isRequired,\n  match: PropTypes.instanceOf(Object).isRequired,\n}\n\nexport default memo(ViewImage)\n","import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { withRouter } from 'react-router-dom'\nimport ViewImage from '../components/Chat/ViewImage'\n\nconst ViewImageContainer = props => {\n  const { history, match } = props\n\n  return <ViewImage history={history} match={match} />\n}\n\n// TODO: refactor\nconst shouldComponentUpdate = (props, prevProps) => {\n  const { match: pMatch, ...prest } = prevProps\n  const { match, ...rest } = props\n  return JSON.stringify(rest) === JSON.stringify(prest)\n}\n\nViewImageContainer.propTypes = {\n  history: PropTypes.instanceOf(Object).isRequired,\n  match: PropTypes.instanceOf(Object).isRequired,\n}\n\nexport default withRouter(memo(ViewImageContainer, shouldComponentUpdate))\n","import React, { memo } from 'react'\nimport propTypes from 'prop-types'\nimport ButtonContainer from '../../ButtonContainer'\nimport './styles.scss'\n\nconst EditTitle = props => {\n  const { text, history } = props\n\n  const closeEditPage = () => {\n    history.goBack()\n  }\n\n  return (\n    <header className=\"edit-header-container\">\n      <h1 className=\"edit-header-text\">{text}</h1>\n      <ButtonContainer\n        className=\"icon-btn go-back-button edit-header-btn\"\n        onClick={closeEditPage}\n        label=\"Sulje\"\n      >\n        {' '}\n      </ButtonContainer>\n    </header>\n  )\n}\n\nEditTitle.propTypes = {\n  history: propTypes.instanceOf(Object).isRequired,\n  text: propTypes.string.isRequired,\n}\n\nexport default memo(EditTitle)\n","import React, { useEffect, useState, memo } from 'react'\nimport propTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\nimport ModalContainer from '../ModalContainer'\nimport Picture from '../RegistrationFlow/Picture'\nimport Description from '../RegistrationFlow/Description'\nimport Nickname from '../RegistrationFlow/Nickname'\nimport ShowAge from '../RegistrationFlow/ShowAge'\nimport Location from '../RegistrationFlow/Location'\nimport ButtonContainer from '../ButtonContainer'\nimport EditTitle from './EditTitle'\nimport getAge from '../../utils/getAge'\nimport './styles.scss'\n\nconst EditProfile = props => {\n  const { history, myUserInfo, handleEditReady } = props\n  const [newDescription, setNewDescription] = useState(\n    myUserInfo.description || ''\n  )\n  const [newNickname, setNewNickname] = useState(myUserInfo.nickname)\n  const [newShowAge, setNewShowAge] = useState(myUserInfo.showAge)\n  const [newShowLocation, setNewShowLocation] = useState(\n    myUserInfo.showLocation\n  )\n  const [newLocation, setNewLocation] = useState({\n    label: myUserInfo.location,\n    value: myUserInfo.location,\n  })\n  const [img, setImg] = useState(null)\n  const [showModal, setShowModal] = useState(false)\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    const checkForErrors = () => {\n      if (error) setShowModal(true)\n    }\n    checkForErrors()\n  }, [error])\n\n  const closeModal = () => {\n    setShowModal(false)\n    setError(false)\n  }\n\n  const handleSave = () => {\n    handleEditReady(\n      newDescription,\n      newNickname,\n      newShowAge,\n      newShowLocation,\n      newLocation.value,\n      img\n    )\n  }\n\n  return (\n    <main className=\"profile-edit-container\">\n      <ModalContainer\n        modalIsOpen={showModal}\n        closeModal={closeModal}\n        label=\"Tiedosto liian suuri\"\n      >\n        <div>\n          <h3 className=\"edit-profile-modal-text\">Tiedosto on liian suuri!</h3>\n          <ButtonContainer\n            className=\"icon-btn edit-profile-icon-btn\"\n            onClick={closeModal}\n            label=\"Sulje\"\n          >\n            <div className=\"go-back-button\" />\n          </ButtonContainer>\n        </div>\n      </ModalContainer>\n      <EditTitle text=\"Muokkaa profiiliasi\" history={history} />\n      <div className=\"edit-wrapper\">\n        <div className=\"edit-profilepic\">\n          <Picture hideStep onChange={setImg} image={img} />\n        </div>\n        <div className=\"edit-nickname\">\n          <Nickname\n            hideStep\n            value={newNickname}\n            onChange={e => setNewNickname(e.target.value)}\n          />\n        </div>\n        <div className=\"edit-nickname\">\n          <ShowAge\n            hideStep\n            showAge={newShowAge.toString()}\n            age={getAge(myUserInfo)}\n            onChange={setNewShowAge}\n          />\n        </div>\n        <div className=\"edit-nickname\">\n          <Location\n            hideStep\n            showLocation={newShowLocation.toString()}\n            value={newLocation}\n            setShowLocation={setNewShowLocation}\n            onChange={value => setNewLocation(value)}\n          />\n        </div>\n        <div className=\"edit-nickname\">\n          <Description\n            value={newDescription}\n            hideStep\n            onChange={e => setNewDescription(e.target.value)}\n          />\n        </div>\n        <div\n          className=\"save-profile-button\"\n          style={{ marginBottom: '100px', textAlign: 'center' }}\n        >\n          <Link to=\"/me\">\n            <ButtonContainer\n              secondary\n              className=\"save-profile-button\"\n              onClick={handleSave}\n            >\n              Tallenna\n            </ButtonContainer>\n          </Link>\n        </div>\n      </div>\n    </main>\n  )\n}\n\nEditProfile.propTypes = {\n  history: propTypes.instanceOf(Object).isRequired,\n  myUserInfo: propTypes.instanceOf(Object).isRequired,\n  handleEditReady: propTypes.func.isRequired,\n}\n\nexport default memo(EditProfile)\n","import React, { memo } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport {\n  getUser as getUserAction,\n  setDefaultProfileImage as setDefaultProfileImageAction,\n  uploadProfileImage as uploadProfileImageAction,\n} from 'mattermost-redux/actions/users'\nimport PropTypes from 'prop-types'\nimport { updateUser as updateUserAction } from '../store/user/userAction'\nimport dataUriToBlob from '../utils/dataUriToBlob'\nimport EditProfile from '../components/EditProfile'\nimport updateUsername from '../utils/updateUsername'\n\nconst EditProfileContainer = props => {\n  const {\n    history,\n    mmuserId,\n    currentUser,\n    interestOptions,\n    updateUser,\n    myUserInfo,\n  } = props\n\n  if (!myUserInfo.profileReady) history.push('/registration/info')\n\n  const updateImages = async img => {\n    if (!img && !myUserInfo.imageUploaded) {\n      await props.setDefaultProfileImage(mmuserId)\n    } else if (img) {\n      await props.uploadProfileImage(currentUser.id, dataUriToBlob(img))\n    }\n    return null\n  }\n\n  const handleEditReady = async (\n    newDescription,\n    newNickname,\n    showAge,\n    showLocation,\n    location,\n    img\n  ) => {\n    let updatedUsername = currentUser.username\n    if (myUserInfo.nickname !== newNickname && !myUserInfo.imageUploaded) {\n      updatedUsername = updateUsername(newNickname, currentUser)\n    }\n    let newUserInfo\n    if (img && !myUserInfo.imageUploaded) {\n      newUserInfo = {\n        ...myUserInfo,\n        mmid: mmuserId,\n        description: newDescription,\n        nickname: newNickname,\n        showAge,\n        showLocation,\n        location,\n        username: updatedUsername,\n        imageUploaded: true,\n      }\n    } else {\n      newUserInfo = {\n        ...myUserInfo,\n        mmid: mmuserId,\n        description: newDescription,\n        nickname: newNickname,\n        showAge,\n        showLocation,\n        location,\n        username: updatedUsername,\n      }\n    }\n    await updateUser(newUserInfo)\n    await updateImages(img)\n  }\n\n  return (\n    <EditProfile\n      history={history}\n      myUserInfo={myUserInfo}\n      interestOptions={interestOptions}\n      handleEditReady={handleEditReady}\n    />\n  )\n}\n\nconst mapStateToProps = state => {\n  const { currentUserId } = state.entities.users\n  const currentUser = state.entities.users.profiles[currentUserId]\n  const userInterests = state.user.interests\n  const interestOptions = state.interests.results\n  const myUserInfo = state.user\n\n  return {\n    mmuserId: currentUserId,\n    currentUser,\n    userInterests,\n    interestOptions,\n    myUserInfo,\n  }\n}\n\nEditProfileContainer.propTypes = {\n  history: PropTypes.instanceOf(Object).isRequired,\n  currentUser: PropTypes.instanceOf(Object).isRequired,\n  myUserInfo: PropTypes.instanceOf(Object).isRequired,\n  interestOptions: PropTypes.instanceOf(Array).isRequired,\n  updateUser: PropTypes.func.isRequired,\n  uploadProfileImage: PropTypes.func.isRequired,\n  mmuserId: PropTypes.string.isRequired,\n  setDefaultProfileImage: PropTypes.func.isRequired,\n}\n\nconst shouldComponentUpdate = (props, prevProps) => {\n  const { match: pMatch, ...prest } = prevProps\n  const { match, ...rest } = props\n  return JSON.stringify(rest) === JSON.stringify(prest)\n}\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n      updateUser: updateUserAction,\n      uploadProfileImage: uploadProfileImageAction,\n      getUser: getUserAction,\n      setDefaultProfileImage: setDefaultProfileImageAction,\n    },\n    dispatch\n  )\n// export default GroupsContainer\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(memo(EditProfileContainer, shouldComponentUpdate))\n","import React, { useState, memo } from 'react'\nimport './styles.scss'\nimport propTypes from 'prop-types'\nimport Interests from '../RegistrationFlow/Interests'\nimport EditTitle from '../EditProfile/EditTitle'\nimport ButtonContainer from '../ButtonContainer'\nimport ModalContainer from '../ModalContainer'\n\nconst EditInterests = props => {\n  const {\n    currentInterestIds,\n    handleInterestEditReady,\n    interestOptions,\n    history,\n  } = props\n  const [newInterests, setNewInterests] = useState([...currentInterestIds])\n  const [showModal, setShowModal] = useState(false)\n\n  const closeModal = () => {\n    setShowModal(false)\n  }\n\n  const handleSubmit = () => {\n    if (newInterests.length < 3) {\n      setShowModal(true)\n    } else {\n      handleInterestEditReady(newInterests)\n      history.push('/me')\n    }\n  }\n\n  return (\n    <div className=\"interests-container\">\n      <EditTitle text=\"Muokkaa profiiliasi\" history={history} />\n      <Interests\n        options={interestOptions}\n        interests={newInterests}\n        setInterests={setNewInterests}\n        hideStep\n      />\n      <div style={{ marginBottom: '100px', textAlign: 'center' }}>\n        <ButtonContainer\n          secondary\n          onClick={handleSubmit}\n          className=\"save-interests-button\"\n        >\n          Tallenna\n        </ButtonContainer>\n      </div>\n      <ModalContainer\n        modalIsOpen={showModal}\n        closeModal={closeModal}\n        label=\"User must have at least 3 interests\"\n      >\n        <div>\n          <h3 className=\"interests-modal-text\">\n            Valitse ainakin kolme kiinnostavaa asiaa.\n          </h3>\n          <p>Voit lisätä valinnan klikkaamalla.</p>\n          <ButtonContainer\n            className=\"icon-btn interests-icon-btn\"\n            onClick={closeModal}\n            label=\"Sulje\"\n          >\n            <div className=\"go-back-button\" />\n          </ButtonContainer>\n        </div>\n      </ModalContainer>\n    </div>\n  )\n}\n\nEditInterests.propTypes = {\n  history: propTypes.instanceOf(Object).isRequired,\n  handleInterestEditReady: propTypes.func.isRequired,\n  interestOptions: propTypes.instanceOf(Array).isRequired,\n  currentInterestIds: propTypes.instanceOf(Array).isRequired,\n}\n\nexport default memo(EditInterests)\n","import React, { memo } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport PropTypes from 'prop-types'\nimport { addUserInterests as addUserInterestsAction } from '../store/user/userAction'\nimport getInterestsAction from '../store/interest/interestAction'\nimport EditInterests from '../components/EditInterests'\n\nconst EditInterestsContainer = props => {\n  const { history, userInterests, interestOptions, addUserInterests } = props\n\n  const handleEditReady = ids => {\n    addUserInterests({ userInterests: ids })\n  }\n\n  const getCurrentIds = () => {\n    return userInterests.map(item => item.id)\n  }\n\n  return (\n    <EditInterests\n      history={history}\n      currentInterestIds={getCurrentIds()}\n      handleInterestEditReady={handleEditReady}\n      interestOptions={interestOptions}\n    />\n  )\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const { currentUserId } = state.entities.users\n  const { username } = ownProps.match.params\n  const currentUser = state.entities.users.profiles[currentUserId]\n  const userInterests = state.user.interests\n  const interestOptions = state.interests.results\n\n  return {\n    currentUserId,\n    currentUser,\n    username,\n    userInterests,\n    interestOptions,\n  }\n}\n\nEditInterestsContainer.propTypes = {\n  history: PropTypes.instanceOf(Object),\n  userInterests: PropTypes.instanceOf(Array),\n  interestOptions: PropTypes.instanceOf(Array),\n  addUserInterests: PropTypes.func.isRequired,\n}\n\nEditInterestsContainer.defaultProps = {\n  history: {},\n  userInterests: [],\n  interestOptions: [],\n}\n\nconst shouldComponentUpdate = (props, prevProps) => {\n  const { match: pMatch, ...prest } = prevProps\n  const { match, ...rest } = props\n  return JSON.stringify(rest) === JSON.stringify(prest)\n}\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n      addUserInterests: addUserInterestsAction,\n      getInterestsAction,\n    },\n    dispatch\n  )\n// export default GroupsContainer\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(memo(EditInterestsContainer, shouldComponentUpdate))\n","import React, { memo } from 'react'\nimport './styles.scss'\n\nconst FullScreenLoading = () => {\n  return (\n    <div className=\"full-screen-loading\">\n      <h1 className=\"loading-text\">Kohdataan</h1>\n    </div>\n  )\n}\n\nexport default memo(FullScreenLoading)\n","import React, { memo } from 'react'\nimport propTypes from 'prop-types'\nimport useForm from 'react-hook-form'\nimport ValidatedInputField from '../../ValidatedInputField'\nimport ButtonContainer from '../../ButtonContainer'\nimport ModalContainer from '../../ModalContainer'\nimport './styles.scss'\n\nconst labels = {\n  email: 'Uusi sähköposti',\n  phoneNumber: 'Uusi puhelinnumero',\n  password: 'Uusi salasana',\n  firstname: 'Uusi etunimi',\n  lastname: 'Uusi sukunimi',\n}\nconst patterns = {\n  email: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n  phoneNumber: /^(\\+358|00358|358|\\+7|007|\\+372|00372|\\+46|0046|04|050)[0-9- ]{4,14}$/i,\n  password: /^(?=.*[0-9]+.*)(?=.*[a-zäöüß]+.*)(?=.*[A-ZÄÖÜ]+.*)[\\w\\W]{10,}$/,\n  firstname: /^[a-z A-ZäöüßÄÖÜ'-]+$/i,\n  lastname: /^[a-z A-ZäöüßÄÖÜ'-]+$/i,\n}\nconst messages = {\n  email: 'Tarkista sähköpostiosoite.',\n  phoneNumber: 'Tarkista puhelinnumero',\n  password:\n    'Salasanassa täytyy olla vähintään 10 merkkiä, yksi iso kirjain, yksi pieni kirjain ja yksi numero.',\n  firstname: 'Etunimen tulee olla 2-20 merkkiä pitkä.',\n  lastname: 'Sukunimen tulee olla 2-30 merkkiä pitkä.',\n}\n\nconst EditAccountModal = props => {\n  const { showModal, updateUser, field, closeModal } = props\n  const { register, handleSubmit, errors, watch } = useForm()\n\n  const onSubmit = data => {\n    updateUser(data)\n  }\n\n  return (\n    <div className=\"leave-channel-modal-wrapper\">\n      <ModalContainer\n        modalIsOpen={showModal}\n        label=\"Muokkaa tietoja\"\n        closeModal={closeModal}\n        editModal\n      >\n        <ButtonContainer\n          className=\"icon-btn go-back-button edit-account-close-button\"\n          onClick={closeModal}\n        >\n          <span className=\"sr-only\">Sulje</span>\n        </ButtonContainer>\n        <form\n          className=\"edit-account-input-content-container\"\n          onSubmit={handleSubmit(onSubmit)}\n        >\n          {field === 'password' && (\n            <ValidatedInputField\n              label=\"Nykyinen salasana\"\n              name=\"passwordCurrent\"\n              type=\"password\"\n              ref={register({\n                required: true,\n                pattern: patterns[field],\n              })}\n              ariaInvalid={!!errors[field]}\n              inputClassName=\"edit-account-input-text\"\n              labelClassName={\n                errors[field]\n                  ? 'edit-account-errors-field'\n                  : 'edit-account-input-field'\n              }\n            />\n          )}\n          <ValidatedInputField\n            label={labels[field]}\n            name={field}\n            ref={register({\n              required: true,\n              pattern: patterns[field],\n            })}\n            ariaInvalid={!!errors[field]}\n            type={field === 'password' ? 'password' : 'text'}\n            inputClassName=\"edit-account-input-text\"\n            labelClassName={\n              errors[field]\n                ? 'edit-account-errors-field'\n                : 'edit-account-input-field'\n            }\n          />\n          {field === 'password' && (\n            <ValidatedInputField\n              label=\"Salasana uudestaan\"\n              type=\"password\"\n              name=\"passwordConfirm\"\n              ref={register({\n                required: true,\n                validate: value => {\n                  return value === watch('password')\n                },\n              })}\n              ariaInvalid={!!errors.passwordConfirm}\n              inputClassName=\"edit-account-input-text\"\n              labelClassName={\n                errors[field]\n                  ? 'edit-account-errors-field'\n                  : 'edit-account-input-field'\n              }\n            />\n          )}\n          <div className=\"edit-account-error-text\">\n            {errors[field] && messages[field]}\n            {errors.passwordConfirm &&\n              errors.passwordConfirm.type === 'validate' &&\n              'Salasanat eivät ole samat.'}\n            {errors.passwordConfirm &&\n              errors.passwordConfirm.type === 'required' &&\n              'Kirjoita salasana uudestaan'}\n          </div>\n          <button\n            type=\"submit\"\n            className=\"edit-account-button\"\n            onKeyPress={() => handleSubmit(onSubmit)}\n            onClick={() => handleSubmit(onSubmit)}\n            tabIndex=\"0\"\n          >\n            {'Tallenna '}\n          </button>\n        </form>\n      </ModalContainer>\n    </div>\n  )\n}\n\nEditAccountModal.propTypes = {\n  showModal: propTypes.bool.isRequired,\n  updateUser: propTypes.func.isRequired,\n  field: propTypes.string.isRequired,\n  closeModal: propTypes.func.isRequired,\n}\n\nexport default memo(EditAccountModal)\n","import React, { memo } from 'react'\nimport propTypes from 'prop-types'\nimport ModalContainer from '../../ModalContainer'\nimport ButtonContainer from '../../ButtonContainer'\nimport './styles.scss'\n\nconst DeleteAccountModal = props => {\n  const { showModal, deleteUser, closeModal, deleteError } = props\n\n  return (\n    <div className=\"leave-channel-modal-wrapper\">\n      <ModalContainer\n        modalIsOpen={showModal}\n        label=\"Käyttäjätilin poistaminen\"\n        closeModal={closeModal}\n      >\n        <p>\n          Poistamme käyttäjätilisi viikon päästä, jos et ota tiliäsi ennen sitä\n          uudelleen käyttöön. Voit ottaa tilisi uudelleen käyttöön, kun\n          kirjaudut palveluun. Viikon jälkeen poistamme tilisi ja profiilisi\n          pysyvästi. Viestisi jäävät palveluun nimettömänä.\n        </p>\n        <p>Haluatko varmasti poistaa käyttäjätilisi?</p>\n        <div className=\"account-delete-buttons-wrapper\">\n          <ButtonContainer\n            className=\"account-cancel-delete-button\"\n            onClick={closeModal}\n            secondary\n          >\n            En\n          </ButtonContainer>\n\n          <ButtonContainer\n            className=\"account-delete-button\"\n            onClick={deleteUser}\n          >\n            Kyllä\n          </ButtonContainer>\n        </div>\n        {deleteError && (\n          <p\n            className=\"edit-account-error-text\"\n            style={{ textAlign: 'center' }}\n          >\n            Käyttäjätilin poistaminen epäonnistui!\n          </p>\n        )}\n      </ModalContainer>\n    </div>\n  )\n}\n\nDeleteAccountModal.propTypes = {\n  showModal: propTypes.bool.isRequired,\n  deleteUser: propTypes.func.isRequired,\n  closeModal: propTypes.func.isRequired,\n  deleteError: propTypes.string,\n}\n\nDeleteAccountModal.defaultProps = {\n  deleteError: null,\n}\n\nexport default memo(DeleteAccountModal)\n","import React, { memo, useState } from 'react'\nimport propTypes from 'prop-types'\nimport ButtonContainer from '../ButtonContainer'\nimport EditAccountModal from './EditAccountModal'\nimport DeleteAccountModal from './DeleteAccountModal'\nimport * as API from '../../api/user/user'\nimport './styles.scss'\n\nconst Account = props => {\n  const {\n    nodeUser,\n    mmuser,\n    updateUser,\n    updatePassword,\n    history,\n    userLogout,\n  } = props\n  const [showModal, setShowModal] = useState(false)\n  const [showDeleteModal, setShowDeleteModal] = useState(false)\n  const [deleteError, setDeleteError] = useState(null)\n  const [field, setField] = useState('')\n\n  const openModal = fieldName => {\n    setShowModal(!showModal)\n    setField(fieldName)\n  }\n\n  const closeModal = () => {\n    setShowModal(false)\n  }\n\n  const closeEditPage = () => {\n    history.goBack()\n  }\n\n  const handleDeleteUser = async () => {\n    try {\n      const data = { mmid: mmuser.id }\n      const id = localStorage.getItem('userId')\n      const token = localStorage.getItem('authToken')\n      const res = await API.deleteUser(data, id, token)\n      if (res && res.success) {\n        userLogout()\n      } else if (res && res.message) {\n        setDeleteError(res.message)\n      }\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e)\n    }\n  }\n\n  const updateAccountInfo = data => {\n    if (field === 'email') {\n      updateUser({ mmid: mmuser.id, email: data.email.trim().toLowerCase() })\n    } else if (field === 'phoneNumber') {\n      updateUser({ phoneNumber: data.phoneNumber })\n    } else if (field === 'firstname') {\n      updateUser({ first_name: data.firstname })\n    } else if (field === 'lastname') {\n      updateUser({ last_name: data.lastname })\n    } else if (field === 'password') {\n      updatePassword({\n        mmid: mmuser.id,\n        id: nodeUser.id,\n        email: mmuser.email,\n        current_password: data.passwordCurrent,\n        new_password: data.password,\n      })\n    }\n    closeModal()\n  }\n\n  return (\n    <main className=\"account-update-container\">\n      <div className=\"account-header\">\n        <h1>Muokkaa tietojasi</h1>\n        <ButtonContainer\n          className=\"icon-btn go-back-button close-edit-btn\"\n          onClick={closeEditPage}\n        >\n          <span className=\"sr-only\">Sulje</span>\n        </ButtonContainer>\n      </div>\n      <div className=\"account-info-text\">\n        <p>Nämä tiedot näkyvät vain sinulle. Kaikki tiedot ovat pakollisia.</p>\n      </div>\n      <div className=\"account-box-outer\">\n        <div className=\"account-box-inner\">\n          <div className=\"account-label-text\">Etunimi</div>\n          <ButtonContainer\n            className=\"account-edit-button\"\n            onClick={() => openModal('firstname')}\n            label=\"Muokkaa etunimeä\"\n          >\n            Muokkaa\n          </ButtonContainer>\n        </div>\n        <div className=\"account-box\">{nodeUser.first_name}</div>\n      </div>\n      <div className=\"account-box-outer\">\n        <div className=\"account-box-inner\">\n          <div className=\"account-label-text\">Sukunimi</div>\n          <ButtonContainer\n            className=\"account-edit-button\"\n            onClick={() => openModal('lastname')}\n            label=\"Muokkaa sukunimeä\"\n          >\n            Muokkaa\n          </ButtonContainer>\n        </div>\n        <div className=\"account-box\">{nodeUser.last_name}</div>\n      </div>\n      <div className=\"account-box-outer\">\n        <div className=\"account-box-inner\">\n          <div className=\"account-label-text\">Sähköposti</div>\n          <ButtonContainer\n            className=\"account-edit-button\"\n            onClick={() => openModal('email')}\n            label=\"Muokkaa sähköpostia\"\n          >\n            Muokkaa\n          </ButtonContainer>\n        </div>\n        <div className=\"account-box\">{mmuser.email}</div>\n      </div>\n      <div className=\"account-box-outer\">\n        <div className=\"account-box-inner\">\n          <div className=\"account-label-text\">Puhelinnumero</div>\n          <ButtonContainer\n            className=\"account-edit-button\"\n            onClick={() => openModal('phoneNumber')}\n            label=\"Muokkaa puhelinnumeroa\"\n          >\n            Muokkaa\n          </ButtonContainer>\n        </div>\n        <div className=\"account-box\">{nodeUser.phoneNumber}</div>\n      </div>\n      <div className=\"account-box-outer\">\n        <div className=\"account-box-inner\">\n          <div className=\"account-label-text\">Salasana</div>\n          <ButtonContainer\n            className=\"account-edit-button\"\n            onClick={() => openModal('password')}\n            label=\"Muokkaa salasanaa\"\n          >\n            Muokkaa\n          </ButtonContainer>\n        </div>\n        <div className=\"account-box\">**************</div>\n        {nodeUser &&\n          nodeUser.errorMessage &&\n          nodeUser.errorMessage.includes('password') && (\n            <div className=\"edit-account-error-text\">\n              Salasanan päivittäminen epäonnistui!\n            </div>\n          )}\n      </div>\n      <div className=\"account-box-outer account-box-reduced-padding\">\n        <ButtonContainer\n          className=\"account-delete-button button\"\n          onClick={() => setShowDeleteModal(true)}\n        >\n          Poista käyttäjätili\n        </ButtonContainer>\n      </div>\n      <ButtonContainer\n        className=\"button-secondary account-save-button\"\n        onClick={closeEditPage}\n      >\n        Tallenna\n      </ButtonContainer>\n      <EditAccountModal\n        showModal={showModal}\n        updateUser={updateAccountInfo}\n        closeModal={closeModal}\n        field={field}\n      />\n      <DeleteAccountModal\n        showModal={showDeleteModal}\n        closeModal={() => setShowDeleteModal(false)}\n        deleteUser={handleDeleteUser}\n        deleteError={deleteError}\n      />\n    </main>\n  )\n}\n\nAccount.propTypes = {\n  nodeUser: propTypes.shape({\n    id: propTypes.number,\n    phoneNumber: propTypes.string,\n    errorMessage: propTypes.string,\n    first_name: propTypes.string,\n    last_name: propTypes.string,\n  }).isRequired,\n  mmuser: propTypes.shape({ id: propTypes.string, email: propTypes.string })\n    .isRequired,\n  updateUser: propTypes.func.isRequired,\n  updatePassword: propTypes.func.isRequired,\n  history: propTypes.instanceOf(Object).isRequired,\n  userLogout: propTypes.func.isRequired,\n}\n\nexport default memo(Account)\n","import React, { memo } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport PropTypes from 'prop-types'\nimport { logout } from 'mattermost-redux/actions/users'\nimport Account from '../components/Account'\nimport {\n  updateUser as updateUserAction,\n  updateUserPassword as updateUserPasswordAction,\n} from '../store/user/userAction'\nimport logoutHandler from '../utils/userLogout'\nimport * as API from '../api/user/user'\n\nconst ChangeAccountInfoContainer = props => {\n  const {\n    myUserInfo,\n    currentUser,\n    updateUser,\n    updatePassword,\n    history,\n    logout: matterMostLogout,\n  } = props\n\n  const handleLogout = () => logoutHandler(API.userLogout, matterMostLogout)\n\n  return (\n    <Account\n      nodeUser={myUserInfo}\n      mmuser={currentUser}\n      updateUser={updateUser}\n      updatePassword={updatePassword}\n      history={history}\n      userLogout={handleLogout}\n    />\n  )\n}\n\nconst mapStateToProps = state => {\n  const { currentUserId } = state.entities.users\n  const currentUser = state.entities.users.profiles[currentUserId]\n  const userInterests = state.user.interests\n  const myUserInfo = state.user\n\n  return {\n    mmuserId: currentUserId,\n    currentUser,\n    userInterests,\n    myUserInfo,\n  }\n}\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n      updateUser: updateUserAction,\n      updatePassword: updateUserPasswordAction,\n      logout,\n    },\n    dispatch\n  )\n\nconst shouldComponentUpdate = (props, prevProps) => {\n  const { match: pMatch, ...prest } = prevProps\n  const { match, ...rest } = props\n  return JSON.stringify(rest) === JSON.stringify(prest)\n}\n\nChangeAccountInfoContainer.propTypes = {\n  myUserInfo: PropTypes.shape({ id: PropTypes.number }).isRequired,\n  currentUser: PropTypes.shape({\n    id: PropTypes.string,\n    email: PropTypes.string,\n  }).isRequired,\n  updateUser: PropTypes.func.isRequired,\n  updatePassword: PropTypes.func.isRequired,\n  history: PropTypes.instanceOf(Object).isRequired,\n  logout: PropTypes.func.isRequired,\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(memo(ChangeAccountInfoContainer, shouldComponentUpdate))\n","import React, { memo, useState } from 'react'\nimport './styles.scss'\nimport propTypes from 'prop-types'\nimport ModalContainer from '../ModalContainer'\nimport ButtonContainer from '../ButtonContainer'\n\nconst RestoreAccount = props => {\n  const { handleRestore, handleDeleteNow } = props\n  const [modalIsOpen, setModalIsOpen] = useState(true)\n  const handleDelete = () => {\n    handleDeleteNow()\n    setModalIsOpen(false)\n  }\n  return (\n    <ModalContainer\n      modalIsOpen={modalIsOpen}\n      label=\"restore-user-container\"\n      closeModal={() => setModalIsOpen(false)}\n    >\n      <h3>Haluatko ottaa käyttäjätilisi uudelleen käyttöön?</h3>\n      <div className=\"account-delete-buttons-wrapper\">\n        <ButtonContainer\n          className=\"account-cancel-delete-button\"\n          secondary\n          onClick={handleDelete}\n        >\n          En\n        </ButtonContainer>\n        <ButtonContainer\n          className=\"account-cancel-delete-button\"\n          onClick={handleRestore}\n        >\n          Kyllä\n        </ButtonContainer>\n      </div>\n    </ModalContainer>\n  )\n}\n\nRestoreAccount.propTypes = {\n  handleRestore: propTypes.func.isRequired,\n  handleDeleteNow: propTypes.func.isRequired,\n}\n\nexport default memo(RestoreAccount)\n","import React, { memo } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { withRouter } from 'react-router-dom'\nimport propTypes from 'prop-types'\nimport { logout } from 'mattermost-redux/actions/users'\nimport RestoreAccount from '../components/RestoreAccount'\nimport { restoreUserAccount as restoreUserAction } from '../store/user/userAction'\nimport * as API from '../api/user/user'\nimport logoutHandler from '../utils/userLogout'\n\nconst RestoreAccountContainer = props => {\n  const { restoreUserAccount, mmid, matterMostLogout } = props\n\n  const handleLogout = () => logoutHandler(API.userLogout, matterMostLogout)\n\n  const handleDeleteUserNow = async () => {\n    try {\n      // Get user data and token from local storage before logging out\n      const data = { mmid }\n      const id = localStorage.getItem('userId')\n      const token = localStorage.getItem('authToken')\n      // First logout user (while it still exists)\n      handleLogout()\n      // Then delete the user permanently\n      API.deleteUserNow(data, id, token)\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e)\n    }\n  }\n\n  const handleRestore = async () => {\n    const data = { mmid }\n    restoreUserAccount(data)\n  }\n\n  return (\n    <RestoreAccount\n      handleRestore={handleRestore}\n      handleDeleteNow={handleDeleteUserNow}\n    />\n  )\n}\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n      restoreUserAccount: restoreUserAction,\n      matterMostLogout: logout,\n    },\n    dispatch\n  )\n\nconst mapStateToProps = state => {\n  const { currentUserId } = state.entities.users\n  return {\n    user: state.user,\n    mmid: currentUserId,\n  }\n}\n\nRestoreAccountContainer.propTypes = {\n  restoreUserAccount: propTypes.func.isRequired,\n  mmid: propTypes.string.isRequired,\n  matterMostLogout: propTypes.func.isRequired,\n}\n\nconst shouldComponentUpdate = (props, prevProps) => {\n  const { match: pMatch, ...prest } = prevProps\n  const { match, ...rest } = props\n  return JSON.stringify(rest) === JSON.stringify(prest)\n}\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(memo(RestoreAccountContainer, shouldComponentUpdate))\n)\n","import React, { memo, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport Button from '../ButtonContainer'\nimport './styles.scss'\n\nconst AccountLocked = () => {\n  const history = useHistory()\n  const goToLogin = () => {\n    history.push('/login')\n    history.go()\n  }\n\n  useEffect(() => {\n    localStorage.removeItem('userId')\n    localStorage.removeItem('authToken')\n  })\n\n  return (\n    <div className=\"account-locked-container\">\n      <h1 className=\"account-locked-text\">Kohdataan</h1>\n      <p className=\"account-locked-paragraph\">\n        Käyttäjätilisi on tällä hetkellä pois käytöstä.\n      </p>\n      <p className=\"account-locked-paragraph\">\n        Ota tarvittaessa yhteyttä osoitteeseen{' '}\n        <a\n          href=\"mailto:kohdataan@kohdataan.fi\"\n          className=\"account-locked-email-link\"\n        >\n          kohdataan@kohdataan.fi.\n        </a>\n      </p>\n      <div className=\"login-links-container\">\n        <Button className=\"login-link login-link-button\" onClick={goToLogin}>\n          Kirjautumissivulle.\n        </Button>\n      </div>\n    </div>\n  )\n}\n\nexport default memo(AccountLocked)\n","import React, { useState } from 'react'\nimport CookieConsent from 'react-cookie-consent'\nimport ModalContainer from '../ModalContainer'\nimport ButtonContainer from '../ButtonContainer'\nimport PrivacyPolicy from '../PrivacyPolicy'\nimport './styles.scss'\n\nconst CookieConsentBanner = () => {\n  const [modalIsOpen, setModalIsOpen] = useState(true)\n  const [privacyPolicyModalIsOpen, setPrivacyPolicyModalIsOpen] = useState(\n    false\n  )\n\n  const acceptCookies = () => {\n    setModalIsOpen(false)\n  }\n\n  return (\n    <ModalContainer\n      label=\"cookie-banner-modal\"\n      modalIsOpen={modalIsOpen}\n      closeModal={() => {}}\n      cookie\n    >\n      <div className=\"cookie-info-container\">\n        <CookieConsent\n          buttonText=\"Hyväksy\"\n          onAccept={acceptCookies}\n          style={{\n            flexDirection: 'column',\n            flexWrap: 'nowrap',\n            alignItems: 'center',\n            justifyContent: 'space-around',\n            padding: '10px',\n            position: 'absolute',\n            top: '2%',\n          }}\n          buttonStyle={{\n            color: '#3a3a3a',\n            fontSize: '0.900rem',\n            background: '#f59023',\n            margin: '0 auto 10px',\n            padding: '5px 10px',\n            borderRadius: '30px',\n          }}\n          contentStyle={{\n            flex: '0 auto',\n            margin: '15px',\n          }}\n        >\n          Kohdataan-somessa käytämme evästeitä, jotta palvelu toimii ja sitä voi\n          käyttää. Voit lukea lisää evästeistä{' '}\n          <ButtonContainer\n            className=\"modal-btn\"\n            role=\"link\"\n            onClick={() => setPrivacyPolicyModalIsOpen(true)}\n          >\n            tietosuojaselosteesta.\n          </ButtonContainer>\n        </CookieConsent>\n        <ModalContainer\n          modalIsOpen={privacyPolicyModalIsOpen}\n          closeModal={() => setPrivacyPolicyModalIsOpen(false)}\n          label=\"Tietosuojaseloste\"\n          isLong\n          aria={{\n            labelledby: 'Tietosuojaseloste',\n            modal: true,\n          }}\n        >\n          <aside id=\"Tietosuojaseloste\">\n            <PrivacyPolicy\n              closeModal={() => setPrivacyPolicyModalIsOpen(false)}\n            />\n          </aside>\n        </ModalContainer>\n      </div>\n    </ModalContainer>\n  )\n}\n\nexport default CookieConsentBanner\n","import React, { useState } from 'react'\nimport CookieConsent from 'react-cookie-consent'\nimport ModalContainer from '../ModalContainer'\nimport ButtonContainer from '../ButtonContainer'\nimport PrivacyPolicy from '../PrivacyPolicy'\nimport './styles.scss'\n\nconst IEWarningBanner = () => {\n  const [modalIsOpen, setModalIsOpen] = useState(true)\n  const [ieModalIsOpen, setIeModalIsOpen] = useState(false)\n\n  const acceptIeBad = () => {\n    setModalIsOpen(false)\n  }\n\n  return (\n    <ModalContainer\n      label=\"ie-banner-modal\"\n      modalIsOpen={modalIsOpen}\n      closeModal={() => {}}\n      cookie\n    >\n      <div className=\"ie-info-container\">\n        <CookieConsent\n          buttonText=\"Hyväksy\"\n          onAccept={acceptIeBad}\n          cookieName=\"IEBadAcknowledged\"\n          style={{\n            flexDirection: 'column',\n            flexWrap: 'nowrap',\n            alignItems: 'center',\n            padding: '5px',\n            position: 'absolute',\n            top: '2%',\n          }}\n          buttonStyle={{\n            color: '#3a3a3a',\n            fontSize: '0.900rem',\n            background: '#f59023',\n            margin: '0 auto 10px',\n            padding: '5px 10px',\n            borderRadius: '30px',\n            flex: '0 auto',\n          }}\n          contentStyle={{\n            flex: '0 auto',\n            margin: '15px',\n          }}\n        >\n          Palvelu ei valitettavasti toimi kunnolla Microsoft Internet Explorer\n          -selaimella. Microsoft ei enää tue ja kehitä sitä. Suosittelemme\n          käyttämään jotain muuta selainta.\n        </CookieConsent>\n        <ModalContainer\n          modalIsOpen={ieModalIsOpen}\n          closeModal={() => setIeModalIsOpen(false)}\n          label=\"Internet explorer varoitus\"\n          aria={{\n            labelledby: 'Internet explorer varoitus',\n            modal: true,\n          }}\n        >\n          <aside id=\"Internet explorer varoitus\">\n            <PrivacyPolicy />\n            <ButtonContainer\n              className=\"accept-rules-icon-btn icon-btn\"\n              onClick={() => setIeModalIsOpen(false)}\n              label=\"Sulje\"\n            >\n              <div className=\"go-back-button\" />\n            </ButtonContainer>\n            <ButtonContainer\n              className=\"profile-modal-button accept-rules-modal-button\"\n              onClick={() => setIeModalIsOpen(false)}\n            >\n              Sulje\n            </ButtonContainer>\n          </aside>\n        </ModalContainer>\n      </div>\n    </ModalContainer>\n  )\n}\n\nexport default IEWarningBanner\n","import React, { Component } from 'react'\nimport { Route, withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { isIE } from 'react-device-detect'\nimport PropTypes from 'prop-types'\nimport Container from './components/Container'\nimport BottomNavigationContainer from './containers/BottomNavigationContainer'\nimport GroupsContainer from './containers/GroupsContainer'\nimport PrivateRoute from './utils/PrivateRoute'\nimport ChatContainer from './containers/ChatContainer'\nimport LogInContainer from './containers/LogInContainer'\nimport CreateAccountContainer from './containers/CreateAccountContainer'\nimport RegistrationContainer from './containers/RegistrationContainer'\nimport RegistrationSuccessContainer from './containers/RegistrationSuccessContainer'\nimport ThankYouMessageContainer from './containers/ThankYouMessageContainer'\nimport RegistrationProblemContainer from './containers/RegistrationProblemContainer'\nimport ProfileContainer from './containers/ProfileContainer'\nimport OtherUserProfileContainer from './containers/OtherUserProfileContainer'\nimport EmailVerificationContainer from './containers/EmailVerificationContainer'\nimport PasswordResetRequestContainer from './containers/PasswordResetRequestContainer'\nimport PasswordResetInfoContainer from './containers/PasswordResetInfoContainer'\nimport PasswordResetPageContainer from './containers/PasswordResetPageContainer'\nimport FriendsContainer from './containers/FriendsContainer'\nimport ViewImageContainer from './containers/ViewImageContainer'\nimport EditProfileContainer from './containers/EditProfileContainer'\nimport InterestsContainer from './containers/InterestsContainer'\nimport FullScreenLoading from './components/FullScreenLoading'\nimport { rootStartUp as rootStartUpAction } from './store/root'\nimport ChangeAccountInfoContainer from './containers/ChangeAccountInfoContainer'\nimport RestoreAccountContainer from './containers/RestoreAccountContainer'\nimport AccountLocked from './components/AccountLocked'\nimport CookieConsentBanner from './components/CookieConsentBanner'\nimport IEWarningBanner from './components/IEWarningBanner'\nimport './styles/defaults.scss'\n\nclass App extends Component {\n  async componentDidMount() {\n    const { rootStartUp } = this.props\n    await rootStartUp()\n  }\n\n  // Compare important props and prevent re-render if those are not changing\n  shouldComponentUpdate(nextProps) {\n    const { history, rootStartUp, user: pUser, loading } = this.props\n    return !(\n      nextProps.history === history &&\n      nextProps.user === pUser &&\n      nextProps.loading === loading &&\n      nextProps.rootStartUp === rootStartUp\n    )\n  }\n\n  render() {\n    const { loading, user: pUser, mmuser } = this.props\n    if (loading.root && localStorage.getItem('authToken')) {\n      return <FullScreenLoading />\n    }\n    if (!loading.root && !mmuser && localStorage.getItem('authToken')) {\n      return <AccountLocked />\n    }\n    return (\n      <Container className=\"main-container\">\n        {localStorage.getItem('authToken') && <BottomNavigationContainer />}\n        <Route exact path=\"/login\" component={LogInContainer} />\n        <Route path=\"/login/:uuid\" component={LogInContainer} />\n        <Route\n          exact\n          path=\"/email-verification\"\n          component={EmailVerificationContainer}\n        />\n        <Route\n          exact\n          path=\"/reset-password\"\n          component={PasswordResetRequestContainer}\n        />\n        <Route\n          path=\"/reset-password-info\"\n          component={PasswordResetInfoContainer}\n        />\n        <Route\n          path=\"/reset-password/:uuid\"\n          component={PasswordResetPageContainer}\n        />\n        <Route\n          path=\"/registration-success\"\n          component={RegistrationSuccessContainer}\n        />\n        <Route path=\"/messagesent\" component={ThankYouMessageContainer} />\n        <Route path=\"/createaccount\" component={CreateAccountContainer} />\n        <Route\n          path=\"/registrationproblem\"\n          component={RegistrationProblemContainer}\n        />\n        <PrivateRoute\n          path=\"/registration/:step\"\n          component={RegistrationContainer}\n        />\n        <PrivateRoute exact path=\"/\" component={GroupsContainer} />\n        <PrivateRoute exact path=\"/friends\" component={FriendsContainer} />\n        <PrivateRoute\n          path=\"/profile/:username\"\n          component={OtherUserProfileContainer}\n        />\n        <PrivateRoute path=\"/me\" component={ProfileContainer} />\n        <PrivateRoute path=\"/edit-me\" component={EditProfileContainer} />\n        <PrivateRoute exact path=\"/chat/:id\" component={ChatContainer} />\n        <PrivateRoute path=\"/chat/:id/:fileId\" component={ViewImageContainer} />\n        <PrivateRoute path=\"/edit-interests\" component={InterestsContainer} />\n        <PrivateRoute path=\"/account\" component={ChangeAccountInfoContainer} />\n        {localStorage.getItem('authToken') && pUser && pUser.deleteAt && (\n          <RestoreAccountContainer />\n        )}\n        {!document.cookie.includes('CookieConsent=true') && (\n          <CookieConsentBanner />\n        )}\n        {isIE && !document.cookie.includes('IEBadAcknowledged=true') && (\n          <IEWarningBanner />\n        )}\n      </Container>\n    )\n  }\n}\n\nApp.propTypes = {\n  history: PropTypes.instanceOf(Object).isRequired,\n  rootStartUp: PropTypes.func.isRequired,\n  loading: PropTypes.instanceOf(Object).isRequired,\n  user: PropTypes.instanceOf(Object).isRequired,\n  mmuser: PropTypes.instanceOf(Object),\n}\n\nApp.defaultProps = {\n  mmuser: null,\n}\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n      rootStartUp: rootStartUpAction,\n    },\n    dispatch\n  )\n\nconst mapStateToProps = store => {\n  const currentUserId =\n    store &&\n    store.entities &&\n    store.entities.users &&\n    store.entities.users.currentUserId\n  const profiles =\n    store &&\n    store.entities &&\n    store.entities.users &&\n    store.entities.users.profiles\n  return {\n    loading: store.loading,\n    user: store.user,\n    mmuser: profiles[currentUserId],\n  }\n}\n\n// export default App\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(App))\n","// eslint-disable-next-line import/prefer-default-export\nexport const StorageTypes = {\n  SET_ITEM: 'SET_ITEM',\n  REMOVE_ITEM: 'REMOVE_ITEM',\n  SET_GLOBAL_ITEM: 'SET_CLOBAL_ITEM',\n  REMOVE_GLOBAL_ITEM: 'REMOVE_GLOBAL_ITEM',\n  CLEAR: 'CLEAR',\n  ACTION_ON_GLOBAL_ITEMS_WITH_PREFIX: 'ACTION_ON_GLOBAL_ITEMS_WITH_PREFIX',\n  ACTION_ON_ITEMS_WITH_PREFIX: 'ACTION_ON_ITEMS_WITH_PREFIX',\n  STORAGE_REHYDRATE: 'STORAGE_REHYDRATE',\n}\n","import { StorageTypes } from '../../contants/storageTypes'\n\nexport default function storageRehydrate(incoming, persistor) {\n  return (dispatch, getState) => {\n    const state = getState()\n    persistor.pause()\n    Object.keys(incoming).forEach(key => {\n      const storage = {}\n      try {\n        const value = JSON.parse(incoming[key])\n        if (value === null) {\n          storage[key] = { value, timestamp: new Date() }\n        } else if (typeof state.storage.storage[key] === 'undefined') {\n          if (typeof value.timestamp === 'undefined') {\n            storage[key] = { value, timestamp: new Date() }\n          } else {\n            storage[key] = {\n              value: value.value,\n              timestamp: new Date(value.timestamp),\n            }\n          }\n        } else if (typeof value.timestamp === 'undefined') {\n          storage[key] = { value, timestamp: new Date() }\n        } else if (\n          typeof state.storage.storage[key].timestamp === 'undefined'\n        ) {\n          storage[key] = {\n            value: value.value,\n            timestamp: new Date(value.timestamp),\n          }\n        } else if (\n          new Date(value.timestamp) > state.storage.storage[key].timestamp\n        ) {\n          storage[key] = {\n            value: value.value,\n            timestamp: new Date(value.timestamp),\n          }\n        } else {\n          return\n        }\n      } catch (err) {\n        if (process.env.NODE_ENV !== 'production') {\n          // eslint-disable-line no-process-env\n          console.warn('Error rehydrating data for key \"storage\"', err) // eslint-disable-line no-console\n        }\n      }\n      dispatch({\n        type: StorageTypes.STORAGE_REHYDRATE,\n        data: storage,\n      })\n    })\n    persistor.resume()\n    return { data: true }\n  }\n}\n","import * as types from '../../contants/actionTypes'\n\nexport default function user(state = {}, action) {\n  switch (action.type) {\n    case types.ADD_USER_TO_STATE: {\n      return { ...action.user }\n    }\n    case types.UPDATE_USER: {\n      return { ...state, ...action.user }\n    }\n    case types.UPDATE_USER_PASSWORD_FAILURE: {\n      return { ...state, errorMessage: action.payload }\n    }\n    case types.SIGNUP_SIGNIN_FAILURE: {\n      return { ...state, errorMessage: action.payload.message }\n    }\n    case types.GET_USER_FAILURE: {\n      return { ...state, errorMessage: action.payload.message }\n    }\n    case types.UPDATE_USER_FAILURE: {\n      return { ...state, errorMessage: action.payload.message }\n    }\n    case types.USER_LOGIN_FAILURE: {\n      return { ...state, errorMessage: action.payload.message }\n    }\n    case types.GET_USER_INTERESTS: {\n      return { ...state, ...action.userInterests }\n    }\n    case types.RESTORE_USER: {\n      return { ...state, deleteAt: null }\n    }\n    default:\n      return state\n  }\n}\n","import * as types from '../../contants/actionTypes'\n\nexport default function interests(state = {}, action) {\n  switch (action.type) {\n    case types.GET_INTERESTS: {\n      return { ...action.interests }\n    }\n    default:\n      return state\n  }\n}\n","import * as types from '../../contants/actionTypes'\n\nconst defaultState = {\n  loading: false,\n}\n\nexport default function channels(state = defaultState, action) {\n  switch (action.type) {\n    case types.GET_CHANNEL_INVITATIONS: {\n      return { ...state, ...action.channelInvitations }\n    }\n    case types.RESET_CHANNEL_INVITATIONS: {\n      return { loading: false }\n    }\n    case types.GET_CHANNEL_INVITATION_MEMBERS: {\n      return {\n        ...state,\n        members: { ...state.members, [action.channelId]: action.members },\n      }\n    }\n    case types.START_INVITATION_FETCHING:\n      return {\n        ...state,\n        loading: true,\n      }\n    case types.INVITATION_FETCHING_READY: {\n      return {\n        ...state,\n        loading: false,\n      }\n    }\n    default:\n      return state\n  }\n}\n","import * as types from '../../contants/actionTypes'\n\nconst defaultState = {\n  loading: false,\n}\n\nexport default function friends(state = defaultState, action) {\n  switch (action.type) {\n    case types.START_FRIENDS_FETCHING:\n      return {\n        ...state,\n        loading: true,\n      }\n    case types.FRIENDS_FETCHING_READY: {\n      return {\n        ...state,\n        loading: false,\n      }\n    }\n    default:\n      return state\n  }\n}\n","import * as types from '../../contants/actionTypes'\n\nconst defaultState = {\n  root: true,\n}\n\nexport default function loading(state = defaultState, action) {\n  switch (action.type) {\n    case types.ROOT_LOADING_READY:\n      return {\n        ...state,\n        root: false,\n      }\n    case types.START_ROOT_LOADING: {\n      return {\n        ...state,\n        root: true,\n      }\n    }\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport user from './user/userReducer'\nimport interests from './interest/interestReducer'\nimport channels from './channels/channelReducer'\nimport friends from './friends/friendsReducer'\nimport loading from './root/rootReducer'\n\nexport const appReducer = () => {\n  return {\n    loading,\n    user,\n    interests,\n    channels,\n    friends,\n  }\n}\n\nexport default () => combineReducers(appReducer())\n","/* eslint-disable no-prototype-builtins */\n/* eslint-disable no-restricted-syntax */\nfunction transformFromSet(incoming) {\n  const state = { ...incoming }\n\n  for (const key in state) {\n    if (state.hasOwnProperty(key)) {\n      if (state[key] instanceof Set) {\n        state[key] = Array.from([...state[key]])\n      }\n    }\n  }\n\n  return state\n}\n\nfunction transformToSet(incoming) {\n  const state = { ...incoming }\n\n  for (const key in state) {\n    if (state.hasOwnProperty(key)) {\n      state[key] = new Set(state[key])\n    }\n  }\n\n  return state\n}\n\nexport default function transformSet(\n  incoming,\n  setTransforms,\n  toStorage = true\n) {\n  const state = { ...incoming }\n\n  const transformer = toStorage ? transformFromSet : transformToSet\n\n  for (const key in state) {\n    if (state.hasOwnProperty(key) && setTransforms.includes(key)) {\n      state[key] = transformer(state[key])\n    }\n  }\n\n  return state\n}\n","import { Client4 } from 'mattermost-redux/client'\n\nconst MAX_NETWORK_RETRIES = 7\nconst MIN_NETWORK_RETRY_TIME = 3000\nconst MAX_NETWORK_RETRY_TIME = 300000\n\nfunction handle(callback, online) {\n  if (window.requestAnimationFrame) {\n    window.requestAnimationFrame(() => callback(online))\n  } else {\n    setTimeout(() => callback(online), 0)\n  }\n}\n\nasync function isOnline() {\n  if (window.navigator && window.navigator.onLine) {\n    return true\n  }\n\n  try {\n    await Client4.ping()\n  } catch (err) {\n    return false\n  }\n\n  return true\n}\n\nlet retryTimeoutId\nlet retryCount\n\nasync function checkNetworkStatus(callback) {\n  const online = await isOnline()\n\n  if (online) {\n    retryCount = 0\n    clearTimeout(retryTimeoutId)\n\n    handle(callback, true)\n    return\n  }\n\n  let retryTime = MIN_NETWORK_RETRY_TIME\n\n  if (retryCount > MAX_NETWORK_RETRIES) {\n    retryTime = MIN_NETWORK_RETRY_TIME * retryCount\n    if (retryTime > MAX_NETWORK_RETRY_TIME) {\n      retryTime = MAX_NETWORK_RETRY_TIME\n    }\n  }\n\n  retryCount += 1\n\n  retryTimeoutId = setTimeout(() => checkNetworkStatus(callback), retryTime)\n\n  handle(callback, false)\n}\n\nexport default async function detect(callback) {\n  window.addEventListener('online', () => checkNetworkStatus(callback))\n  window.addEventListener('offline', () => checkNetworkStatus(callback))\n  checkNetworkStatus(callback)\n}\n","/* eslint-disable no-param-reassign */\n/* eslint-disable no-prototype-builtins */\n/* eslint-disable no-restricted-syntax */\n\nimport Observable from 'zen-observable'\nimport localForage from 'localforage'\nimport { extendPrototype } from 'localforage-observable'\nimport { createTransform, persistStore } from 'redux-persist'\nimport { General, RequestStatus } from 'mattermost-redux/constants'\nimport configureServiceStore from 'mattermost-redux/store'\nimport reduxInitialState from 'mattermost-redux/store/initial_state'\nimport storageRehydrate from './storage/storageAction'\nimport { clearUserCookie } from './user/userAction'\nimport getAppReducer, { appReducer } from './rootReducer'\nimport transformSet from './utils'\nimport detect from '../utils/network'\nimport * as ActionTypes from '../contants/actionTypes'\nimport getBasePath from './general/generalSelectors'\n\nconst usersSetTransform = [\n  'profilesInChannel',\n  'profilesNotInChannel',\n  'profilesInTeam',\n  'profilesNotInTeam',\n]\n\nconst teamSetTransform = ['membersInTeam']\n\nconst setTransforms = [...usersSetTransform, ...teamSetTransform]\n\nconst whitelist = {\n  keys: [],\n  prefixes: ['storage'],\n  indexOf: function indexOf(key) {\n    if (this.keys.indexOf(key) !== -1) {\n      return 0\n    }\n\n    for (let i = 0; i < this.prefixes.length; i++) {\n      if (key.startsWith(this.prefixes[i])) {\n        return 0\n      }\n    }\n\n    return -1\n  },\n}\n\nwindow.Observable = Observable\n\nexport default function configureStore(initialState) {\n  const setTransformer = createTransform(\n    (inboundState, key) => {\n      if (key === 'entities') {\n        const state = { ...inboundState }\n        for (const prop in state) {\n          if (state.hasOwnProperty(prop)) {\n            state[prop] = transformSet(state[prop], setTransforms)\n          }\n        }\n\n        return state\n      }\n\n      return inboundState\n    },\n    (outboundState, key) => {\n      if (key === 'entities') {\n        const state = { ...outboundState }\n        for (const prop in state) {\n          if (state.hasOwnProperty(prop)) {\n            state[prop] = transformSet(state[prop], setTransforms, false)\n          }\n        }\n\n        return state\n      }\n\n      return outboundState\n    }\n  )\n\n  const offlineOptions = {\n    persist: (store, options) => {\n      const localforage = extendPrototype(localForage)\n      const storage = localforage\n      const KEY_PREFIX = 'reduxPersist:'\n\n      localforage\n        .ready()\n        .then(() => {\n          const persistor = persistStore(\n            store,\n            { storage, keyPrefix: KEY_PREFIX, ...options },\n            () => {\n              store.dispatch({\n                type: General.STORE_REHYDRATION_COMPLETE,\n                complete: true,\n              })\n            }\n          )\n\n          localforage.configObservables({\n            crossTabNotification: true,\n          })\n\n          const observable = localforage.newObservable({\n            crossTabNotification: true,\n            changeDetection: true,\n          })\n\n          const restoredState = {}\n          localforage\n            .iterate((value, key) => {\n              if (key && key.indexOf(`${KEY_PREFIX}storage:`) === 0) {\n                const keyspace = key.substr(`${KEY_PREFIX}storage:`.length)\n                restoredState[keyspace] = value\n              }\n            })\n            .then(() => {\n              storageRehydrate(restoredState, persistor)(\n                store.dispatch,\n                store.getState\n              )\n            })\n\n          observable.subscribe({\n            next: args => {\n              if (\n                args.key &&\n                args.key.indexOf(`${KEY_PREFIX}storage:`) === 0 &&\n                args.oldValue === null\n              ) {\n                const keyspace = args.key.substr(`${KEY_PREFIX}storage:`.length)\n\n                const statePartial = {}\n                statePartial[keyspace] = args.newValue\n                storageRehydrate(statePartial, persistor)(\n                  store.dispatch,\n                  store.getState\n                )\n              }\n            },\n          })\n\n          let purging = false\n\n          store.subscribe(() => {\n            const state = store.getState()\n            const basePath = getBasePath(state)\n\n            if (\n              state.requests.users.logout.status === RequestStatus.SUCCESS &&\n              !purging\n            ) {\n              purging = true\n\n              persistor.purge().then(() => {\n                clearUserCookie()\n                window.location.href = `${basePath}${window.location.search}`\n\n                store.dispatch({\n                  type: General.OFFLINE_STORE_RESET,\n                  data: Object.assign({}, reduxInitialState, initialState),\n                })\n\n                setTimeout(() => {\n                  purging = false\n                }, 500)\n              })\n            }\n          })\n        })\n        .catch(error => {\n          store.dispatch({\n            type: ActionTypes.STORE_REHYDRATION_FAILED,\n            error,\n          })\n        })\n    },\n    persistOptions: {\n      autoRehydrate: {\n        log: false,\n      },\n      whitelist,\n      debounce: 30,\n      transforms: [setTransformer],\n      _stateIterator: (collection, callback) => {\n        return Object.keys(collection).forEach(key => {\n          if (key === 'storage') {\n            Object.keys(collection.storage.storage).forEach(storageKey => {\n              callback(\n                collection.storage.storage[storageKey],\n                `storage:${storageKey}`\n              )\n            })\n          } else {\n            callback(collection[key], key)\n          }\n        })\n      },\n      _stateGetter: (state, key) => {\n        let { storage } = state\n        if (key.indexOf('storage:') === 0) {\n          storage = storage || { storage: {} }\n          return storage.storage[key.substr(8)]\n        }\n        return state[key]\n      },\n      _stateSetter: (state, key, value) => {\n        let { storage } = state\n        if (key.indexOf('storage:') === 0) {\n          storage = storage || { storage: {} }\n          storage.storage[key.substr(8)] = value\n        }\n        state[key] = value\n        return state\n      },\n    },\n    detectNetwork: detect,\n  }\n\n  return configureServiceStore(\n    {},\n    appReducer(),\n    offlineOptions,\n    getAppReducer(),\n    {\n      enableBuffer: false,\n    }\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\nimport App from './App'\nimport configureMattermostStore from './store/configureMattermostStore'\n\nconst store = configureMattermostStore()\n\nconst render = () => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>,\n    document.getElementById('root')\n  )\n}\n\nrender()\nstore.subscribe(render)\n\nserviceWorker.unregister()\n","import { getConfig } from 'mattermost-redux/selectors/entities/general'\n\nexport default function getBasePath(state) {\n  const config = getConfig(state) || {}\n\n  if (config.SiteURL) {\n    return new URL(config.SiteURL).pathname\n  }\n\n  return window.basename || window.location.origin\n}\n"],"sourceRoot":""}